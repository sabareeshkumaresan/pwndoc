- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N'
  priority: 4
  remediationComplexity: 2
  details:
    - locale: EN
      title: 'WSTG-INPV-05: SQL Injection'
      vulnType: Pentest
      description: >-
        <p>SQL injection (SQLi) is a type of attack where an attacker exploits a
        vulnerability in a web application that allows them to execute malicious
        SQL statements. This is typically accomplished by inserting SQL commands
        or fragments of SQL code into input fields or parameters that are sent
        to a web application's database, which can result in unauthorized access
        to data, modification or deletion of data, or even complete takeover of
        the web application.</p><p>For example, an attacker might use SQL
        injection to bypass authentication mechanisms by entering a specially
        crafted input that causes the database to return all user records or
        grant administrative access. They could also modify or delete data by
        injecting SQL code that modifies or deletes database entries, or even
        drop or corrupt the entire database.</p>
      remediation: >-
        <p>The affected parameters should be checked for validity on the server
        side and special characters should be filtered out.</p><p>Ideally,
        prepared statements should be used for the database queries to avoid SQL
        injection vulnerabilities.</p><p></p>
      references:
        - 'https://owasp.org/www-community/attacks/SQL_Injection'
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:L'
  priority: 3
  remediationComplexity: 2
  details:
    - locale: EN
      title: 'WSTG-INPV-01: Cross-Site-Scripting in GET-Request'
      vulnType: Pentest
      description: >-
        <p>Cross-Site Scripting (XSS) is a type of web security vulnerability
        where attackers inject malicious scripts into a website or web
        application. These scripts are then executed in the context of other
        users' browsers, allowing the attacker to carry out malicious actions.
        XSS attacks exploit the trust between a user and a website, often
        targeting areas where user-generated content is displayed without proper
        validation or escaping.</p><p>By exploiting this vulnerability,
        cross-site scripting attacks on website visitors are possible. Possible
        effects of successful cross-site scripting attacks
        include:</p><ul><li><p>Stealing credentials, session information,
        cookies,</p></li><li><p>Complete takeover of the client browser,
        including remote control of the client, if exploits exist for the
        browser used,</p></li><li><p>compromising the functionality of the web
        application,</p></li><li><p>alteration of the content and design of the
        pages.</p></li></ul><p>For example, if a user opens a crafted link, the
        attacker is able to manipulate the web page content and include a link
        to third-party malware to infect attacked clients.</p>
      observation: <p>THIS IS MY POC</p>
      remediation: >-
        <p>Countermeasures against XSS include input validation, output
        encoding, and implementing content security policies. This includes
        verifying that input is of the correct type and length, and that it does
        not contain any potentially malicious characters or code. Input
        validation ensures only legitimate data is accepted, output encoding
        prevents script execution, and content security policies restrict the
        sources of allowed scripts, reducing the attack surface. Regular updates
        and secure coding practices enhance protection.</p><p>More info can be
        found in the OWASP cheat sheet from the reference section.</p><p>A check
        via JavaScript on the client side is not sufficient, since this can also
        be manipulated by the client.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-CONF-07: HSTS-Header not set'
      vulnType: Pentest
      description: >-
        <p>HSTS stands for HTTP Strict Transport Security. It is a security
        feature that is implemented using an HTTP response header that instructs
        web browsers to only connect to a website using HTTPS (HTTP over
        SSL/TLS) protocol, even if the user types "http" in the URL
        bar.</p><p>The HSTS header helps prevent "Man-in-the-Middle" (MITM)
        attacks where an attacker could intercept the user's connection to the
        website and redirect them to a fake website where they could steal
        sensitive information like login credentials, credit card details,
        etc.</p><p>When a website sends the HSTS header to the browser, it
        instructs the browser to remember that the website should always be
        accessed via HTTPS for a specified period of time (usually for several
        months). Once the browser has received this instruction, it will
        automatically upgrade any HTTP requests to HTTPS requests for that
        website, even if the user types "http" in the URL bar.</p><p>HSTS is an
        important security feature for websites, and it is recommended to
        implement it along with other security features such as SSL/TLS
        encryption, proper certificate management, and secure authentication
        methods.</p>
      remediation: >-
        <p>It is recommended to set the HTTP Strict-Transport-Security
        header.</p>
      references:
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N'
  priority: 1
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-INFO-02: Revealed Webserver Technology'
      vulnType: Pentest
      description: >-
        <p>Knowing the technology of a webserver can aid an attacker to
        determine how more targeted attacks can be conducted.<br>Webservers
        often times reveal the technology they are running on in response
        headers, even including concrete version numbers.<br>Attackers can then
        check if the version is affected by some kind of vulnerability and try
        to abuse it.</p><p></p>
      remediation: >-
        <p>It is recommened to publish as little information as possible about
        installed version statuses and reconfiguring the header information
        accordingly.</p>
      references: []
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  priority: 4
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-CONF-09: Unauthenticated File Access'
      vulnType: Pentest
      description: >-
        <p>File permissions are meant to restrict access to data so that only
        people that need access to it are allowed to.</p><p>Unrestricted file
        access poses a significant security risk due to the following
        reasons:</p><ul><li><p>Unauthorized Access: Unrestricted file access
        means that anyone, including malicious actors, can view, modify, or
        delete sensitive files. It allows unauthorized individuals or attackers
        to gain access to confidential information, personal data, intellectual
        property, or system files.</p></li><li><p>Data Leakage: Unrestricted
        file access increases the risk of data leakage. Sensitive or
        confidential information may be inadvertently or deliberately shared
        with unauthorized parties. This can lead to financial losses,
        reputational damage, compliance violations, or legal
        consequences.</p></li><li><p>Malware Injection: Malicious actors can
        exploit unrestricted file access to inject malware into the system. By
        accessing and modifying critical files, they can introduce malicious
        code, viruses, or ransomware that can compromise the integrity and
        functionality of the system.</p></li><li><p>Unauthorized Modifications:
        Unrestricted file access allows unauthorized users to modify or tamper
        with files. This can result in unauthorized changes to system
        configurations, application settings, or critical data, leading to
        system instability, operational disruptions, or compromised
        functionality.</p></li><li><p>Privilege Escalation: Unrestricted file
        access can enable privilege escalation attacks. If an attacker gains
        access to certain files with elevated privileges, they can exploit
        vulnerabilities or weak security controls to escalate their privileges,
        gaining unauthorized administrative access to the system or sensitive
        resources.</p></li><li><p>Insider Threats: Unrestricted file access
        increases the risk of insider threats. Employees or insiders with
        legitimate access to files may misuse their privileges, intentionally or
        unintentionally, by leaking sensitive information, modifying critical
        files, or stealing valuable data.</p></li><li><p>Compliance Violations:
        Unrestricted file access may lead to non-compliance with industry
        regulations and data protection standards. Many regulatory frameworks,
        such as the General Data Protection Regulation (GDPR), require
        organizations to implement appropriate access controls and restrictions
        to protect personal data and ensure privacy.</p></li></ul><p>To mitigate
        these risks, it is essential to implement strong access controls, file
        permissions, and security measures. Access should be restricted to
        authorized individuals based on the principle of least privilege, where
        users only have access to the files necessary for their roles and
        responsibilities. Regular monitoring, auditing, and encryption of
        sensitive files can further enhance security.</p>
      remediation: >-
        <p>Restrict access to the files according to the principle of least
        privileges.</p>
      references:
        - 'https://owasp.org/www-community/Broken_Access_Control'
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:L/A:N'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-ATHN-01: Unencrypted Login via HTTP'
      vulnType: Pentest
      description: >-
        <p>Credentials, such as usernames and passwords, are sensitive
        information that should be protected from unauthorized access or
        interception. Transporting them over encrypted channels helps to ensure
        their confidentiality, integrity, and authenticity.</p><p>Encryption is
        a process of converting plaintext into ciphertext using an encryption
        algorithm and a secret key. The resulting ciphertext can only be
        decrypted back into plaintext using the same key. This ensures that only
        authorized parties with access to the key can read the contents of the
        message.</p><p>When credentials are transported over an encrypted
        channel, such as HTTPS, the data is protected from interception and
        tampering. This is because the encryption process makes it difficult for
        attackers to read or modify the contents of the message. It also
        provides assurance that the sender is who they claim to be, and that the
        message has not been altered in transit.</p><p>Without encryption,
        credentials can be easily intercepted by attackers who have access to
        the communication channel, such as through packet sniffing or
        man-in-the-middle attacks. This can lead to unauthorized access to
        sensitive data, such as personal information, financial data, or
        intellectual property.</p><p>In summary, transporting credentials over
        encrypted channels is essential to protect them from interception and
        ensure their confidentiality, integrity, and authenticity.</p>
      observation: >-
        <p>The application can be accessed over HTTP as well as HTTPS.<br>As
        there are no HSTS headers set (refer to chapter XYZ), the user can
        freely decide if to use the encrypted or unencrypted version.<br>In the
        case of the latter one, the credentials are transported unencrypted and
        as such easily to retrieve in Man-in-the-Middle attacks.</p>
      remediation: >-
        <p>Only use secured protocols and services to run applications.<br>In
        this case turn of the possibility to use the unencrypted HTTP version of
        the webapplication.</p>
      references: []
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:L/A:N'
  priority: 2
  remediationComplexity: 2
  details:
    - locale: EN
      title: 'WSTG-ATHN-03: Missing Brute-Force Protection'
      vulnType: Pentest
      description: >-
        <p>Brute-force protection is a mechanism used to prevent attackers from
        guessing a user's login credentials through a trial-and-error process
        known as a brute-force attack. In this type of attack, an attacker tries
        multiple combinations of usernames and passwords until they find the
        correct one, allowing them to gain unauthorized access to the
        system.</p><p>To prevent brute-force attacks, login functionality may
        include various brute-force protection measures. One common method is to
        limit the number of login attempts within a specified time frame. For
        example, after three failed login attempts, the system may lock the
        account or impose a time delay before allowing additional login
        attempts. This prevents an attacker from trying an unlimited number of
        combinations in a short period.</p><p>Another method of brute-force
        protection is to implement a CAPTCHA (Completely Automated Public Turing
        test to tell Computers and Humans Apart) system, which requires the user
        to enter a visual or audio challenge-response test that only humans can
        solve. This helps to prevent automated bots from attempting multiple
        login attempts in quick succession.</p><p>In summary, brute-force
        protection is used to prevent attackers from guessing a user's login
        credentials through a trial-and-error process. This is typically
        achieved by limiting the number of login attempts within a specified
        time frame, or by implementing a CAPTCHA system to prevent automated
        attacks. These measures help to improve the security of login
        functionality and protect user accounts from unauthorized access.</p>
      remediation: >-
        <p>Implement countermeasures like timeouts, lockout policies and
        captchas.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism
        - 'https://owasp.org/www-community/attacks/Brute_force_attack'
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  priority: 2
  remediationComplexity: 2
  details:
    - locale: EN
      title: 'WSTG-ATHN-03: Weak Lockout Policy'
      vulnType: Pentest
      description: >-
        <p>A lockout policy is a security mechanism used to prevent unauthorized
        access to an account by locking the account after a certain number of
        failed login attempts. This is done to prevent brute-force attacks, in
        which an attacker tries to guess a user's login credentials by
        repeatedly submitting different username and password
        combinations.</p><p>The lockout policy typically includes the number of
        failed login attempts that trigger the account lockout, as well as the
        duration of the lockout period. For example, a lockout policy might
        specify that after five failed login attempts, the account will be
        locked for 30 minutes.</p><p>Lockout policies help to improve the
        security of user accounts by preventing attackers from gaining
        unauthorized access through brute-force attacks. They also encourage
        users to create strong passwords and take other security measures to
        protect their accounts, as they know that repeated failed login attempts
        could lead to a lockout.</p><p>However, lockout policies can also have
        drawbacks if they are set too strictly. For example, if the number of
        failed login attempts is set too low, users may accidentally trigger the
        lockout policy by mistyping their password or forgetting their password
        and attempting to reset it. Additionally, if the lockout period is too
        long, it can be frustrating for users who need to access their account
        urgently. As such, lockout policies should be carefully designed and
        tested to balance security needs with user experience.</p>
      remediation: >-
        <p>Implement according policies that lockout accounts after a predefined
        amount of failed attempts.</p>
      references:
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-ATHN-07: Weak Password Policy'
      vulnType: Pentest
      description: >-
        <p>A password policy is a set of rules and guidelines that dictate the
        requirements for creating and using passwords in a system. The primary
        purpose of a password policy is to improve the security of user accounts
        by ensuring that passwords are strong, unique, and not easily
        guessable.</p><p>Password policies may include requirements such as
        minimum length, complexity, and expiration period. For example, a
        password policy might require that passwords be at least 8 characters
        long, contain a combination of letters, numbers, and symbols, and expire
        every 90 days. The policy may also prohibit the use of common passwords
        or dictionary words, and may enforce a limit on the number of failed
        login attempts before locking the account.</p><p>Password policies are
        important because weak passwords are a common vulnerability that can be
        easily exploited by attackers. By requiring strong passwords and
        enforcing regular password changes, password policies can help to
        prevent unauthorized access and data breaches.</p><p>However, password
        policies can also have drawbacks if they are too strict or complicated.
        For example, if the requirements for password complexity are too
        difficult to remember, users may resort to writing down their passwords
        or reusing the same password across multiple accounts, which can also
        pose security risks. As such, password policies should be carefully
        designed to balance security needs with user experience and
        convenience.</p>
      remediation: >-
        <p>Implement a strong password policy that hinders users to set weak
        passwords.</p><p>Best practices include:<br></p><ol><li><p>Length:
        Encourage the use of longer passwords, typically a minimum of 12
        characters or more. Longer passwords are generally more secure as they
        increase the number of possible combinations, making them harder to
        guess or crack.</p></li><li><p>Complexity: Require a combination of
        uppercase and lowercase letters, numbers, and special characters. This
        ensures a broader range of characters are used, making passwords more
        resistant to dictionary-based attacks.</p></li><li><p>Avoid common
        patterns and predictable information: Discourage the use of easily
        guessable patterns (e.g., "123456" or "abcdef") and information commonly
        associated with users (e.g., names, birthdates, or common words). These
        can be easily exploited by attackers.</p></li><li><p>Avoid forced
        regular password changes: Research suggests that frequent password
        changes may lead to weaker passwords, as users tend to choose simpler
        passwords when forced to change them frequently. Instead, encourage
        password changes when there is a suspected compromise or evidence of
        weak security.</p></li><li><p>Password blacklisting: Maintain a list of
        commonly used or compromised passwords and prevent users from selecting
        them. This helps to block the use of easily guessable or breached
        passwords.</p></li><li><p>Two-factor authentication (2FA): Encourage or
        require the use of additional authentication factors, such as SMS codes,
        authenticator apps, or hardware tokens, to add an extra layer of
        security to user accounts. This helps protect against unauthorized
        access even if the password is compromised.</p></li><li><p>User
        education and awareness: Provide clear guidelines to users on how to
        create strong passwords and the importance of good password hygiene.
        Educate users about the risks of password reuse, phishing attacks, and
        the significance of protecting their accounts.</p></li></ol><p>Remember
        that password complexity policies should be balanced to ensure they are
        strong enough to resist attacks but not overly burdensome for users.
        Striking the right balance promotes better security practices and user
        compliance.<br></p>
      references:
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H'
  priority: 4
  remediationComplexity: 3
  details:
    - locale: EN
      title: 'WSTG-ATHZ-03: Elevation of Privileges'
      vulnType: Pentest
      description: >-
        <p>Privilege escalation refers to the act of gaining increased access or
        permissions on a computer system, network, or application beyond what
        was originally authorized. This can be achieved through exploiting
        vulnerabilities, misconfigurations, or weaknesses in security
        controls.</p><p>Privilege escalation is generally considered a bad thing
        because it can lead to unauthorized access and control over sensitive
        information, systems, and resources. Attackers can use privilege
        escalation to perform malicious activities such as stealing data,
        modifying data, installing malware, or disrupting
        services.</p><p>Privilege escalation can also undermine the integrity
        and confidentiality of data, as well as violate privacy laws and
        regulations. It can lead to financial losses, reputational damage, and
        legal consequences for both individuals and organizations.</p><p>In
        summary, privilege escalation is a bad thing because it can lead to
        unauthorized access and control, which can result in serious security
        and privacy breaches.</p>
      remediation: >-
        <p>The separation of user rights should not only take place on the GUI
        level. Functions and endpoints meant for administrative purposes should
        only be available to users that are assigned to the according
        groups.</p><p>Implement according measures to ensure a correct
        separation of user rights and functions. </p><p></p>
      references: []
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:N'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-SESS-02: Session-Cookie without httpOnly-Flag'
      vulnType: Pentest
      description: >-
        <p>The httpOnly flag is an optional parameter for cookies and specifies
        that cookies secured with this flag may not be read via client-side
        scripts.</p><p>In the context of cross-site scripting attacks, for
        example, attempts are often made to take over a user's session by
        reading the cookie via JavaScript. This attack vector is prevented by
        setting the httpOnly flag.</p>
      remediation: <p>Set the <em>httpOnly </em>flag for all session relevant cookies.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N'
  priority: 4
  remediationComplexity: 2
  details:
    - locale: EN
      title: 'WSTG-SESS-05: Cross Site Request Forgery (CSRF)'
      vulnType: Pentest
      description: >-
        <p>Cross-site request forgery (CSRF or XSRF) is a type of attack where a
        malicious actor tricks a user into performing an action on a website
        without their knowledge or consent. This is achieved by sending a
        request from a user's browser that appears to originate from a
        legitimate website that the user is logged into, but is actually sent by
        the attacker. <br>The purpose of a CSRF attack is to exploit the trust
        that a website has in a user's browser, allowing the attacker to perform
        actions on the user's behalf, such as making unauthorized purchases or
        changing account settings.</p>
      remediation: >-
        <p>To protect against CSRF attacks, websites can implement
        countermeasures such as using CSRF tokens or requiring user confirmation
        for sensitive actions.<br>The tokens should be set for all critical
        functions.<br>More info can be found in the cheat sheet from the
        reference section.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:L'
  priority: 3
  remediationComplexity: 2
  details:
    - locale: EN
      title: 'WSTG-INPV-01: Reflected Cross-Site-Scripting'
      vulnType: Pentest
      description: >-
        <p>Cross-Site Scripting (XSS) is a type of web security vulnerability
        where attackers inject malicious scripts into a website or web
        application. These scripts are then executed in the context of other
        users' browsers, allowing the attacker to carry out malicious actions.
        XSS attacks exploit the trust between a user and a website, often
        targeting areas where user-generated content is displayed without proper
        validation or escaping.</p><p>By exploiting this vulnerability,
        cross-site scripting attacks on website visitors are possible. Possible
        effects of successful cross-site scripting attacks
        include:</p><ul><li><p>Stealing credentials, session information,
        cookies,</p></li><li><p>Complete takeover of the client browser,
        including remote control of the client, if exploits exist for the
        browser used,</p></li><li><p>compromising the functionality of the web
        application,</p></li><li><p>alteration of the content and design of the
        pages.</p></li></ul><p>In the case of reflected XSS the attacker needs
        the victim to execute the code, e.g. by sending him a malicious link he
        needs to click.</p>
      remediation: >-
        <p>Countermeasures against XSS include input validation, output
        encoding, and implementing content security policies. This includes
        verifying that input is of the correct type and length, and that it does
        not contain any potentially malicious characters or code. Input
        validation ensures only legitimate data is accepted, output encoding
        prevents script execution, and content security policies restrict the
        sources of allowed scripts, reducing the attack surface. Regular updates
        and secure coding practices enhance protection.</p><p>More info can be
        found in the OWASP cheat sheet from the reference section.</p><p>A check
        via JavaScript on the client side is not sufficient, since this can also
        be manipulated by the client.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:L'
  priority: 4
  remediationComplexity: 2
  details:
    - locale: EN
      title: 'WSTG-INPV-02: Stored Cross-Site-Scripting'
      vulnType: Pentest
      description: >-
        <p>Cross-Site Scripting (XSS) is a type of web security vulnerability
        where attackers inject malicious scripts into a website or web
        application. These scripts are then executed in the context of other
        users' browsers, allowing the attacker to carry out malicious actions.
        XSS attacks exploit the trust between a user and a website, often
        targeting areas where user-generated content is displayed without proper
        validation or escaping.</p><p>By exploiting this vulnerability,
        cross-site scripting attacks on website visitors are possible. Possible
        effects of successful cross-site scripting attacks
        include:</p><ul><li><p>Stealing credentials, session information,
        cookies,</p></li><li><p>Complete takeover of the client browser,
        including remote control of the client, if exploits exist for the
        browser used,</p></li><li><p>compromising the functionality of the web
        application,</p></li><li><p>alteration of the content and design of the
        pages.</p></li></ul><p>In the case of stored XSS the attacker is able to
        place the malicious code inside the application. He then needs to wait
        for his victims to trigger the code e.g. by using a specific function
        inside the application.</p>
      remediation: >-
        <p>Countermeasures against XSS include input validation, output
        encoding, and implementing content security policies. This includes
        verifying that input is of the correct type and length, and that it does
        not contain any potentially malicious characters or code. Input
        validation ensures only legitimate data is accepted, output encoding
        prevents script execution, and content security policies restrict the
        sources of allowed scripts, reducing the attack surface. Regular updates
        and secure coding practices enhance protection.</p><p>More info can be
        found in the OWASP cheat sheet from the reference section.</p><p>A check
        via JavaScript on the client side is not sufficient, since this can also
        be manipulated by the client.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N'
  priority: 2
  remediationComplexity: 2
  details:
    - locale: EN
      title: 'WSTG-CRYP-01: Weak TLS Configuration'
      vulnType: Pentest
      description: >-
        <p>Transport Layer Security (TLS) is a cryptographic protocol that
        provides secure communication over a network by encrypting data sent
        between two devices. TLS is commonly used to secure HTTP connections,
        which are used to transfer data between web servers and clients, and is
        often referred to as HTTPS.</p><p>TLS works by creating a secure
        communication channel between two devices, using a combination of public
        key encryption and symmetric key encryption. During the initial
        connection, the client and server exchange cryptographic keys to
        establish a secure session. The keys are then used to encrypt and
        decrypt data sent between the two devices.</p><p>While Transport Layer
        Security (TLS) is a widely used and effective protocol for securing
        communication over a network, it is not without weaknesses. Some of the
        weaknesses of TLS include:</p><ul><li><p>Weak cipher suites: Some older
        cipher suites used in TLS are now considered weak and vulnerable to
        attacks, such as the infamous POODLE attack. It is important to use
        strong cipher suites and disable any deprecated or insecure cipher
        suites.</p></li><li><p>Certificate authority (CA) vulnerabilities: The
        trust model of TLS relies on the security of the CA system, which can be
        vulnerable to attacks such as phishing or compromise of CAs. This can
        result in fake or fraudulent certificates being issued, which can then
        be used to perform man-in-the-middle
        attacks.</p></li><li><p>Implementation flaws: TLS implementations can
        contain flaws that could be exploited by attackers, such as the
        Heartbleed vulnerability, which allowed attackers to steal sensitive
        information from servers using a specific version of the OpenSSL
        cryptographic library.</p></li><li><p>Key management: TLS relies on
        secure key management practices to ensure the integrity and
        confidentiality of data in transit. If keys are compromised or not
        managed properly, it can result in the encryption being broken and
        sensitive information being exposed.</p></li><li><p>Attacks against the
        protocol itself: New attacks against the TLS protocol are regularly
        discovered and may require updates or changes to the protocol to address
        them.</p></li></ul><p>It is important to stay up to date with the latest
        best practices for using TLS, including using strong cipher suites,
        implementing proper certificate validation, and regularly updating TLS
        implementations to address new vulnerabilities.</p>
      remediation: >-
        <p>Disable SSLv3.<br>Update the Webserver and SSL implementation to the
        latest version.<br>Disable weak ciphers (SEED, IDEA, RC2, RC4) on the
        server.<br>Configure the server to use a 2048-bit Diffie-Hellman
        group.<br>Disable cipher with 64-bit block size (3DES, DES,
        Blowfish).<br>Disable HTTP compression on the server or ignore if there
        is no secret in the page.<br>Do not use self signed certificates for
        internet facing services.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:L'
  priority: 4
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-BUSL-09: Upload of Malicious Files'
      vulnType: Pentest
      description: >-
        <p>Allowing users to upload files to a web server can pose significant
        risks, as it can provide an opportunity for attackers to upload and
        execute malicious code on the server. Some of the risks of allowing file
        uploads include:</p><ul><li><p>Malware distribution: Attackers can use
        file uploads to distribute malware, such as viruses, worms, or Trojans,
        to other users who download the infected files.</p></li><li><p>Website
        defacement: Attackers can upload malicious files that can deface the
        website, altering its appearance and possibly damaging its
        reputation.</p></li><li><p>Server compromise: Attackers can use file
        uploads to gain access to the server and execute remote code, allowing
        them to take full control of the system and potentially steal sensitive
        information.</p></li><li><p>Backdoor access: Attackers can use file
        uploads to create a backdoor on the server, allowing them to access the
        system even after they are removed.</p></li><li><p>Resource exhaustion:
        Attackers can upload files that consume a large amount of server
        resources, such as disk space or memory, causing the server to crash or
        become unavailable.</p></li></ul>
      remediation: >-
        <p>It is recommended performing a server-side check of the file
        extensions as well as the file type. However, checking the file
        extension itself is not a sufficient protection and in addition the
        magic bytes of the files uploaded should be checked.</p><p>Furthermore,
        uploaded files should be checked for malware using antivirus software.
        Possible embedded objects should be removed. Among other things,
        Microsoft Office documents, PDF files and images can contain embedded
        objects, which are not always detected by antivirus programs. These can
        be converted to safe files using file disinfection (for example, PDF to
        PDFA). Further recommendations can be found in the OWASP Guideline.</p>
      references:
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-BUSL-07: Application Logic Flaw - Passwords length visible'
      vulnType: Pentest
      description: >-
        <p>Hiding passwords in applications in general is a good idea.
        </p><p>Access to such sensitive info should be restricted as good as
        possible and revealing should ask you for confirmation. The length of
        the hiding characters should always be the same so that no conclusions
        can be drawn on the actual length of the password.</p>
      remediation: >-
        <p>Mask the password in a way that no conclusions regarding the length
        can be drawn.</p>
      references: []
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:L/A:N'
  priority: 2
  remediationComplexity: 3
  details:
    - locale: EN
      title: 'WSTG-SESS-03: Session Fixation'
      vulnType: Pentest
      description: >-
        <p>Session fixation is a vulnerability that allows an attacker to hijack
        a user's session on a web application. This type of attack involves
        manipulating the session ID (identifier) used to authenticate a user's
        session.</p><p>An attacker can exploit this vulnerability by providing a
        user with a valid session ID, often obtained by sending a crafted link
        or through a phishing attack. If the user logs in using the provided
        session ID, the attacker can then use the same session ID to gain access
        to the user's account or carry out actions on behalf of the
        user.</p><p>To prevent session fixation, web applications should ensure
        that a new session ID is generated for each user upon login, rather than
        accepting a pre-existing session ID. Additionally, the session ID should
        be regenerated upon certain events such as a change in user privilege or
        login status. This helps to ensure that the session ID cannot be fixed
        and is therefore more secure.</p>
      remediation: >-
        <p>To protect against session fixation, there are several best practices
        that web applications should follow:</p><ul><li><p>Regenerate Session
        IDs: Upon login, web applications should generate a new session ID for
        each user. This ensures that the session ID cannot be predetermined or
        fixed by an attacker. Additionally, the session ID should be regenerated
        upon certain events such as a change in user privilege or login
        status.</p></li><li><p>Use Strong Session IDs: Session IDs should be
        long, random, and complex. This makes them difficult for an attacker to
        guess or brute-force.</p></li><li><p>Use HTTPS: Web applications should
        use HTTPS to encrypt all communication between the client and server.
        This helps to prevent session hijacking and other types of attacks that
        can compromise the user's session.</p></li><li><p>Use HttpOnly and
        Secure Cookies: HttpOnly cookies cannot be accessed by client-side
        scripts, which helps to prevent cross-site scripting (XSS) attacks.
        Secure cookies can only be transmitted over HTTPS, which helps to
        prevent the interception of session IDs over unsecured
        connections.</p></li><li><p>Implement Session Timeout: Web applications
        should implement a session timeout to automatically log out users after
        a period of inactivity. This reduces the risk of session hijacking if
        the user leaves their session open on a public computer or if their
        device is lost or stolen.</p></li></ul><p>For ASP applications the OWASP
        foundation has some additional recommnedations on how this situation
        could be
        tackled:<br>https://owasp.org/www-community/controls/Session_Fixation_Protection</p>
      references:
        - 'https://owasp.org/www-community/attacks/Session_fixation'
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:N'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-SESS-01: Session-Token in URL'
      vulnType: Pentest
      description: >-
        <p>Session tokens are used to identify and authenticate a user's session
        on a website or application. They need to be secured to prevent
        unauthorized access to a user's account and sensitive information, such
        as personal data or financial information. If a session token is
        compromised, an attacker could hijack a user's session and gain access
        to their account, potentially causing significant harm to the user and
        the organization.</p><p>When session tokens are sent as part of the URL,
        they appear in the user's browser history and in log files on web
        servers or proxies. A compromise of the user's client might allow an
        attacker to get access to the session token via the history and take
        over the session if it has not already been invalidated.
        <br>Administrators may have access the session tokens of all users via
        the logs of proxies or web servers. <br>A compromised web server would
        allow an attacker to access all sessions or accounts.</p>
      remediation: >-
        <p>Session tokens should not be send as part of the URL. <br>Using HTTP
        cookies or hidden fields in forms submitted with POST parameters should
        be used as a safe way of transmitting session tokens. This measure
        ensures that the session tokens are not visible in the browser history
        or in log files.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-IDNT-04: User Enumeration'
      vulnType: Pentest
      description: >-
        <p>User enumeration is a technique used by attackers to discover valid
        usernames or email addresses associated with user accounts in a web
        application. This is typically done by submitting login requests with
        various usernames or email addresses and observing the response from the
        server.</p><p>The response from the server can indicate whether a
        username or email address is valid or not. For example, if an attacker
        submits a login request with an invalid username, the server may respond
        with a message indicating that the username is incorrect. On the other
        hand, if the attacker submits a login request with a valid username, the
        server may respond with a message indicating that the password is
        incorrect. By using this technique, attackers can gradually build a list
        of valid usernames or email addresses that can be used in further
        attacks, such as password guessing or targeted phishing
        attacks.</p><p>User enumeration is dangerous because it provides
        attackers with a list of valid usernames or email addresses that can be
        used to launch more targeted attacks against the web application or its
        users. For example, if an attacker knows that a particular email address
        is associated with a user account on the web application, they can
        launch a phishing attack that appears to come from the web application
        and requests the user to reset their password, giving the attacker
        access to the user's account.</p><p>Furthermore, user enumeration can
        also help attackers understand the structure of the web application and
        identify potential vulnerabilities. For instance, if the server responds
        differently to invalid and valid usernames, this may indicate that the
        application is vulnerable to a timing attack, where an attacker can use
        timing differences to determine valid usernames or
        passwords.</p><p>Overall, user enumeration is a dangerous vulnerability
        in web applications that can be exploited by attackers to launch
        targeted attacks and gain unauthorized access to sensitive data. It is
        important for web application developers to implement measures to
        prevent user enumeration, such as returning the same error message for
        all login failures or using CAPTCHA to prevent automated login
        attempts.</p>
      remediation: >-
        <p>Generate unspecific error messages that do not allow an attacker to
        draw conclusions if a user exists or not.</p>
      references: []
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:P/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-ATHN-06: Browser Cache holding Sensitive Data'
      vulnType: Pentest
      description: >-
        <p>Browser Cache Weaknesses refer to vulnerabilities in web applications
        that allow sensitive information, such as personal data, authentication
        tokens, or other confidential information, to be stored in the cache of
        the user's web browser. This information can remain in the cache even
        after the user logs out of the web application or closes the browser,
        and can be accessible to attackers who gain access to the user's
        computer or device.</p><p>These weaknesses are dangerous because they
        can enable attackers to obtain sensitive information without needing to
        directly attack the web application itself. Instead, attackers can
        exploit the weakness by accessing the user's cache, either through
        physical access to the user's device or by using malware or other
        techniques to gain remote access.</p><p>Once an attacker gains access to
        the cached information, they can use it for a variety of malicious
        purposes, such as identity theft, fraud, or unauthorized access to the
        web application or other systems that use the same authentication
        tokens.</p><p>To mitigate Browser Cache Weaknesses, developers should
        implement appropriate measures, such as using HTTPS connections, setting
        proper caching headers, and implementing mechanisms to clear the cache
        of sensitive information when the user logs out or closes the browser.
        Additionally, users should be educated on the risks of cached
        information and advised to clear their browser cache regularly.</p>
      observation: <p></p><p></p>
      remediation: >-
        <p>Implement a strict control of the browser's cache for sensitive data
        by using the Cache-Control headers.<br>More info can be found here:
        https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:N/A:N'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-APIT-01: Exposed GraphQL Playground'
      vulnType: Pentest
      description: >-
        <p>GraphQL Playground is a graphical user interface (GUI) that is used
        to test, explore, and interact with GraphQL APIs. It provides an
        interactive environment that allows developers to query a GraphQL API,
        see the schema, and test various queries and mutations.</p><p>GraphQL
        Playground is a useful tool for both frontend and backend developers, as
        it enables them to easily test and iterate on their GraphQL API without
        having to manually construct requests and parse responses. With GraphQL
        Playground, developers can quickly test out new queries and mutations,
        see the results in real-time, and experiment with different parameters
        and inputs.</p><p>Additionally, GraphQL Playground provides a variety of
        features that make working with GraphQL APIs easier, such as syntax
        highlighting, autocomplete, and documentation. It can also be used to
        view the GraphQL schema, explore the available types, and understand the
        structure of the API.</p><p>Overall, GraphQL Playground is a powerful
        tool that simplifies the process of developing and testing GraphQL APIs,
        and makes it easier for developers to build high-quality
        applications.<br><br>From an attacker's perspective all this info can
        come in useful, leaving them with a documentation what and how things
        are working.</p>
      remediation: >-
        <p>Restrict access to the GrapQL Playground, so only authorized users or
        systems can access it.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:L'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-BUSL-07: Application Misuse due to missing Throttling'
      vulnType: Pentest
      description: >-
        <p>Abusing an application by sending masses of requests can have several
        negative impacts on an application:<br>- It might get slow or even
        unresponsive<br>- It gets flooded with garbage data which makes it
        harder to use the app<br>- Flooding the database might kill backend
        systems or result in unexpected behavior<br>- ...<br></p>
      remediation: >-
        <p>Implement measures that reduce the amount of requests that can be
        made within a certain timeframe from a dedicated IP.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/10-Business_Logic_Testing/07-Test_Defenses_Against_Application_Misuse
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:L/I:L/A:N'
  priority: 1
  remediationComplexity: 2
  details:
    - locale: EN
      title: 'WSTG-SESS-06: Missing Session Termination'
      vulnType: Pentest
      description: >-
        <p>Session termination is an important part of the session lifecycle.
        Reducing to a minimum the lifetime of the session tokens decreases the
        likelihood of a successful session hijacking attack. This can be seen as
        a control against preventing other attacks like Cross Site Scripting and
        Cross Site Request Forgery. Such attacks have been known to rely on a
        user having an authenticated session present. Not having a secure
        session termination only increases the attack surface for any of these
        attacks.</p><p>A secure session termination requires at least the
        following components:</p><ul><li><p>Availability of user interface
        controls that allow the user to manually log out.</p></li><li><p>Session
        termination after a given amount of time without activity (session
        timeout).</p></li><li><p>Proper invalidation of server-side session
        state.</p></li></ul>
      remediation: >-
        <p>Sessions should get terminated automatically after a certain amount
        of time.<br>Sessions should also get terminated when a user uses the
        logout function of the application.<br>Make sure to find the right
        balance between user experience and security.<br><br></p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/06-Testing_for_Logout_Functionality
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:H/A:N'
  priority: 3
  remediationComplexity: 2
  details:
    - locale: EN
      title: 'WSTG-BUSL-07: Application Misuse Input Validation'
      vulnType: Pentest
      description: >-
        <p>Input validation is a crucial aspect of web security that involves
        verifying and sanitizing user input to prevent malicious or unintended
        actions. In web applications, user input can come from various sources,
        such as form submissions, URL parameters, and HTTP headers, and it is
        important to ensure that this input is valid and safe to use before
        processing it.</p><p>Input validation involves checking that the user
        input conforms to expected formats, types, and ranges, and rejecting any
        input that does not meet these criteria. This can help prevent a wide
        range of attacks, including SQL injection, cross-site scripting (XSS),
        and command injection, which can be used to steal sensitive data, modify
        application behavior, or take over the server.</p><p>In addition to
        validating input, it is also important to sanitize it by removing any
        potentially dangerous characters or sequences, such as HTML tags,
        JavaScript code, or shell commands. This can help prevent attacks that
        rely on injecting malicious code into the application, and can help
        ensure that the user input is used only for its intended
        purpose.</p><p>Overall, input validation and sanitization are essential
        techniques for ensuring web security, and should be applied consistently
        throughout the application to help prevent a wide range of attacks. By
        carefully validating and sanitizing user input, developers can help
        protect their users' data and prevent malicious actors from exploiting
        vulnerabilities in the application.</p>
      remediation: >-
        <p>Input validation should be implemented throughout the application.
        Special characters and things like URLs should be sanitized.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/10-Business_Logic_Testing/07-Test_Defenses_Against_Application_Misuse
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N'
  priority: 2
  remediationComplexity: 2
  details:
    - locale: EN
      title: 'WSTG-ATHN-03: Faulty Brute-Force Protection'
      vulnType: Pentest
      description: >-
        <p>Brute-force protection is a mechanism used to prevent attackers from
        guessing a user's login credentials through a trial-and-error process
        known as a brute-force attack. In this type of attack, an attacker tries
        multiple combinations of usernames and passwords until they find the
        correct one, allowing them to gain unauthorized access to the
        system.</p><p>To prevent brute-force attacks, login functionality may
        include various brute-force protection measures. One common method is to
        limit the number of login attempts within a specified time frame. For
        example, after three failed login attempts, the system may lock the
        account or impose a time delay before allowing additional login
        attempts. This prevents an attacker from trying an unlimited number of
        combinations in a short period.</p><p>Another method of brute-force
        protection is to implement a CAPTCHA (Completely Automated Public Turing
        test to tell Computers and Humans Apart) system, which requires the user
        to enter a visual or audio challenge-response test that only humans can
        solve. This helps to prevent automated bots from attempting multiple
        login attempts in quick succession.</p><p>In summary, brute-force
        protection is used to prevent attackers from guessing a user's login
        credentials through a trial-and-error process. This is typically
        achieved by limiting the number of login attempts within a specified
        time frame, or by implementing a CAPTCHA system to prevent automated
        attacks. These measures help to improve the security of login
        functionality and protect user accounts from unauthorized access.</p>
      remediation: >-
        <p>Implement a valuable protection mechanism against brute-force
        attempts.<br>Detailed info can be found in the description section of
        this finding.<br>In this case check why the implemented protection is
        not working as designed.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism
        - 'https://owasp.org/www-community/attacks/Brute_force_attack'
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  priority: 1
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-ERRH-01: Detailed Stack Traces'
      vulnType: Pentest
      description: >-
        <p>In a web app, a stack trace is a report that shows the sequence of
        function calls that led to an error or exception being thrown. It helps
        developers diagnose and fix issues in the code by identifying the
        specific code paths that caused the error.</p><p>However, if a detailed
        stack trace is visible to an attacker, it can reveal sensitive
        information about the application, including the underlying
        architecture, technologies, and potential vulnerabilities. An attacker
        can use this information to exploit the application, gain unauthorized
        access, or launch other types of attacks. Therefore, it is crucial to
        protect the stack trace from being accessible to unauthorized users and
        to minimize the amount of sensitive information it reveals.</p>
      remediation: >-
        <p>Stack traces should be disabled to not reveal any sensitive info that
        might be useful to an attacker.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N'
  priority: 1
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-CONF-12: Content Security Header Configuration'
      vulnType: Pentest
      description: >-
        <p>The CSP (Content Security Policy) header is a security feature used
        in web applications to specify which sources of content, such as
        scripts, styles, images, and other resources, are allowed to be loaded
        and executed by a web page. It helps protect against cross-site
        scripting (XSS) attacks and data injection attacks by controlling the
        origins from which content can be loaded and executed in a web page's
        context. CSP enhances web security by reducing the risk of unauthorized
        or malicious code execution, making it more challenging for attackers to
        inject and execute harmful scripts on a website.</p>
      remediation: >-
        <p>Configure the CSP header according to best practices to increase
        security. <br>For further info refer to the OWASP cheat sheet in the
        resource section.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:N'
  priority: 3
  remediationComplexity: 2
  details:
    - locale: EN
      title: 'WSTG-ATHZ-04: Insecure Direct Object Reference (IDOR)'
      vulnType: Pentest
      description: >-
        <p>IDOR, or Insecure Direct Object Reference, is a web security
        vulnerability that occurs when an application provides direct access to
        objects based on user-supplied input, such as file names, URLs, or
        database keys. In an IDOR vulnerability, an attacker can manipulate
        these references to access unauthorized data or perform actions they
        shouldn't have access to. IDOR arises when an application lacks proper
        access controls and relies solely on user input to identify and access
        objects or resources. An attacker can exploit IDOR by tampering with
        parameters (e.g., changing a URL parameter or modifying hidden fields in
        a form) to access or manipulate data or actions that they are not
        authorized to perform. IDOR vulnerabilities can lead to unauthorized
        data exposure, data manipulation, account takeover, or even the
        modification or deletion of sensitive records.</p><p>In summary, IDOR is
        a security flaw that occurs when an application doesn't adequately
        protect against direct manipulation of object references, potentially
        allowing attackers to access or manipulate data or actions they should
        not have access to. It's important for developers to implement robust
        access controls and validate user input to mitigate IDOR
        vulnerabilities.</p>
      remediation: >-
        <p>To prevent IDOR vulnerabilities, developers should implement proper
        access controls, validate user input, and use authentication and
        authorization mechanisms to ensure that users can only access the data
        and actions they are authorized for.<br>Further details can be found in
        the reference section.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References
        - 'https://portswigger.net/web-security/access-control/idor'
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet.html
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N'
  priority: 1
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-CONF-05: Administrative Interfaces'
      vulnType: Pentest
      description: >-
        <p>Exposing administrative interfaces of a web application to the public
        increases the risk of unauthorized access and potential security
        breaches. Keeping these interfaces restricted to the corporate network
        or dedicated management machines helps mitigate these risks. This
        approach:</p><ul><li><p><strong>Reduces Attack Surface:</strong>
        Limiting access to administrative interfaces minimizes the exposure of
        critical components to the external environment, lowering the chances of
        exploitation.</p></li><li><p><strong>Enhances Confidentiality:</strong>
        Internal access ensures that sensitive information, configurations, and
        functionalities are not easily accessible to unauthorized external
        entities.</p></li><li><p><strong>Mitigates Unauthorized Access:</strong>
        External exposure increases the likelihood of unauthorized users
        attempting to access administrative functions. Restricting access to
        internal networks adds an extra layer of
        protection.</p></li><li><p><strong>Protects Against Brute Force
        Attacks:</strong> Limiting access to specific networks reduces the
        attack surface for brute force attacks on administrative
        credentials.</p></li><li><p><strong>Preserves Availability:</strong> By
        preventing potential attacks from the public internet, the web
        application's administrative functionalities are less susceptible to
        denial-of-service attempts or other
        disruptions.</p></li><li><p><strong>Aligns with Least Privilege
        Principle:</strong> Granting access only to trusted networks adheres to
        the principle of least privilege, ensuring that only necessary entities
        have access to sensitive functionalities.</p></li></ul><p>In summary,
        restricting access to administrative interfaces helps maintain a more
        secure and controlled environment, safeguarding critical aspects of the
        web application from external threats.</p>
      remediation: >-
        <p>Restrict access to administrative functions to only allow access from
        specific IPs and / or networks.<br></p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:N'
  priority: 3
  remediationComplexity: 2
  details:
    - locale: EN
      title: 'WSTG-CLNT-13: CSV Injection'
      description: >-
        <p>CSV injection, also known as formula injection, occurs when a cell in
        a CSV (Comma-Separated Values) file contains data that, when interpreted
        by a spreadsheet program, is treated as a formula rather than plain
        text. This can be dangerous due to the following
        reasons:</p><ul><li><p><strong>Arbitrary Code Execution:</strong> An
        attacker can embed malicious formulas or commands into the CSV file.
        When opened by a spreadsheet program, these formulas may execute
        arbitrary code on the user's system.</p></li><li><p><strong>Spreadsheet
        Program Vulnerabilities:</strong> Certain spreadsheet programs may have
        vulnerabilities that can be exploited through CSV injection. Attackers
        leverage these vulnerabilities to execute malicious
        actions.</p></li><li><p><strong>Data Manipulation:</strong> CSV
        injection can lead to unauthorized manipulation of data within the
        spreadsheet. This could result in data loss, corruption, or unauthorized
        access to sensitive information.</p></li><li><p><strong>Phishing
        Attacks:</strong> Malicious formulas can be crafted to create phishing
        scenarios, tricking users into revealing sensitive information or
        performing unintended actions.</p></li><li><p><strong>Cross-Site
        Scripting (XSS):</strong> In web applications that process CSV uploads,
        CSV injection may lead to XSS attacks if the injected data is reflected
        back to users without proper validation and sanitization.</p></li></ul>
      remediation: >-
        <ul><li><p><strong>Avoid Executable Content:</strong> Ensure that
        user-input data in CSV files is treated as plain text and not as
        executable content.</p></li><li><p><strong>Sanitize Input:</strong>
        Implement strict input validation and sanitization mechanisms to prevent
        the inclusion of formulas or malicious
        content.</p></li><li><p><strong>Use Cell Formatting:</strong> Apply
        proper cell formatting to explicitly define data types, preventing the
        automatic execution of formulas.</p></li><li><p><strong>Educate
        Users:</strong> Raise awareness among users about the risks of opening
        CSV files from untrusted sources and the importance of validating file
        contents.</p></li></ul>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/13-Testing_for_Cross_Site_Script_Inclusion
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N'
  details:
    - locale: EN
      title: 'WSTG-CRYP-04: Weak Hashing'
      vulnType: Pentest
      description: >-
        <p>Hashing is a one-way process of converting input data (of any size)
        into a fixed-length string of characters, which is typically a hash
        value or digest. The output, known as the hash, should be unique to the
        input data, making it practically impossible to reverse the
        process.</p><p>Hash functions are commonly used to verify the integrity
        of data. Even a small change in the input data should result in a
        substantially different hash value. This property helps detect tampering
        or corruption.</p><p>Hashing is widely employed to secure passwords.
        Storing hashed passwords instead of plaintext enhances security.
        However, using weak hashing algorithms or short hash lengths makes it
        easier for attackers to perform brute-force or rainbow table
        attacks.</p><p><strong>Security Risks of Weak
        Hashing:</strong></p><ul><li><p><strong>Brute-Force Attacks:</strong>
        Weak hash algorithms can be more easily broken using brute-force
        attacks, where attackers systematically try all possible inputs to find
        a match.</p></li><li><p><strong>Collision Vulnerabilities:</strong> Weak
        hashing may lead to collisions, where different inputs produce the same
        hash output. This compromises the uniqueness of the hash and introduces
        security vulnerabilities.</p></li></ul><p>Many security standards and
        regulations mandate the use of strong and cryptographically secure
        hashing algorithms to protect sensitive data. Weak hashing practices may
        result in non-compliance and increased susceptibility to unauthorized
        access.</p><p>In summary, using weak hashing algorithms poses security
        risks by making it easier for attackers to compromise password security,
        undermine data integrity, and violate privacy. Strong and
        well-established hashing practices are essential for robust data
        protection</p>
      observation: <p>Scoring based on situation and used hashing alg</p>
      remediation: >-
        <ul><li><p><strong>Use Cryptographically Secure Hash Functions:</strong>
        Choose well-established and cryptographically secure hash functions
        designed for security, such as SHA-256 or SHA-3. These algorithms are
        rigorously tested and widely accepted in the security
        community.</p></li><li><p><strong>Keyed Hashing for Passwords:</strong>
        For password hashing, use a key derivation function (KDF) designed for
        this purpose, such as bcrypt, Argon2, or scrypt. These KDFs include
        additional parameters like salt and iteration count, enhancing the
        security of password storage.</p></li><li><p><strong>Salt the
        Hash:</strong> Always use a unique salt for each piece of sensitive data
        before hashing. Salting ensures that even identical inputs produce
        different hash outputs, preventing attackers from using precomputed
        tables (rainbow tables) for attacks.</p></li><li><p><strong>Consider
        Using Pepper:</strong> Pepper is a secret key added to the data before
        hashing, providing an additional layer of security. Unlike salt, pepper
        is kept secret and can be implemented as a configuration parameter
        separate from the hashed data.</p></li><li><p><strong>Stay Informed and
        Update:</strong> Regularly review industry best practices and updates
        related to hashing algorithms. Security evolves, and algorithms that
        were once secure may become vulnerable over time. Stay informed about
        the latest developments and be prepared to update hashing practices
        accordingly.</p></li><li><p><strong>Implement Strong Access
        Controls:</strong> Limit access to the hashed data, ensuring that only
        authorized individuals or systems can retrieve or manipulate sensitive
        information. This adds an extra layer of protection even if the hash is
        somehow exposed.</p></li><li><p><strong>Encrypt Sensitive Data Before
        Hashing (if applicable):</strong> Depending on the context, consider
        encrypting sensitive data before hashing it. Encryption adds an extra
        layer of protection, especially in scenarios where confidentiality is a
        primary concern.</p></li></ul>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption
        - >-
          https://owasp.org/www-community/vulnerabilities/Using_a_broken_or_risky_cryptographic_algorithm
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:L/I:N/A:N'
  priority: 1
  remediationComplexity: 1
  details:
    - locale: EN
      title: 'WSTG-INFO-09: Outdated Software'
      vulnType: Pentest
      description: >-
        <p>Used soft- and firmware as well as operating systems should always be
        kept on the most current versions.</p><p>Using outdated versions poses
        several direct and indirect security risks like:<br>- Security
        vulnerabilities: outdated software may have unpatched security holes
        that can be exploited by attackers.<br>- Compatibility issues: new
        hardware or software may not be compatible with old systems.<br>-
        Performance degradation: outdated software may run slower, become less
        responsive, or crash more often.<br>- Lack of features: newer software
        may have additional features or improvements that are not available in
        older versions.<br>- Compliance problems: outdated software may not meet
        industry regulations or standards.<br><br>Staying up to date is a
        mandatory requirement to a matured security culture and should be part
        of the patch management process.</p>
      observation: <p>Criticality based on what the outdated software allowed us to do.</p>
      remediation: >-
        <p>Check if any of the mentioned software components can be upgraded /
        updated and if important security updates are missing.<br>Implement a
        patch management strategy and process that ensures that all your systems
        are up to date and that updates are applied timely according to their
        criticality.<br>Apply workarounds when no patches are available when
        tackling critical flaws.</p>
      references: []
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: Shared platform usage
      vulnType: Pentest
      description: >-
        <p>Running services with shared resources carries the risk that if one
        of the apps is vulnerable or exploitable, all others are at risk as
        well. More services most likely means that more users have access to the
        system, but these user don't necessary have the rights to access the
        other solutions running on that system. However, the compromise of the
        user of another service, might give an attacker a first foothold on the
        shared system, which later might result in a full compromise of all
        hosted services.</p><p>For critical service like e.g. a Certificate
        Authority, Domain Services, Backup solutions, it is best practice to
        have them running on dedicated systems.</p>
      remediation: <p>Migrate the affected service to a dedicated platform.</p>
      references: []
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'
  priority: 3
  remediationComplexity: 3
  details:
    - locale: EN
      title: Missing Network Seperation
      vulnType: Pentest
      description: >-
        <p>Using network segmentation and separation together offers an
        additional level of security to systems and data. <br>A robust ‘defense
        in depth’ network enhances security by physically and virtually ensuring
        data flow and connectivity within networks is for known and approved
        connections only. It controls who can access which resource from
        where.</p><ul><li><p>Network segmentation involves breaking down an
        organization's network into smaller networks, using DMZ’s and other
        logical segmentation (like Production/Test) to logically segment
        processing activity.</p></li><li><p>Network separation means using
        different access controls to allow connections across these smaller
        networks. This can be by employing different technologies and filters to
        further control data flow.</p></li></ul><p>These measures make it harder
        for an attacker to move laterally and access unwanted and critical
        resources, once he gained an initial foothold in the internal
        network.<br><br>Access to critical infrastructure like Domain
        Controllers, Certificate Authorities, Backup solutions and alike, should
        be secured as much as possible.</p>
      remediation: >-
        <p>Systems that can be accessed from the Internet should always be
        placed in a demilitarized zone (DMZ), as these systems are exposed to an
        increased risk.</p><p>It is recommended to divide the systems into
        different TIER levels, in which the sensitivity and criticality of the
        servers is differentiated. Direct access by clients to services is
        enabled in a specific TIER level, the other TIER levels can only be
        accessed from the next lower level and are separated in each
        case.</p><p>The bare minimum that should be implemented is a network
        separation between the client and server networks. This will better
        protect the server network from automated attacks by executed malware
        (for example, ransomware) on clients, as well as from network
        attacks.</p>
      references:
        - >-
          https://learn.microsoft.com/en-us/security/compass/privileged-access-access-model
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:A/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: EN
      title: SMB Signing not activated
      vulnType: Vulnerability Scan
      description: >-
        <p>SMB (Server Message Block) signing is a security feature that is used
        to digitally sign SMB packets to ensure their authenticity and
        integrity. <br>This helps to prevent man-in-the-middle (MitM) attacks,
        where an attacker intercepts and modifies SMB packets in transit, by
        allowing the recipient to verify that the packets were sent by an
        authenticated sender and have not been tampered with. <br>The most
        widely known attack that abuses the lack of SMB signing is
        relaying.<br>SMB signing can be enabled or disabled on both the client
        and server side and is supported on Windows Server and Windows client
        operating systems. It is typically used in enterprise environments to
        secure file sharing and other types of data transfer over the
        network.</p>
      observation: <p>CME Screenshot or Nessus output</p>
      remediation: >-
        <p>SMB signing should be enabled and enforced on both the client and
        server side.</p>
      references:
        - 'https://luemmelsec.github.io/Relaying-101/'
        - >-
          https://techcommunity.microsoft.com/t5/storage-at-microsoft/configure-smb-signing-with-confidence/ba-p/2418102
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N'
  priority: 1
  remediationComplexity: 1
  details:
    - locale: EN
      title: Usage of untrusted Certificates
      vulnType: Vulnerability Scan
      description: >-
        <p>The reason that a certificate is considered untrustworthy can have
        different causes. In the following scenarios, a certificate might be
        detected as not valid:</p><ul><li><p>The server's certificate does not
        have a valid certificate chain to a trusted root certificate authority.
        This happens if the certificate was issued by an unrecognized
        certificate authority, if the certificate is a self-signed certificate,
        or if an intermediate certificate is missing from the certificate
        chain.</p></li><li><p>The commonName (CN) parameter of the certificate
        does not match the domain name of the server. This might happen if the
        IP is used instead for the DNS name.</p></li><li><p>The signature of the
        certificate could not be verified.</p></li><li><p>A certificate is
        invalid if the server's certificate has expired, i.e. during
        verification the certificate's valid date range does not match the
        current date.</p></li></ul><p>These issues make it difficult for users
        to verify the certificate and increase the risk of Man-in-the-Middle
        attacks.</p>
      remediation: >-
        <p>Create and apply trusted certificates.<br>Internet facing systems
        should have a certificate signed by a 3rd party trusted public CA.</p>
      references: []
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  priority: 2
  remediationComplexity: 2
  details:
    - locale: EN
      title: Unauthenticated User Enumeration over SMB - CVE-2000-1200
      vulnType: Vulnerability Scan
      description: >-
        <p>Windows NT allows remote attackers to list all users in a domain by
        obtaining the domain SID with the <em>LsaQueryInformationPolicy</em>
        policy function via a null session and using the SID to list the
        users.</p>
      remediation: >-
        <p>Contact the vendor to see if appropriate settings, updates or fixes
        are available.</p>
      references:
        - 'https://nvd.nist.gov/vuln/detail/CVE-2000-1200'
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'
  priority: 4
  remediationComplexity: 1
  details:
    - locale: EN
      title: Extremely weak Admin Credentials
      vulnType: Pentest
      description: >-
        <p>Accounts with critical privileges like Domain Admins, Firewall
        Admins, Backup Admins and alike should always be handled with care and
        secured accordingly.<br>People using these accounts need to be aware of
        the potential risks that arise when their accounts get
        compromised:</p><ul><li><p>Data breaches and theft of sensitive
        information: If a hacker gains access to an administrative account, they
        may be able to view, steal or manipulate confidential data stored on the
        system, such as personal information, financial records, or trade
        secrets.</p></li><li><p>System damage and disruption of services: The
        attacker may use the administrative privileges to cause harm to the
        system, for example, by deleting critical files, modifying system
        settings, or shutting down servers. This could result in significant
        downtime and disruption of services for the organization and its
        customers.</p></li><li><p>Spread of malware and further compromise: The
        attacker may use the compromised administrative account to install
        malware, such as viruses, Trojans, or ransomware, which can spread to
        other systems and devices on the network, leading to additional security
        breaches and compromise. This could result in significant damage to the
        organization's reputation and financial loss.</p></li></ul><p>In this
        case the password complexity of these administrative accounts must be
        rated as extremely weak. <br>The password is either guessable or if an
        attacker gets a hold on hashed material easily recoverable.</p>
      remediation: >-
        <p>Privileged accounts should have extremely strong passwords. They
        should be at least 20 characters long, and comply to complexity with
        uppercase, lowercase, numbers and special characters. The passwords
        should be randomly generated, no words! Password blacklisting can be
        issued to help here.<br>Password reusage should be avoided at all
        costs.<br>Personal holding higher privileges needs to be trained and
        made aware of the possible risks. <br>Saving credentials in a Web
        Browser should also be avoided.<br>Additionally these accounts should be
        hardened via Multi Factor Authentication where possible.</p>
      references: []
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'
  priority: 3
  remediationComplexity: 3
  details:
    - locale: EN
      title: Deficient Roles and Authorization Concept
      vulnType: Pentest
      description: >-
        <p>A Roles and Authorization Concept purpose is to restrict access to
        sensitive resources as much as possible.<br>This can be achieved through
        appropriate measures like e.g.:</p><ul><li><p>Limiting the number of
        users that have access to the resource</p></li><li><p>Limiting the
        access rights to the absolute minimum each user needs - concept of least
        privilege</p></li><li><p>Limiting the sources which have access - e.g.
        from where can a valid user access an
        application</p></li><li><p>Defining a password policy and MFA
        requirements</p></li></ul><p></p>
      remediation: >-
        <p>Implement a sufficient and secure Roles and Authorization
        concept.<br>Review the access rights to the systems.<br>Change
        passwords.<br>Follow best practices like the TIER model from
        Microsoft.</p>
      references:
        - >-
          https://learn.microsoft.com/en-us/security/privileged-access-workstations/privileged-access-access-model
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:N'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: EN
      title: Outdated Software
      vulnType: Pentest
      description: >-
        <p>Used soft- and firmware as well as operating systems should always be
        kept to the most current versions.</p><p>Using outdated versions poses
        several direct and indirect security risks like:<br>- Security
        vulnerabilities: outdated software may have unpatched security holes
        that can be exploited by attackers.<br>- Compatibility issues: new
        hardware or software may not be compatible with old systems.<br>-
        Performance degradation: outdated software may run slower, become less
        responsive, or crash more often.<br>- Lack of features: newer software
        may have additional features or improvements that are not available in
        older versions.<br>- Compliance problems: outdated software may not meet
        industry regulations or standards.<br><br>Staying up to date is a
        mandatory requirement to a matured security culture and should be part
        of the patch management process.<br></p>
      observation: >-
        <p><br>Criticality depending on what could be achieved due to systems
        and software being outdated.</p>
      remediation: >-
        <p>Check if any of the mentioned software components can be upgraded /
        updated and if important security updates are missing.<br>Implement a
        patch management strategy and process that ensures that all your systems
        are up to date and that updates are applied timely according to their
        criticality.<br>Apply workarounds when no patches are available when
        tackling critical flaws.</p>
      references:
        - ''
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H'
  priority: 3
  remediationComplexity: 2
  details:
    - locale: EN
      title: Password Requirements
      vulnType: Pentest
      description: >-
        <p>Using weak passwords has several security implications and is posing
        one of the biggest risks in the IT security threat landscape with the
        following impacts:<br></p><ul><li><p>Easy to guess: Bad passwords are
        often easily predictable, making it easier for hackers to guess or crack
        them.</p></li><li><p>Dictionary attacks: Poor passwords are susceptible
        to dictionary attacks, where a hacker uses a list of commonly used
        passwords to gain access to an account.</p></li><li><p>Brute force
        attacks: In a brute force attack, a hacker tries every possible
        combination of characters to crack a password, making a weak password
        easier to crack.</p></li><li><p>Reuse: People often reuse the same
        password across multiple accounts, putting all their information at risk
        if a single password is compromised.</p></li><li><p>...</p><p></p><p>If
        the passwords used by the users are not complex enough they can easily
        be guessed or the clear text passwords can trivially be recovered if an
        attacker gets access to their hashed values.</p></li></ul>
      remediation: >-
        <p>The following settings and measures can help to harden access to
        users and their credentials:</p><ul><li><p>Implementing multi-factor
        authentication.</p></li><li><p>Implementing a secure domain wide
        password policy in case of Active Directory. At least 12 characters for
        low privileged and 14 characters for high privileged accounts. For
        service accounts at least 20 characters should be
        used.</p></li><li><p>Using a password manager. Best in combination with
        the possibility for fine granular rights management and MFA
        authentication.</p></li><li><p>Password blacklisting. Ban passwords with
        the company name, seasons, passwords on leaked lists
        etc.</p></li><li><p>Implementing password policies based on the access
        rights of the accounts affected.</p></li><li><p>Regular password
        audits.</p></li><li><p>User awareness campaigns. Especially security
        related trainings for technical staff.</p><p></p></li></ul><p>Best
        practices for the Domain Password
        Policy:</p><ul><li><p>ComplexityEnabled =
        True</p></li><li><p>LockoutDuration &gt;= 15
        Minutes</p></li><li><p>LockoutObservationWindow &gt;= 15
        Minutes</p></li><li><p>LockoutThreshold &lt;= 10
        Minutes</p></li><li><p>MinPasswordLength &gt;=
        12</p></li><li><p>ReversibleEncryptionEnabled =
        False</p></li></ul><p><br></p>
      references: []
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L'
  priority: 2
  remediationComplexity: 2
  details:
    - locale: EN
      title: Management Service Misconfiguration
      vulnType: Pentest
      description: >-
        <p>Management services like SSH, RDP, Telnet, WinRM etc. are meant for
        administrative purposes of systems and applications.<br>Access to those
        services should be restricted as much as possible to follow the
        defense-in-depth approach as well as the least privilege
        principle.<br>Even if not currently affected by a directly exploitable
        vulnerability, they at least pose the risk of being accessed with stolen
        / impersonated identities.</p>
      remediation: >-
        <p>Access to management services and their according ports should be
        restricted by means of network separation or (local) firewalls. <br>Most
        of these services offer hardened authentication methods and settings
        like certificate based authentication for SSH or restricted host polices
        for access to WinRM [1][2].<br>Systems ideally reside in a dedicated
        management VLAN to which only the needed systems and people can connect
        to.</p>
      references:
        - >-
          [1]
          https://learn.microsoft.com/en-us/windows/win32/winrm/authentication-for-remote-connections
        - >-
          [2]
          https://learn.microsoft.com/en-us/windows/win32/winrm/installation-and-configuration-for-windows-remote-management
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N'
  priority: 2
  remediationComplexity: 2
  details:
    - locale: EN
      title: Servers with Internet Access
      vulnType: Pentest
      description: >-
        <p>Not restricting internet access to systems poses several potential
        security risks like:</p><ul><li><p>Malware can be downloaded directly
        onto the system's disk</p></li><li><p>Malware can be downloaded directly
        into the system's memory</p></li><li><p>The system can be connected and
        controlled via an internet hosted Command &amp; Control server or a
        Botnet</p></li></ul><p>Especially servers that don't necessarily need
        access to the internet should not be given these possibilities.<br></p>
      remediation: >-
        <p>If really needed, the internet traffic should be routed through a
        firewall or proxy that analyzes the dataflow and connections made.
        <br>It should be able to block access and isolate the host in case
        something suspicious pops up.</p>
      references: []
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:L'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: EN
      title: General Observations Work Ethics
      vulnType: Pentest
      description: >-
        <p>Sensitive files should always be handled with care. Cleaning up when
        files are no longer used is an essential part of work ethics.</p><p>For
        attackers, valuable information residing inside such files comes in
        handy and can drastically expose further services and systems, allowing
        for privilege escalation or lateral movement.</p>
      observation: >-
        <p>Critically dependant on the info found and according
        possibilities</p>
      remediation: >-
        <p>Technical staff should be trained and forced to clean up after their
        work is done.<br>Leaving sensitive info exposed on systems is bad
        practice and should be avoided at all costs.</p>
      references: []
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N'
  priority: 3
  remediationComplexity: 2
  details:
    - locale: EN
      title: General Observations in regard to Alerts
      vulnType: Pentest
      description: >-
        <p>Critical systems and events should be monitored closely to be able to
        react on a shorthand if something bad happens.</p><p>Having visibility
        inside the whole network is a crucial fundamental of a matured
        IT-Security strategy.</p>
      observation: <p></p><p></p>
      remediation: >-
        <p>Logs and events need to be monitored closely. If critical alerts show
        up, according investigations and countermeasures need to take place.</p>
      references: []
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'
  priority: 4
  remediationComplexity: 3
  details:
    - locale: EN
      title: MSSQL Features xp_*** available to low privileged Users
      vulnType: Pentest
      description: >-
        <p><em>xp_cmdshell</em>, <em>xp_dirtree</em> and<em> xp_fileexist</em>
        are MSSQL native extended stored procedures. While <em>xp_cmdshell</em>
        allows for executing shell commands, the latter ones are aimed at file
        and directory operations.</p><p><em>xp_cmdshel</em>l: This extended
        stored procedure enables the execution of operating system commands from
        within SQL Server. If accessible to low privilege users, it poses
        significant security risks. Exploiting <em>xp_cmdshel</em>l, an attacker
        can execute arbitrary commands on the server's operating system with the
        permissions of the SQL Server service account. This can lead to
        unauthorized actions, such as accessing or modifying sensitive files,
        compromising the system, or even gaining full control over the
        server.</p><p><em>xp_dirtree </em>and <em>xp_filexist</em> can be
        executed by members of the Public role by default in SQL Server
        2000-2014. The public role is essentially a group that includes all
        database users by default. Both can be used to force the SQL Server
        service account to authenticate to a remote attacker.&nbsp; The service
        account password hash can then be captured + cracked or relayed to gain
        unauthorized access to systems. This also means they can be used to
        escalate a lower privileged user to sysadmin when a machine or managed
        account isn't being used.&nbsp;That's because the SQL Server service
        account is a member of the sysadmin role in SQL Server 2000-2014, by
        default. Also, if the service accounts happen to be local administrators
        on the servers themselves, an attacker can takeover those as well.</p>
      remediation: >-
        <p>There are several points to take into consideration
        here:</p><ul><li><p>It must URGENTLY be avoided to reuse service
        accounts. If really needed, there should be a dedicated service account
        per SQL server. If possible the computeraccount should be used.
        Alternateively managed service accounts per instance.</p></li><li><p>It
        must URGENTLY be avoided that (MSSQL) service accounts also hold local
        admin rights on servers. This needs to be checked on ALL (not only the
        ones listed) servers.</p></li><li><p>ALL (not only the ones listed)
        instances where the xp_ procedures are available to low privileged users
        have to be identified and the permissions need to be adjusted according
        to the principle of least privilege.</p></li><li><p>ALL (not only the
        ones listed) instances where ALL domain users have access to have to be
        identified and evaluated if those broadly applied rights are really
        needed. Adjustment has to be made according to the principle of least
        privilege.</p></li><li><p>SMB Signing MUST be enabled on ALL servers,
        not only MSSQL servers. Best would be to do it domain wide, also on
        clients.</p></li><li><p>Robust AV MUST be in place that prevents attacks
        via malware.</p></li><li><p>Monitoring for critical events MUST be in
        place and reactions and countermeasures MUST take place
        immediately.</p></li><li><p>TIERing MUST be implemented. Access to
        servers is to be applied according to the principle of least
        privilege.</p></li></ul>
      references:
        - 'https://www.offsec-journey.com/post/attacking-ms-sql-servers'
        - >-
          https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/abusing-ad-mssql
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H'
  priority: 4
  remediationComplexity: 3
  details:
    - locale: EN
      title: Shared Service Accounts
      vulnType: Pentest
      description: >-
        <p>Using shared service accounts can pose security risks due to the
        following reasons:</p><ul><li><p>Lack of Accountability: When multiple
        services or applications use the same service account, it becomes
        difficult to determine which service or application performed a
        particular action. This lack of accountability can hinder incident
        response and make it challenging to identify the source of unauthorized
        or malicious activities.</p></li><li><p>Overprivileged Access: Shared
        service accounts often have elevated privileges to perform various tasks
        across different systems or applications. If an attacker gains access to
        a shared service account, they inherit all the privileges associated
        with it, potentially granting them widespread access to sensitive data
        or critical systems. The principle of least privilege is compromised
        when using shared service accounts, as multiple services may have more
        access than they actually require.</p></li><li><p>Password Management
        Challenges: Shared service accounts typically have long lifetimes and
        are seldom changed or updated, which increases the risk of password
        compromise. If the password for a shared service account is compromised,
        all the services using that account are also compromised. Additionally,
        updating the password for a shared service account can be challenging
        due to its wide usage, leading to delayed or neglected password
        changes.</p></li><li><p>Difficulty in Monitoring and Auditing:
        Monitoring and auditing become more challenging when multiple services
        share the same account. It becomes difficult to attribute specific
        actions to individual services or track activities associated with the
        account. This can impede security investigations, compliance audits, and
        the ability to detect and respond to security incidents
        effectively.</p></li><li><p>Dependency Risks: When multiple services
        rely on a shared service account, any disruption or compromise of the
        account can have a cascading effect on all the dependent services. A
        single security incident or misconfiguration can result in widespread
        service disruptions or unauthorized access to critical
        systems.</p></li></ul>
      remediation: >-
        <p>To mitigate these risks, it is generally recommended to use
        individual service accounts with unique credentials for each service or
        application. This allows for better accountability, enables fine-grained
        access control, simplifies auditing and monitoring, and reduces the
        impact of a compromised account to a single service or application.</p>
      references: []
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: SPN Remnants
      vulnType: Pentest
      description: >-
        <p>SPN stands for Service Principal Name, and it is a concept in a
        Windows environment, particularly within Active Directory (AD). An SPN
        is a unique identifier for a service instance that runs under a specific
        user account. It is used by clients to identify and authenticate the
        service they are trying to access.</p><p>Here are some key points about
        SPNs in a Windows environment/AD:</p><ul><li><p>Purpose: The primary
        purpose of an SPN is to associate a service with a specific account in
        order to facilitate mutual authentication. When a client wants to
        communicate with a service, it can use the SPN to locate and
        authenticate the service.</p></li><li><p>Format: An SPN is composed of
        two parts: the service class and the service name, separated by a
        forward slash (/). The service class identifies the type of service,
        such as "HTTP" for a web service or "MSSQLSvc" for a SQL Server service.
        The service name is the fully qualified domain name (FQDN) or the
        NetBIOS name of the server hosting the service.</p></li><li><p>Unique
        Identifiers: Each service instance running under a specific user account
        should have a unique SPN associated with it. This allows clients to
        differentiate between different instances of the same service running on
        different servers.</p></li><li><p>Kerberos Authentication: SPNs are
        primarily used with Kerberos authentication in a Windows environment.
        When a client needs to authenticate to a service using Kerberos, it
        requests a ticket-granting ticket (TGT) from the Key Distribution Center
        (KDC) using the SPN associated with the service. The SPN helps the KDC
        locate the appropriate service account to authenticate the client
        against.</p></li><li><p>Registering SPNs: Service accounts can register
        their SPNs automatically or manually. Automatic registration occurs when
        services start up and utilize the Network Service or Local System
        accounts. Manual registration is required when using custom service
        accounts.</p></li><li><p>Duplicate SPNs: Each SPN must be unique within
        a domain to avoid conflicts. Duplicate SPNs can cause authentication
        failures or unpredictable behavior. It's important to ensure that
        different services or instances use distinct
        SPNs.</p></li><li><p>Delegation: SPNs also play a role in delegation
        scenarios, where a service needs to forward a client's credentials to
        another service on behalf of the client. Service accounts require proper
        configuration, including the appropriate SPNs and delegation settings,
        to enable secure delegation.</p></li></ul><p>In summary, SPNs in a
        Windows environment/AD are unique identifiers used to associate services
        with specific user accounts for authentication purposes, primarily in
        the context of Kerberos authentication. They help clients locate and
        authenticate the services they want to access while ensuring secure and
        accurate identification of the service instances.<br><br>In some
        circumstances, mainly when SPNs get registered manually with the help of
        the <a target="_blank" rel="noopener noreferrer nofollow"
        href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731241(v=ws.11)">setspn</a>
        tool, or when the machine is not able to unregister SPNs for several
        reasons while being decommissioned, you might have dead SPNs in your
        environment.<br><br>These dead SPNs can still be used to conduct
        Kerberoasting attacks. When SPNs are tied to use accounts rather than to
        computer objects, it might be the case that the password is weak. With
        the Kerberoasting attack the cleartext credentials can then be
        retrieved.</p>
      observation: >-
        <p>Criticality depends on what is possible.<br>If we can kerberoast
        accounts where no actual service is running but which still have an SPN
        and are admin or sth, this would be high/critical.<br>If they have
        strong passwords and nothing can be done, medium to low.</p>
      remediation: >-
        <p>Remove ALL SPNs that are pointing to systems that no longer exist.
        This has do be done for ALL domains.<br>This can either be done by
        directly changing the <em>servicePrincipalName</em> value of the AD
        objects or by using the <em>setspn</em> command:</p><pre><code>setspn -d
        &lt;SPN&gt; &lt;accountname&gt;  

        setspn -d MSSQL/SQLSERVER1 sqlservice </code></pre>
      references:
        - 'https://luemmelsec.github.io/Kerberoasting-VS-AS-REP-Roasting/'
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'
  details:
    - locale: EN
      title: SAP Gateway ACL Misconfiguration
      vulnType: Vulnerability Scan
      description: >-
        <p>A remote code execution vulnerability exists in the remote SAP
        Gateway as a result of allowing non-SAP applications to communicate
        with, and potentially run OS commands on SAP applications. An
        unauthenticated attacker can run the arbitrary commands on remote server
        to gain access to the system or to read/write sensitive information.</p>
      remediation: >-
        <ul><li><p>Secure your Gateway ACL pointed by profile parameter
        gw/sec_info with help of SAP note 1408081</p></li><li><p>Filter out
        access from untrusted sources to the Gateway (port
        tcp/33NN)</p></li></ul>
      references:
        - 'https://github.com/chipik/SAP_GW_RCE_exploit'
        - 'https://github.com/gelim/sap_ms'
        - >-
          https://blogs.sap.com/2019/05/02/10kblaze-exploit-can-potentially-impact-most-sap-customers/
        - 'https://www.tenable.com/plugins/nessus/126003'
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H'
  priority: 4
  remediationComplexity: 1
  details:
    - locale: EN
      title: Password Reusage for Highly Privileged Accounts
      vulnType: Pentest
      description: >-
        <p>Password reuse refers to the practice of using the same password for
        multiple accounts or systems. This is considered a bad security practice
        because it significantly increases the risk of unauthorized access and
        security breaches.</p><p>When password reuse occurs, several security
        vulnerabilities arise:</p><ul><li><p><strong>Single Point of
        Failure:</strong> If a password is compromised for one account, all
        accounts using the same password become vulnerable. This means that an
        attacker who gains access to one account could potentially gain access
        to other accounts, including highly privileged
        ones.</p></li><li><p><strong>Amplified Impact:</strong> If an attacker
        gains access to a highly privileged account with broad system access
        (like an administrator account), they could potentially wreak havoc
        across the entire system or network.</p></li><li><p><strong>Limited
        Password Strength:</strong> People tend to use simpler passwords when
        they have to remember them for multiple accounts. This increases the
        chances of a password being easily guessed or cracked using brute-force
        attacks.</p></li><li><p><strong>Difficulty in Tracking and
        Management:</strong> Keeping track of multiple passwords can lead to
        poor password management practices, like writing passwords down or
        storing them in unsecured digital formats, further compromising
        security.</p></li><li><p><strong>Delayed Detection:</strong> Detecting
        unauthorized access becomes more challenging since a compromised account
        might not raise suspicion if the account holder also uses the same
        password for legitimate access.</p></li><li><p><strong>Social
        Engineering Exploits:</strong> If an attacker discovers a password from
        one account, they might use that information to impersonate the
        legitimate user and attempt to gain access to other accounts by
        exploiting trust relationships.</p></li></ul><p>For highly privileged
        accounts like administrators, the risks are even more severe. These
        accounts have access to critical systems, sensitive data, and the
        ability to make system-wide changes. If such an account is compromised
        due to password reuse, the potential damage and data breaches could be
        catastrophic.</p>
      remediation: >-
        <p>In no case should passwords be reused.</p><p>Choose unique and strong
        passwords for each user.</p><p>For highly privileged accounts use MFA
        where possible.</p>
      references:
        - ''
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: SCCM Usage of Network Access Account for Deployment
      vulnType: Pentest
      description: >-
        <p>The Network Access Account (NAA) is a manually assigned (domain)
        account which can be utilized by SCCM clients. This account enables
        content downloads from an SCCM Distribution Point (DP) in cases where
        the client cannot use its own computer account for DP access. Typically,
        an SCCM client uses its computer account for server communication,
        except for scenarios like non-domain-joined clients. <br>SCCM
        administrators often create NAAs for such cases. However, according to
        Microsoft [1] this is not best practice and should be avoided where
        possible. Instead Enhanced HTTP should be used.</p>
      remediation: >-
        <p>Transition to Enhanced HTTP.</p><p>After transitioning away from
        NAAs, disable or remove the NAA accounts in Active Directory.</p>
      references:
        - >-
          [1]
          https://learn.microsoft.com/en-us/mem/configmgr/core/plan-design/hierarchy/enhanced-http
        - >-
          [2]
          https://learn.microsoft.com/en-us/mem/configmgr/core/plan-design/hierarchy/accounts#network-access-account
        - >-
          https://www.securesystems.de/blog/active-directory-spotlight-attacking-the-microsoft-configuration-manager/
        - >-
          https://posts.specterops.io/the-phantom-credentials-of-sccm-why-the-naa-wont-die-332ac7aa1ab9
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:L'
  priority: 3
  remediationComplexity: 2
  details:
    - locale: EN
      title: SCCM Client Push Installation
      vulnType: Pentest
      description: >-
        <p>SCCM (System Center Configuration Manager) client push installation
        is a method used to deploy the SCCM client software to computers in a
        networked environment. Instead of manually installing the SCCM client on
        each individual computer, client push installation automates the
        process.</p><p>Here's how it
        works:</p><ul><li><p><strong>Configuration</strong>: Administrators
        configure the SCCM server with the necessary settings for client push
        installation. This includes specifying credentials and authentication
        methods.</p></li><li><p><strong>Discovery</strong>: SCCM actively scans
        the network to identify computers that need the client software
        installed. It can also use predefined discovery methods to identify
        potential target
        computers.</p></li><li><p><strong>Installation</strong>: Once target
        computers are identified, the SCCM server attempts to remotely install
        the SCCM client software on those computers using the configured
        authentication credentials.</p></li><li><p><strong>Status
        Reporting</strong>: The SCCM server monitors the installation process
        and reports back on whether the installation was successful or
        encountered any issues.</p></li><li><p><strong>Client
        Communication</strong>: After successful installation, the SCCM client
        on each computer establishes communication with the SCCM server. This
        allows the server to manage the computer, deploy software, updates, and
        perform other configuration tasks.</p></li></ul><p>Client push
        installation simplifies the task of deploying the SCCM client to a large
        number of computers across the network, ensuring that they are properly
        configured and ready to be managed through SCCM.</p><p>The step
        <em>Installation</em> can be abused by an adversary who either
        compromised a client that already is configured inside SCCM or from any
        system if he gained access to credentials of a member of the <em>Full
        Administrators</em> role inside SCCM. Starting from there coercion of
        all push install accounts can be triggered and from the fetched
        information they can either try to crack the passwords or relay the
        credentials.<br>The prerequisites are:</p><ul><li><p>Automatic site
        assignment for a boundary group, automatic site-wide client push
        installation, and “Allow connection fallback to NTLM” are
        enabled.</p></li><li><p>The site server must be able to reach the
        capture/relay server via SMB on port 445 or if WebClient is enabled, via
        HTTP on any port.</p></li><li><p>HTTPS Only with PKI certificates must
        not be required for client authentication to management points for this
        attack to be executed as a low-privileged user.</p></li></ul>
      remediation: >-
        <p>Microsoft states that the least secure way to deploy the SCCM client
        is client push [1].</p><p>If it is the only option you can stick to the
        following recommendations:</p><ul><li><p>Disable the <em>Allow
        connection fallback to NTLM</em> setting</p></li><li><p>Use long and
        complex passwords for all push accounts.</p></li><li><p>Use software
        update-based client installation [2] instead of automatic site-wide
        client push installation</p></li><li><p>Lock down client push accounts
        by denying local logon and marking them as “account is sensitive and
        cannot be delegated”.</p></li><li><p>Do not use the client push
        installation method for Domain Controllers or sensitive
        servers/workstations. Push accounts should not be added to the local
        administrator’s group on these systems. Manual installation of the
        client is preferred. Ideally, critical assets should not be managed by
        the same SCCM at all (or leverage a separate system entirely dedicated
        to “Tier 0” assets).</p></li><li><p>Evaluate the use of NTLM across the
        enterprise. At a minimum, the authentication level for Domain
        Controllers should be set to “Send NTLMv2 response only\refuse LM &amp;
        NTLM”, and efforts should be made toward fully eliminating NTLM
        traffic.</p></li><li><p>Starting in version 1806, Microsoft implemented
        the checkbox to “allow connection fallback to NTLM”. They recommend
        unchecking this setting to enforce Kerberos authentication. Note that
        clients must be in a trusted Active Directory to use this feature.
        Careful testing may be required to ensure there is no service disruption
        when disabling this setting.</p></li><li><p>Never use members of highly
        privileged groups (e.g., Domain Admins) for client push installation.
        Instead, create an account for each site specifically for this purpose
        that doesn’t have interactive logon rights and add it to the local
        Administrators group. Monitor for suspicious use of this
        account.</p></li><li><p>Require SMB signing, LDAP signing/channel
        binding, and MSSQL extended protection for authentication to prevent
        relayed credentials from being used to against other
        systems.</p></li><li><p>Requiring PKI certificates for SCCM client
        authentication also prevents this attack from being conducted as a
        low-privileged user, even if NTLM authentication is allowed.
        </p></li></ul>
      references:
        - >-
          [1]
          https://learn.microsoft.com/en-us/mem/configmgr/core/clients/deploy/plan/security-and-privacy-for-clients#use-the-most-secure-client-installation-methods-that-are-practical-for-your-environment
        - >-
          [2]
          https://docs.microsoft.com/en-us/mem/configmgr/core/clients/deploy/deploy-clients-to-windows-computers
        - >-
          https://posts.specterops.io/coercing-ntlm-authentication-from-sccm-e6e23ea8260a
        - >-
          https://posts.specterops.io/relaying-ntlm-authentication-from-sccm-clients-7dccb8f92867
        - >-
          https://posts.specterops.io/sccm-site-takeover-via-automatic-client-push-installation-f567ec80d5b1
        - 'https://github.com/Mayyhem/SharpSCCM/wiki/invoke#invoke-client-push'
        - >-
          https://www.hub.trimarcsecurity.com/post/push-comes-to-shove-exploring-the-attack-surface-of-sccm-client-push-accounts
      customFields: []
  category: Internal Pentest
- cvssv3: 'CVSS:3.1/AV:P/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'
  priority: 3
  remediationComplexity: 2
  details:
    - locale: EN
      title: MIFARE Classic - Authentication by UID only
      vulnType: Pentest
      description: >-
        <p>Each NFC tag has a unique ID (UID). This UID can be read by everyone
        and is not protected in the case of MIFARE Classic tags.<br>Systems can
        be configured to only check the UID as an authentication feature, where
        no validation against data in the tag's encrypted sectors is taking
        place.<br><br>All an attacker would need to do is “touch” an ID tag with
        e.g., a Flipper Zero or other according hardware to fetch the UID. Think
        of standing in an elevator, the keycard on a lanyard, and just walking
        by your target. After successfully fetching the UID, it would be
        possible to impersonate that user granting access to all his resources.
        <br>This might be doors, gates, hotel rooms, a skiing-pass, student ID
        or a printing solution. <br><br>Another way of attacking such weak
        implementations is a brute force attack against the UID. This might
        obviously take a long time, but nevertheless poses a risk.</p>
      observation: <p></p><p></p>
      remediation: >-
        <p>One point to address is user awareness. If an attacker cannot “touch”
        the ID card, it cannot be read. This, however, interferes with the
        corporate policy to always wear your badge visibly to everyone. So at
        least outside of the campus, badges should not be worn visibly.<br>The
        other thing is to check whether the solution is capable of not only
        relying on the UID, but rather data that is stored in one of the secured
        sectors. In this course you need to make sure to use safe technology
        like <em>MIFARE DESFire</em>, as for example the MIFARE Classic
        technology is broken and full of security flaws.</p>
      references: []
      customFields: []
  category: Physical Security
- cvssv3: 'CVSS:3.1/AV:P/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'
  priority: 3
  remediationComplexity: 3
  details:
    - locale: EN
      title: Usage of MIFARE Classic technology
      vulnType: Pentest
      description: >-
        <p>In 2008 the proprietary encryption algorithm <em>CRYPTO-1</em>,
        developed by NXP, was completely reverse engineered by the Radboud
        University Nijmegen [1]. <br>In 2009, the MIFARE Classic Offline Cracker
        (MFOC) was released, wrapped around the so called nested attack which
        makes it possible to recover all sector encryption keys when only one
        key is known. <br>Following was the <em>MFCUK-MiFare Classic Universal
        toolkit</em>, which allowed to retrieve a valid key, even if no key was
        known at all.<br>The answer to these flaws was the release of the
        <em>MIFARE Classic EV1</em> tags as well as the MIFARE DESFire tags by
        NXP, which had several security improvements over the original
        implementation.<br>However, in 2015 the <em>hardnested attack [2]</em>
        was published, which allowed to even crack these hardened tags open by a
        side-channel attack.</p><p>As soon as an attacker gets a hold on a
        vulnerable tag, he can recover all keys, access all sectors, tamper with
        the content, and clone the tag.<br>Attack scenarios might include a lost
        tag or stolen tag, a cloned tag or even an inside
        attacker.</p><p>Another way of abuse involves just having the UID of a
        card (read in a second with a Flipper Zero or Proxmark3) and emulate it
        to collect encrypted nonces [3] from a valid reader to later be able to
        offline crack the encryption keys. In some cases this is not sufficient
        and an attacker needs to sniff traffic from a legit card and reader to
        successfully collect the nonces.</p>
      observation: <p></p><p></p>
      remediation: >-
        <p>According to NXP <em>MIFARE Classic</em> cards are no longer
        considered save [4] and should not be used anymore, when it comes to
        managing access rights or other security relevant implementations. The
        most modern successor is <em>MIFARE DESFire</em>. </p>
      references:
        - >-
          [1]
          https://www.researchgate.net/publication/1915327_A_practical_attack_on_the_MIFARE_classic
        - >-
          [2]
          http://www.cs.ru.nl/R.Verdult/Ciphertext-only_Cryptanalysis_on_Hardened_Mifare_Classic_Cards-CCS_2015.pdf
        - '[3] https://github.com/equipter/mfkey32v2'
        - >-
          [4]
          https://www.mifare.net/en/products/chip-card-ics/mifare-classic/security-statement-on-crypto1-implementations/
      customFields: []
  category: Physical Security
- cvssv3: 'CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: Powershell Configuration
      vulnType: Pentest
      description: >-
        <p>PowerShell is a task automation and configuration management
        framework developed by Microsoft, consisting of a command-line shell and
        associated scripting language built on the .NET framework. It was
        designed to provide a more efficient and effective way for Windows
        administrators to manage and automate various system administration
        tasks, including managing the Windows operating system and other
        Microsoft products such as Exchange, SharePoint, and SQL
        Server.<br><br>PowerShell is often used by adversaries because it
        provides them with a built-in versatile tool for executing malicious
        scripts and commands, bypassing security controls, accessing sensitive
        information, and hiding their actions, making it an attractive tool for
        malicious actors.<br><br>There are several steps that can be taken to
        harden the way PowerShell can act on a system or in specific user
        context:<br></p><ul><li><p>Restrict the Language Mode</p><p>The
        PowerShell language mode determines the syntax, language elements, and
        behavior of PowerShell scripts, with the two main modes being "Full" and
        "Constrained" that can be used to restrict the capabilities of
        PowerShell scripts for security and administrative
        purposes.</p></li><li><p>Set an Execution Policy</p><p>The PowerShell
        execution policy is a security feature that determines what types of
        PowerShell scripts can run on a system and is used to help protect
        against malicious scripts by restricting the execution of scripts from
        unknown or untrusted sources.</p></li><li><p>Uninstall old PowerShell
        versions</p><p>PowerShell version 5 and above has important built-in
        security features that make it safer to use in enterprise environments.
        For example, PowerShell v5 logs every script that is run, making it
        easier to trace the execution of malware. <br>These security features
        are not present in PowerShell v2.0, making it less secure, which at the
        same time makes it a lucrative alternative for
        attackers.</p></li></ul><p></p>
      observation: >-
        <p>Language Mode Failure = Medium<br>Execution Policy =
        Low<br>PowerShell v2 = High</p>
      remediation: >-
        <p>Set the Language Mode to <em>Restricted</em>. This can be activated
        locally:</p><pre><code>[Environment]::SetEnvironmentVariable(‘__PSLockdownPolicy‘,
        ‘4’, ‘Machine‘)</code></pre><p>Or via Group Policies
        Objects:</p><p><em>Computer Configuration\Preferences\Windows
        Settings\Environment</em><br></p><img class="custom-image"
        src="63e504b947c5530011586cfc" alt="Setting PowerShell Language Mode via
        GPO"><p></p><p>Set the Execution Policy to <em>AllSigned</em>. This can
        be done via GPO here: <em>Computer Configuration &gt; Policies &gt;
        Administrative Templates &gt; Windows Components &gt; Windows
        PowerShell</em><br></p><img class="custom-image"
        src="63e505c447c5530011586cfd" alt="Setting Execution Policy for
        PowerShell via GPO"><p><br><br>Deactivate PowerShell v2.0 via GPO or
        remove it locally via the "Windows Features".</p>
      references:
        - 'https://adsecurity.org/?p=2604'
        - >-
          https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.3
        - >-
          https://learn.microsoft.com/en-us/powershell/scripting/learn/security-features?view=powershell-7.3
        - >-
          https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.3
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:P/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N'
  priority: 2
  remediationComplexity: 2
  details:
    - locale: EN
      title: DMA Attacks
      description: >-
        <p>DMA (Direct Memory Access) attacks are a class of security threats
        that exploit the DMA feature present in many computer systems. DMA
        allows hardware devices, such as network cards or USB controllers, to
        access the system's memory directly without involving the CPU, enabling
        faster data transfers.</p><p>In a DMA attack, an attacker gains physical
        or remote access to a target system and leverages DMA capabilities to
        directly read from or write to the system's memory. This access allows
        the attacker to bypass traditional security measures, such as operating
        system permissions or encryption, and potentially gain unauthorized
        access to sensitive data or compromise the system's
        integrity.</p><p>There are two main types of DMA
        attacks:</p><ol><li><p>DMA Read Attacks: In this type of attack, the
        attacker gains access to the system's memory and can read sensitive
        information stored in the memory, including encryption keys, passwords,
        or confidential data. The attacker can then use this information for
        unauthorized purposes.</p></li><li><p>DMA Write Attacks: In a DMA write
        attack, the attacker injects malicious data or code into the system's
        memory, potentially overwriting critical data or modifying the system's
        behavior. This can lead to unauthorized privilege escalation, injection
        of malware, or modification of system settings.</p></li></ol><p>DMA
        attacks can be executed through various means, including physical access
        to the target system, compromised peripheral devices, or exploiting
        vulnerabilities in system firmware or drivers. Some examples of DMA
        attack vectors include FireWire, Thunderbolt, PCI Express, or PCMCIA
        interfaces.</p>
      remediation: >-
        <p>Apply according counter measures via GPO (please also refer to the
        references):<br><br>Firewire: <br><code>Computer Configuration &gt;
        Administrative Templates &gt; System &gt; Device Installation &gt;
        Device Installation Restrictions &gt; Prevent installation of devices
        using drivers that match these device setup classes</code></p><p>Add the
        following entries:</p><table><tbody><tr><th colspan="1"
        rowspan="1"><p><strong>GUID</strong></p></th></tr><tr><td colspan="1"
        rowspan="1"><p><strong>{7ebefbc0-3200-11d2-b4c2-00a0C9697d07}</strong></p></td></tr><tr><td
        colspan="1"
        rowspan="1"><p><strong>{c06ff265-ae09-48f0-812c-16753d7cba83}</strong></p></td></tr><tr><td
        colspan="1"
        rowspan="1"><p><strong>{d48179be-ec20-11d1-b6b8-00c04fa372a7}</strong></p></td></tr><tr><td
        colspan="1"
        rowspan="1"><p><strong>{6bdd1fc1-810f-11d0-bec7-08002be2092f}</strong></p></td></tr></tbody></table><p></p><p>PCIe:<br><code>Computer
        Configuration &gt; Administrative Templates &gt; Windows Components &gt;
        BitLocker Drive Encryption &gt; Disable new DMA devices when this
        computer is locked</code></p><p>General protection against DMA
        attacks:</p><p><code>Computer Configuration &gt; Administrative
        Templates &gt; System &gt; Device Guard &gt; Turn on Virtualization
        Based Security &gt; Secure Boot with DMA</code></p>
      references:
        - >-
          https://www.synacktiv.com/en/publications/practical-dma-attack-on-windows-10.html
        - 'https://www.scip.ch/?labs.20211209'
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:N'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: LSA Protection Configuration
      vulnType: Pentest
      description: >-
        <p>LSA Protection, also known as RunAsPPL (Protected Process Light), is
        a security feature introduced in Windows 10 and Windows Server 2016. It
        is designed to protect critical operating system processes by running
        them with an elevated level of protection.</p><p>LSA (Local Security
        Authority) is a subsystem in Windows responsible for security-related
        operations. LSA Protection ensures that certain critical LSA processes
        are isolated and run in a restricted mode called "Protected Process
        Light." This mode provides additional security measures to prevent
        unauthorized access or tampering of these processes.</p><p>Protected
        Process Light (PPL) restricts the interactions and privileges of a
        process, making it more resistant to attacks and unauthorized
        modifications. PPL processes are given a higher integrity level, making
        it difficult for lower-privileged processes or malware to tamper with
        them. This helps protect critical system functions and sensitive
        data.</p><p>By running LSA processes as PPL, Windows enhances the
        overall security of the operating system and helps mitigate various
        attack vectors that target system-level processes.</p>
      observation: <p><br><br></p>
      remediation: >-
        <p>Activate LSA Protection by setting the following registry
        key:<br><code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\LSA
        RunAsPPL= 1</code></p>
      references:
        - 'https://itm4n.github.io/lsass-runasppl/'
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:P/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: Disk Encryption Configuration
      vulnType: Pentest
      description: >-
        <p>Disk encryption is a security measure used to protect the data stored
        on a storage device, such as a hard drive or solid-state drive (SSD). It
        ensures that the data remains unreadable and inaccessible to
        unauthorized users even if the device is lost, stolen, or accessed
        without proper authorization.</p><p>The primary purpose of disk
        encryption is to encrypt the entire contents of the disk, including the
        operating system, applications, and user data. It prevents unauthorized
        individuals from accessing or extracting sensitive information from the
        disk by encrypting it using a cryptographic algorithm.</p><p>One method
        to enhance the security of disk encryption is through preboot
        authentication (PBA). PBA adds an additional layer of protection by
        requiring users to provide authentication credentials before the
        operating system boots up. This means that even if someone gains
        physical access to the device, they cannot bypass the encryption without
        providing the correct authentication.</p><p>Preboot authentication
        typically involves a separate login screen or interface that prompts
        users to enter a password or other authentication factors, such as a PIN
        or biometric data (e.g., fingerprint or facial recognition). Only upon
        successful authentication will the device proceed to boot up the
        operating system and decrypt the disk.</p><p>By combining disk
        encryption with preboot authentication, the data on the encrypted disk
        remains secure from unauthorized access. Even if an attacker manages to
        steal or gain physical access to the device, they would need to bypass
        the preboot authentication to gain access to the encrypted
        data.</p><p>It is important to choose strong authentication credentials
        and regularly update them to maintain the security of the disk
        encryption. Additionally, ensuring the device's firmware and software
        are up to date helps protect against known vulnerabilities and ensures
        the effectiveness of the encryption and authentication mechanisms.</p>
      remediation: >-
        <p>If the encryption is meant to protect against sophisticated attacks,
        the TPM only mode for BitLocker is not sufficient. One of the
        alternative solutions with an additional PIN or USB device should be
        taken into consideration[2]. Another idea would be to make use of 3rd
        party applications that will give the user a SSO feeling that integrate
        with BitLocker.</p>
      references:
        - '[1] https://luemmelsec.github.io/Go-away-BitLocker-you-are-drunk/'
        - >-
          [2]
          https://learn.microsoft.com/en-us/windows/security/information-protection/bitlocker/bitlocker-countermeasures
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:P/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: Removal Media Control Settings
      vulnType: Pentest
      description: >-
        <p>Removable media control is a security feature that helps protect
        against various threats related to the use of removable storage devices
        such as USB flash drives, external hard drives, and optical media.
        Here's a brief description of why removable media control is considered
        a security feature and the threats it can help
        mitigate:</p><ol><li><p>Unauthorized data access: Preventing
        unauthorized access to sensitive data on removable
        devices.</p></li><li><p>Malware introduction and spread: Reducing the
        risk of malware infections and the spread of malicious code through
        removable media.</p></li><li><p>"Bad USB" or "Bad Ethernet" devices that
        disguise as legitimate USB devices emulating HIDs like a keyboard or a
        network adapter to execute code or sniff
        credentials.</p></li><li><p>Data loss prevention: Implementing measures
        to prevent accidental data loss or unauthorized copying of sensitive
        information.</p></li><li><p>Unauthorized software or applications:
        Restricting the introduction of unauthorized software onto corporate
        devices through removable media.</p></li><li><p>Compliance and
        regulatory requirements: Enforcing policies to meet industry regulations
        and demonstrate data security compliance.</p></li></ol><p><a
        target="_blank" rel="noopener noreferrer nofollow"
        href="http://compliance.By">By</a> implementing removable media control
        as a security feature, organizations can mitigate the risks associated
        with unauthorized data access, malware infections, data loss,
        unauthorized software execution, and non-compliance with regulations. It
        provides an additional layer of protection to safeguard sensitive
        information and maintain the integrity and security of systems and
        networks.</p>
      remediation: >-
        <p>Implement according countermeasures that prevent attacks over
        removeable media.<br>This can for example be done via
        GPOs:</p><ol><li><p>Device installation restrictions: Group Policy can
        be used to restrict the installation of USB devices on computers. It
        allows administrators to define policies that prevent the installation
        of unrecognized or unauthorized USB devices, thereby mitigating the risk
        of "Bad USB" attacks.</p></li><li><p>USB port disabling: Group Policy
        enables administrators to disable specific USB ports on computers. By
        selectively disabling USB ports, organizations can limit the risk of
        unauthorized USB devices being connected and prevent potential "Bad USB"
        attacks.</p></li><li><p>Windows Defender Application Control: Windows
        Defender Application Control (WDAC) is a security feature available in
        Windows 10 Enterprise and Windows Server editions. It uses Group Policy
        to define policies that allow only trusted applications to run on a
        system. By enforcing strict application control policies, organizations
        can reduce the risk of "Bad USB" attacks by blocking the execution of
        unauthorized or malicious code from USB
        devices.</p></li></ol><p></p><p><br></p>
      references: []
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:L/A:N'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: EN
      title: Credential Guard Configuration
      vulnType: Pentest
      description: >-
        <p>Credential Guard is a security feature introduced in Windows 10 and
        Windows Server 2016 that helps protect against credential theft and
        unauthorized access to sensitive credentials on a Windows system. It is
        specifically designed to defend against Pass-the-Hash (PtH) and
        Pass-the-Ticket (PtT) attacks.</p><p>Credential theft attacks typically
        target the authentication process by stealing or manipulating user
        credentials, such as usernames and passwords, stored in memory or the
        Local Security Authority (LSA) process. These attacks allow adversaries
        to gain unauthorized access to systems, networks, or sensitive
        resources.</p><p>Credential Guard leverages virtualization-based
        security to isolate and protect these credentials. It utilizes
        virtualization technology, such as Hyper-V, to create a separate
        isolated environment called the "security boundary." Within this
        security boundary, sensitive credentials are stored and processed,
        effectively isolating them from the rest of the system, including the
        operating system and user processes.</p><p>By isolating credentials in a
        protected environment, Credential Guard helps prevent unauthorized
        access or tampering by malicious actors. It ensures that even if an
        attacker gains access to the operating system or compromises the system
        at a lower level, they cannot access or extract sensitive credentials
        stored within Credential Guard.</p><p>Key features and benefits of
        Credential Guard include:</p><ol><li><p>Protection against Pass-the-Hash
        and Pass-the-Ticket attacks.</p></li><li><p>Isolation of credentials in
        a separate security boundary.</p></li><li><p>Use of virtualization-based
        security technology for enhanced
        protection.</p></li><li><p>Compatibility with existing authentication
        methods, such as Kerberos and NTLM.</p></li><li><p>Integration with
        other security technologies, like Windows Hello for Business and Windows
        Defender Credential Guard.</p></li></ol><p>Overall, Credential Guard
        strengthens the security posture of Windows systems by safeguarding
        sensitive credentials and mitigating the risk of credential theft
        attacks.</p>
      remediation: >-
        <p>Follow the steps provided by Microsoft [1] to enabled Credential
        Guard.</p>
      references:
        - >-
          [1]
          https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/credential-guard-manage
        - 'https://blog.nviso.eu/2018/01/09/windows-credential-guard-mimikatz/'
        - >-
          https://blog.netwrix.com/2023/02/06/using-windows-defender-credential-guard-to-protect-privileged-credentials/
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N'
  priority: 2
  remediationComplexity: 3
  details:
    - locale: EN
      title: Applocker Configuration
      vulnType: Pentest
      description: >-
        <p>AppLocker is a security feature introduced in Windows 7 and Windows
        Server 2008 R2, and it is available in subsequent versions of Windows.
        It is designed to help organizations enforce application control
        policies by allowing or blocking the execution of specified applications
        and scripts.</p><p>AppLocker enables administrators to define rules that
        determine which applications are allowed to run on a system. These rules
        can be based on various criteria, including file path, file hash,
        publisher, or digital signature. By configuring these rules,
        administrators have granular control over the types of applications that
        can be executed on managed systems.</p><p>Key features and benefits of
        AppLocker include:</p><ol><li><p>Application Whitelisting:
        Administrators can create rules that specify which applications are
        allowed to run, effectively whitelisting approved applications. This
        helps prevent unauthorized or malicious software from running on the
        system.</p></li><li><p>Rule Enforcement: AppLocker enforces the
        configured rules at the operating system level, ensuring that only
        approved applications are allowed to execute. It helps protect against
        unauthorized software installations and execution
        attempts.</p></li><li><p>Flexible Rule Criteria: Rules can be created
        based on various criteria, including file attributes, publisher
        information, digital signatures, and path locations. This flexibility
        allows organizations to define specific policies tailored to their
        needs.</p></li><li><p>Centralized Management: AppLocker can be managed
        through Group Policy, providing a centralized management interface for
        creating, deploying, and maintaining application control policies across
        multiple systems.</p></li><li><p>Auditing and Reporting: AppLocker
        provides auditing capabilities to track and monitor application
        execution attempts. Detailed logs and reports help administrators
        identify and investigate unauthorized or blocked application
        activities.</p></li></ol><p>AppLocker is primarily aimed at
        organizations that require strict control over the software running on
        their systems, such as enterprises, government agencies, and regulated
        industries. It helps enhance security by preventing the execution of
        unauthorized or potentially malicious applications, reducing the attack
        surface and mitigating the risk of malware infections and unauthorized
        software usage.</p>
      remediation: >-
        <p>Where applicable use WDAC (see [1]).</p><p>If not feasible, implement
        Applocker to further harden the system against attacks.</p><p>Follow the
        guidelines referenced from Microsoft [2].</p>
      references:
        - >-
          [1]
          https://learn.microsoft.com/de-de/windows/security/threat-protection/windows-defender-application-control/wdac-and-applocker-overview
        - >-
          [2]
          https://learn.microsoft.com/de-de/windows/security/threat-protection/windows-defender-application-control/applocker/applocker-overview
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: EN
      title: DHCPv6 Settings
      vulnType: Pentest
      description: >-
        <p>In DHCPv6, one of the potential attack vectors is related to the
        DHCPv6 offer process, specifically when configuring DNS servers. Here's
        an explanation of DHCPv6 attacks related to setting DNS servers via DHCP
        offers:</p><ol><li><p>Rogue DHCPv6 Server: An attacker can set up a
        rogue DHCPv6 server on the network to offer malicious DNS server
        addresses in the DHCPv6 response. When clients request DHCPv6
        configuration, they may receive a DHCPv6 offer from the rogue server
        with DNS server addresses that the attacker controls. This can redirect
        the client's DNS queries to malicious DNS servers under the attacker's
        control.</p></li><li><p>DNS Spoofing: By providing malicious DNS server
        addresses in the DHCPv6 offer, an attacker can perform DNS spoofing.
        When clients use the offered DNS servers to resolve domain names, the
        attacker's DNS servers respond with false or malicious information. This
        can lead to users being redirected to malicious websites, phishing
        attacks, or manipulation of DNS responses to gain unauthorized access to
        sensitive information.</p></li><li><p>MITM Attacks: DHCPv6 DNS server
        configuration can also be exploited for Man-in-the-Middle (MitM)
        attacks. An attacker may intercept the DHCPv6 offer and modify the DNS
        server addresses to point to their own server. This enables the attacker
        to intercept DNS queries and responses, allowing them to monitor or
        manipulate the communication between the client and legitimate DNS
        servers.</p></li></ol><p>Normally companies have a DHCPv4 server running
        but not one for DHCPv6. Modern Windows versions ship with IPv6 enabled,
        which takes precedence over IPv4. Hence out of the box these systems are
        likely to be vulnerable to the before mentioned attacks.</p>
      remediation: >-
        <p>To mitigate the described attacks, the following measures can be
        implemented:</p><p>Disable IPv6: If IPv6 is not required, it is
        recommended to disable the IPv6 interface on client systems. This can be
        done through network adapter settings or registry
        configurations.</p><p>Prefer IPv4 over IPv6: Network configurations can
        be adjusted to prioritize IPv4 connectivity over IPv6. This can be done
        by modifying network interface settings or network routing
        configurations. In these cases the valid IPv4 configuration for e.g. DNS
        will "overrule" the rouge IPv6 DNS setting.</p><p>Exercise caution in
        disabling IPv6 on Servers: Microsoft advises against disabling IPv6 in
        server environments, as it may cause disruptions to critical
        functionalities such as Exchange or Domain Controllers. Careful
        consideration should be given before disabling IPv6 on
        servers.</p><p>Configure IPS/IDS Rules: Intrusion Prevention Systems
        (IPS) or Intrusion Detection Systems (IDS) can be configured with
        additional rules specifically designed to detect and mitigate DHCPv6
        attacks. These rules should be regularly updated to address emerging
        threats.</p><p>Use Encrypted Connections: To prevent man-in-the-middle
        attacks, it is recommended to utilize encrypted connections wherever
        possible. This includes using secure protocols such as HTTPS for web
        communications and implementing VPNs (Virtual Private Networks) for
        secure remote access.</p><p>Specify Static Gateway and DNS Server: If
        IPv6 is necessary, it is advisable to manually configure and specify the
        gateway and DNS server addresses statically. This reduces the risk of
        DNS-related attacks by eliminating the reliance on DHCPv6 for network
        configuration.</p>
      references:
        - >-
          https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/
        - >-
          https://www.blackhillsinfosec.com/mitm6-strikes-again-the-dark-side-of-ipv6/
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:P/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N'
  priority: 1
  remediationComplexity: 1
  details:
    - locale: EN
      title: BIOS Hardening
      vulnType: Pentest
      description: >-
        <p>The Basic Input/Output System (BIOS) is a firmware that is embedded
        in a computer's motherboard. It is responsible for initializing hardware
        components during the boot process and providing a basic set of
        instructions for the operating system to interact with the
        hardware.</p><p>Securing the BIOS with a password is important for
        several reasons:</p><ol><li><p>Unauthorized access prevention: Setting a
        BIOS password adds an extra layer of security to your computer system.
        It prevents unauthorized users from accessing and modifying critical
        BIOS settings, such as boot order, hardware configurations, and security
        features.</p></li><li><p>Protection against unauthorized booting: A BIOS
        password helps protect against unauthorized booting of the system from
        external devices, such as USB drives or optical media. It ensures that
        only authorized individuals can boot the system, reducing the risk of
        unauthorized access or malware infections.</p></li><li><p>Data
        protection: By securing the BIOS, you can help protect sensitive data
        stored on your computer. If someone tries to tamper with the BIOS
        settings or remove the hard drive, they will be unable to access the
        data without the BIOS password.</p></li><li><p>Preventing malicious
        firmware modifications: Securing the BIOS helps prevent unauthorized
        modifications to the firmware itself. Malicious actors could potentially
        modify the BIOS to install persistent malware or compromise the system's
        integrity. A BIOS password reduces the risk of such
        tampering.</p></li><li><p>Compliance and regulatory requirements: In
        certain industries or organizations, securing the BIOS with a password
        may be necessary to comply with industry regulations or internal
        security policies. It demonstrates a proactive approach to securing
        computer systems and protecting sensitive
        information.</p></li></ol><p>It's important to note that while a BIOS
        password provides a level of security, it is not foolproof. Advanced
        attackers may still find ways to bypass or reset the BIOS password.
        However, setting a BIOS password is a recommended security practice that
        can help mitigate the risk of unauthorized access and protect system
        integrity.</p>
      remediation: <p>A strong and unique password for each system should be used.</p>
      references: []
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:L/I:H/A:N'
  priority: 2
  remediationComplexity: 2
  details:
    - locale: EN
      title: Writeable SYSTEM Path Folders
      vulnType: Pentest
      description: >-
        <p>Granting low-privileged users write rights over folders that are in
        the SYSTEM Path variable can pose security risks due to the following
        reasons:</p><ul><li><p>Malicious code execution: If low-privileged users
        can write to the folders in the SYSTEM Path variable, they could
        potentially place malicious executables or scripts in those folders.
        This could allow them to execute arbitrary code with elevated
        privileges, bypassing security controls.</p></li><li><p>DLL hijacking:
        By placing a malicious DLL (Dynamic Link Library) with the same name as
        a legitimate DLL used by an application in one of the writable folders,
        low-privileged users can trick the application into loading the
        malicious DLL. This can lead to arbitrary code execution or privilege
        escalation.</p></li><li><p>Path hijacking: If low-privileged users can
        modify the SYSTEM Path variable, they can manipulate the order of folder
        paths. This can result in unintended application behavior, as an
        attacker can substitute a legitimate executable or script with a
        malicious one in a folder they have write access
        to.</p></li><li><p>Privilege escalation: Exploiting write access to
        folders in the SYSTEM Path variable can be used as a stepping stone for
        privilege escalation. By placing a malicious executable in a writable
        folder, an attacker can trick a higher-privileged user or system process
        to execute it, potentially gaining elevated privileges.</p></li></ul>
      remediation: >-
        <p>To mitigate these risks, it is recommended to restrict write access
        to folders in the SYSTEM Path variable to only trusted administrators or
        authorized users. Regular users should not have write permissions on
        these folders to prevent unauthorized modifications and potential
        security breaches.</p>
      references: []
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:H/A:N'
  details:
    - locale: EN
      title: WDAC Settings
      vulnType: Pentest
      description: >-
        <p>Windows Defender Application Control (WDAC) is a security feature in
        Windows 10 that helps protect systems against malware and unauthorized
        software execution, and is the successor to Applocker. WDAC utilizes
        code integrity policies to enforce strict control over which
        applications and code can run on a device.</p><p>WDAC operates by
        establishing a trusted set of rules that define which applications are
        allowed to execute based on factors such as digital signatures, file
        hashes, and other criteria. These rules create a whitelist of trusted
        applications and prevent the execution of unauthorized or malicious
        code.</p><p>With WDAC, organizations can define and enforce policies
        that specify which software is allowed to run, reducing the risk of
        malware infection and unauthorized software installations. It adds an
        additional layer of protection by verifying the integrity and
        authenticity of applications before they are executed.</p><p>WDAC
        leverages virtualization-based security technologies, such as Virtual
        Secure Mode (VSM) and hardware-based security features, to provide a
        highly secure execution environment. It helps protect against
        kernel-level exploits, code injection attacks, and other advanced
        malware techniques.</p><p>By implementing WDAC, organizations can
        strengthen their security posture, reduce the attack surface, and ensure
        that only trusted and authorized applications can run on their Windows
        10 devices.</p>
      remediation: >-
        <p>Enabling Windows Defender Application Control (WDAC) involves several
        steps and requires specific configurations. Here's a general outline of
        the process:</p><ul><li><p>Verify System Requirements: Ensure that your
        system meets the hardware and software requirements for WDAC. This
        includes having a compatible version of Windows 10 Enterprise or Windows
        Server, a compatible processor with virtualization extensions, and
        Secure Boot enabled.</p></li><li><p>Create Code Integrity Policies: WDAC
        relies on code integrity policies to define the rules for application
        and code execution. You need to create and configure these policies
        based on your organization's requirements. This involves specifying
        trusted sources, file hashes, and other criteria that determine which
        applications are allowed to run.</p></li><li><p>Deploy WDAC Policies:
        Once the code integrity policies are defined, you need to deploy them to
        the target devices. This can be done using Group Policy, Configuration
        Manager, or other deployment tools. Ensure that the policies are
        distributed and applied correctly to the intended
        devices.</p></li><li><p>Test and Validate Policies: It's crucial to
        thoroughly test and validate the WDAC policies to ensure that they
        function as intended. This includes verifying that only trusted
        applications can run while unauthorized or malicious code is blocked.
        Conduct thorough testing to identify any potential conflicts or
        issues.</p></li><li><p>Monitor and Maintain WDAC: After enabling WDAC,
        it's essential to monitor and maintain the policies regularly. Monitor
        system logs and events to identify any policy violations or potential
        threats. Update and maintain the code integrity policies as needed to
        adapt to changes in your environment.</p></li></ul><p>It's important to
        note that the specific steps and configurations for enabling WDAC may
        vary depending on factors such as your organization's security
        requirements, network infrastructure, and device configuration. It's
        recommended to consult Microsoft's official documentation or seek
        guidance from a qualified IT professional for detailed instructions and
        best practices tailored to your specific environment.</p>
      references:
        - >-
          https://learn.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/windows-defender-application-control
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: Access to System Tools and Settings
      vulnType: Pentest
      description: >-
        <p>System tools on a Windows system refer to built-in utilities and
        applications that provide various functionalities for managing and
        configuring the operating system. These tools are typically designed to
        perform critical system tasks, diagnostics, troubleshooting, system
        configuration, and administration. Some common examples of system tools
        in Windows include Command Prompt (cmd.exe), PowerShell, Task Manager,
        Registry Editor, Event Viewer, Device Manager, and Disk Management,
        among others. Changing settings for things like the system proxy,
        firewall rules and states, network configuration and even installing or
        uninstalling software is referred to as system settings.</p><p>While
        system tools and settings are essential for system administrators and
        power users to effectively manage and maintain the system, granting
        access to these tools to normal users can pose security concerns. Here
        are a few reasons:</p><ul><li><p>Unauthorized System Modifications:
        System tools often have the capability to modify system settings,
        configurations, and critical files. If normal users have access to these
        tools, they may unintentionally or maliciously modify system settings,
        leading to system instability, performance issues, or security
        vulnerabilities.</p></li><li><p>Privilege Escalation: Certain system
        tools can be leveraged to escalate privileges or execute commands with
        elevated permissions. If normal users have access to such tools, they
        may attempt to exploit them to gain unauthorized access or perform
        actions that they should not have privileges
        for.</p></li><li><p>Exposure of Sensitive Information: System tools can
        provide access to sensitive system information, logs, or files that may
        contain confidential data. Allowing normal users to access these tools
        may expose sensitive information or compromise data
        privacy.</p></li><li><p>Malware Execution: Malware often attempts to
        leverage system tools to carry out its malicious activities. Granting
        access to these tools to normal users increases the risk of
        inadvertently executing malware or running malicious
        commands.</p></li></ul><p>To mitigate these security concerns, it is
        generally recommended to restrict access to system tools and settings
        and limit their usage to trusted administrators or privileged accounts.
        User access control, proper permission settings, and implementing the
        principle of least privilege can help minimize the risk associated with
        normal users accessing system tools.</p>
      remediation: >-
        <p>Restrict access to tools that are meant mainly for administrative
        purposes as much as possible.<br>This can be done via GPOs or
        Intune.</p>
      references: []
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: EN
      title: NetBIOS Name Resolution / LLMNR Configuration
      vulnType: Pentest
      description: >-
        <p>NetBIOS Name Resolution and Link-Local Multicast Name Resolution
        (LLMNR) are protocols used for name resolution in Windows networks. They
        allow devices on a local network to discover and communicate with each
        other by resolving computer names to IP addresses.</p><p>NetBIOS Name
        Resolution: NetBIOS (Network Basic Input/Output System) is a legacy
        protocol used for communication between devices on a local network.
        NetBIOS Name Resolution translates NetBIOS names (computer names) to IP
        addresses. It relies on broadcast messages to resolve names, which can
        be inefficient and pose security risks.</p><p>LLMNR: LLMNR is a modern
        replacement for NetBIOS Name Resolution introduced in Windows Vista and
        later versions. It performs a similar function as NetBIOS Name
        Resolution but uses multicast messages instead of broadcasts. LLMNR is
        intended to resolve names on local networks when DNS name resolution
        fails.</p><p>Security Concerns: Both NetBIOS Name Resolution and LLMNR
        can introduce security risks, particularly when they are enabled on
        systems connected to untrusted networks or outside the local
        network.</p><ul><li><p>Man-in-the-Middle (MitM) Attacks: When NetBIOS
        Name Resolution or LLMNR is enabled, an attacker can intercept and
        respond to name resolution queries, posing as the intended device. This
        allows them to redirect network traffic to their own system, enabling
        potential eavesdropping, data interception, or modification of network
        communications.</p></li><li><p>Name Spoofing and Identity Theft: By
        responding to name resolution queries, an attacker can potentially spoof
        the identity of legitimate devices on the network. This can lead to
        confusion, unauthorized access, or identity
        theft.</p></li><li><p>Information Disclosure: Name resolution requests
        can leak sensitive information, such as computer names and domain
        information, which can be exploited by an attacker for reconnaissance or
        targeted attacks.</p></li></ul><p>To mitigate these security concerns,
        it is generally recommended to disable NetBIOS Name Resolution and
        LLMNR, especially on systems connected to untrusted networks or when not
        required for local network functionality. Instead, relying on more
        secure name resolution mechanisms like DNS (Domain Name System) is
        recommended. Disabling these protocols can help reduce the attack
        surface and protect against potential MitM attacks and other security
        vulnerabilities.</p>
      remediation: >-
        <p>NetBIOS should be disabled on all systems that don't need to be
        compatible with Windows 2000 or older OS. It can be disabled via DHCP or
        GPO.<br></p><img class="custom-image" src="64998d53b1221cb2c209eb7d"
        alt="NetBIOS settings in registry"><p></p><p>You can change all adapters
        to 2 like so:</p><p><code>$regkey =
        "HKLM:SYSTEM\CurrentControlSet\services\NetBT\Parameters\Interfaces"</code></p><p><code>Get-ChildItem
        $regkey |foreach { Set-ItemProperty -Path "$regkey\$($_.pschildname)"
        -Name NetbiosOptions -Value 2 -Verbose}</code></p><p>The same applies to
        LLMNR. However, it can only be disabled via GPO or a script.</p><img
        class="custom-image" src="64998dceb1221cb2c209eb83" alt="GPO settings to
        disable LLMNR"><p><code>Computer Configuration -&gt; Administrative
        Templates -&gt; Network -&gt; DNS Client -&gt; Turn off multicast name
        resolution</code></p>
      references:
        - 'https://luemmelsec.github.io/Relaying-101/'
        - >-
          https://woshub.com/how-to-disable-netbios-over-tcpip-and-llmnr-using-gpo/
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N'
  details:
    - locale: EN
      title: SMB Server Settings
      vulnType: Pentest
      description: >-
        <p>SMB (Server Message Block) is a network protocol used for file and
        printer sharing between computers. There are different versions of the
        SMB protocol, including SMB1 (also known as CIFS - Common Internet File
        System), SMB2, SMB2.1, SMB3, and SMB3.02.</p><p>SMB signing is a
        security feature that helps protect against tampering and unauthorized
        access of SMB traffic. When signing is enabled, the SMB server and
        client sign the SMB packets, providing a way to verify the integrity and
        authenticity of the data exchanged between them.</p><p>Here's an
        overview of SMB protocol versions and their support for
        signing:</p><ol><li><p>SMB1 (CIFS): SMB1 supports SMB message signing.
        It provides a basic level of security, but it is considered outdated and
        less secure compared to newer versions.</p></li><li><p>SMB2 and newer:
        Starting from SMB2, the protocol introduced significant improvements in
        terms of performance and security. SMB2 supports stronger encryption
        algorithms and the ability to negotiate signing as a security
        feature.</p></li></ol><ul><li><p>SMB2.1: This version adds support for
        larger buffer sizes and better performance.</p></li><li><p>SMB3: SMB3
        further enhances security and performance. It introduces features like
        encryption and transparent failover for continuous
        availability.</p></li><li><p>SMB3.02: This version adds improvements for
        SMB Direct, which enables high-speed data transfers using RDMA (Remote
        Direct Memory Access).</p></li></ul><p>Not having SMB signing enabled
        can pose security risks, especially in the context of relay attacks. A
        relay attack involves an attacker intercepting and forwarding SMB
        traffic between a client and a server, potentially tampering with or
        impersonating the communication.</p><p>When SMB signing is disabled, an
        attacker can modify SMB packets in transit without detection,
        potentially injecting malicious code or manipulating data. By enabling
        SMB signing, the server and client can verify the integrity and
        authenticity of the SMB traffic, reducing the risk of unauthorized
        modification or tampering.</p><p>Enabling SMB signing helps protect
        against attacks like Man-in-the-Middle (MitM) attacks, where an attacker
        intercepts SMB traffic and manipulates it to gain unauthorized access or
        extract sensitive information. By ensuring that SMB packets are signed,
        the receiving party can verify the origin and integrity of the data,
        making it harder for an attacker to tamper with the
        communication.</p><p>It is recommended to enable SMB signing for
        improved security, particularly in environments where sensitive data is
        being transmitted over SMB connections.</p>
      remediation: >-
        <p>Activate SMB Signing wherever possible.</p><p>This can be done e.g.
        via GPO:</p><p><code>Computer Configuration -&gt; Policies -&gt; Windows
        Settings -&gt; Security Settings -&gt; Local Policies -&gt; Security
        Options -&gt; "Microsoft network server: Digitally sign communications
        (always)"</code></p><p>It's important to test the changes in a
        controlled environment and verify that SMB signing is working as
        expected before applying the GPO to production systems.</p>
      references: []
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: Windows Firewall Settings
      vulnType: Pentest
      description: >-
        <p>The Windows Firewall is a built-in security feature in Windows
        operating systems that helps protect your computer from unauthorized
        network access. It acts as a barrier between your computer and external
        networks, controlling incoming and outgoing network traffic based on
        predefined rules.</p><p>Here are some reasons why the Windows Firewall
        should be turned on:</p><ul><li><p>Network Security: The primary purpose
        of the firewall is to safeguard your computer from malicious network
        activity, such as unauthorized access, hacking attempts, malware, and
        network-based attacks.</p></li><li><p>Blocking Unauthorized Connections:
        The firewall blocks incoming connections that are not explicitly allowed
        by the configured rules. This prevents unauthorized access to your
        computer and helps protect your personal and sensitive
        information.</p></li><li><p>Outbound Traffic Control: The firewall also
        monitors and controls outgoing network traffic. It prevents potentially
        harmful programs or malware from connecting to the internet without your
        knowledge, reducing the risk of data leakage and preventing unauthorized
        communications.</p></li><li><p>Default Protection: Windows Firewall is
        enabled by default on most Windows installations. Keeping it enabled
        ensures that you have a baseline level of protection even if you don't
        have any additional third-party security solutions
        installed.</p></li></ul>
      observation: >-
        <p>Scoring hardly depends on what you found.<br>Disabled Firewall =
        High<br>Enabled Firewall with any-any is the same ^^<br>Enabled firewall
        with bigger security holes might be medium ...</p>
      remediation: >-
        <p>To ensure the effective use of the Windows Firewall, it's important
        to follow these best practices:</p><ul><li><p>Enable the Firewall:
        Always ensure that the Windows Firewall is enabled on your computer to
        provide the first line of defense against unauthorized network
        access.</p></li><li><p>Use Default Firewall Profiles: Windows Firewall
        provides separate profiles for different network locations (Domain,
        Private, Public). Configure the appropriate profile for each network
        connection to apply the necessary rules based on the network's trust
        level.</p></li><li><p>Allow Only Necessary Ports: By default, the
        Windows Firewall blocks all incoming connections. If you need to allow
        specific network services or applications, create custom rules to open
        only the necessary ports in both inbound and outbound directions. This
        reduces the attack surface and minimizes the risk of unwanted
        access.</p></li><li><p>Regularly Update Firewall Rules: Periodically
        review and update your firewall rules to ensure they reflect your
        current network requirements. Remove any unnecessary or obsolete rules
        to maintain an efficient and secure
        configuration.</p></li></ul><p>Overall, enabling and properly
        configuring the Windows Firewall is an essential step in securing your
        computer and protecting it from unauthorized network access and
        potential threats.</p>
      references:
        - >-
          https://learn.microsoft.com/en-us/windows/security/operating-system-security/network-security/windows-firewall/best-practices-configuring
      customFields: []
  category: System Security
- cvssv3: null
  priority: 3
  remediationComplexity: 1
  details:
    - locale: EN
      title: Antivirus Configuration
      vulnType: Pentest
      description: >-
        <p>Antivirus (AV) software, also known as antivirus or anti-malware
        software, is designed to protect computers and other devices from
        malicious software, such as viruses, worms, Trojans, spyware, adware,
        and other types of malware. Its primary purpose is to detect, prevent,
        and remove malicious programs that can harm your computer system or
        compromise your data.</p><p>Here are some key reasons why it is
        important to have AV software turned on:</p><ul><li><p>Malware
        Protection: AV software scans files, programs, and websites for known
        malware signatures and behavioral patterns, preventing them from
        infecting your system. It helps safeguard your computer against viruses,
        which can cause data loss, system crashes, or unauthorized
        access.</p></li><li><p>Real-Time Protection: AV software provides
        real-time monitoring of files and activities on your computer, detecting
        and blocking malware threats as they occur. This proactive approach
        helps prevent malware from executing and spreading throughout your
        system.</p></li><li><p>Web Protection: Many AV solutions include web
        protection features that help block access to malicious websites or warn
        you about potentially dangerous sites. This protects you from phishing
        attempts, drive-by downloads, and other web-based
        threats.</p></li><li><p>Email Protection: AV software often integrates
        with email clients to scan incoming and outgoing email attachments for
        malware. It helps prevent the spread of infected files through email and
        reduces the risk of falling victim to email-borne threats, such as
        phishing emails or malicious attachments.</p></li><li><p>Vulnerability
        Detection: Some AV software includes vulnerability scanning features
        that identify security weaknesses in your operating system or installed
        applications. By identifying vulnerabilities, you can take necessary
        steps to patch or update software, minimizing the risk of exploitation
        by malware.</p></li><li><p>Data Protection: AV software helps protect
        your personal and sensitive information by preventing unauthorized
        access or theft. It can detect keyloggers, screen capture tools, and
        other types of spyware that aim to collect your private
        data.</p></li><li><p>System Performance: While AV software performs
        resource-intensive tasks like scanning files and monitoring activities,
        modern solutions are designed to minimize impact on system performance.
        They use optimized scanning algorithms and leverage hardware
        acceleration to ensure efficient protection without significantly
        slowing down your computer.</p></li></ul><p>In summary, having AV
        software turned on is crucial for maintaining a secure and safe
        computing environment. It helps protect your system, data, and privacy
        from various malware threats, ensuring a smoother and more secure
        digital experience.</p>
      observation: >-
        <p>Rating hardly depends on what is setup.<br>Is AV on or not?<br>Many
        exclusions that can be reviewed by anyone? Are they lax?<br>All features
        enabled or are crucial ones missing?</p>
      remediation: >-
        <p>An AV solution should be installed and actively running on each
        system.<br>The product itself as well as its patterns should be kept
        up-to-date at any time.<br>Harden the systems as much as possible by
        making use of all features provided by your AV.<br>Ensure that things
        like tamper protection are enabled and can't be disabled by normal users
        - best also not by administrators.<br>Exclusions should be kept to a
        minimum, where possible individually by system. So you should not
        globally exclude path x or application y, just because you need it on
        one system out of hundreds.<br></p>
      references: []
      customFields: []
  category: System Security
- cvssv3: null
  priority: 3
  remediationComplexity: 2
  details:
    - locale: EN
      title: Proxy Settings
      vulnType: Pentest
      description: >-
        <p>A proxy server acts as an intermediary between a client (such as a
        computer or device) and the internet. When a client requests a resource
        from the internet, the request first goes through the proxy server,
        which then forwards the request on behalf of the client. The proxy
        server can provide various functions, including caching, filtering, and
        anonymizing the client's requests.</p><p>The primary reasons for using a
        proxy server are:</p><ul><li><p>Anonymity and Privacy: By using a proxy
        server, the client's IP address and other identifying information can be
        masked. This helps protect the client's privacy and adds a layer of
        anonymity when accessing websites or online
        services.</p></li><li><p>Caching and Performance: Proxy servers can
        store copies of frequently accessed web resources, allowing subsequent
        requests for the same resource to be fulfilled from the cache. This
        reduces bandwidth usage and improves performance by delivering content
        faster to the client.</p></li><li><p>Content Filtering and Access
        Control: Proxy servers can be configured to filter web content based on
        predefined rules. This allows organizations to enforce access policies,
        block malicious websites, or restrict access to certain categories of
        content, enhancing security and productivity.</p></li></ul><p>Now,
        regarding security issues, not using a proxy server when required or
        recommended can pose several risks:</p><ul><li><p>Data Leaks: Without a
        proxy server, client requests are made directly to the destination
        server, potentially revealing the client's IP address and other
        identifying information. This information can be used for tracking,
        targeting, or profiling the client.</p></li><li><p>Bypassing Security
        Controls: Proxy servers can implement security controls such as
        antivirus scanning, intrusion detection, or content filtering. Not using
        a proxy may bypass these controls, increasing the risk of accessing
        malicious or inappropriate content.</p></li><li><p>Exposure to Malicious
        Content: Proxy servers can provide an additional layer of defense by
        scanning and filtering web content for malware or malicious scripts.
        Without a proxy, clients may be more exposed to such
        threats.</p></li><li><p>Limited Access Management: Proxy servers allow
        organizations to enforce access policies, blocking access to
        unauthorized websites or limiting access to specific resources. Not
        using a proxy can make it challenging to manage and control internet
        access, leading to potential security and compliance
        issues.</p></li></ul><p>In summary, using a proxy server offers benefits
        such as privacy, performance, and security controls. Neglecting to use a
        proxy, when necessary or advised, can compromise privacy, expose clients
        to security risks, and make it challenging to enforce access policies
        and protect against malicious content.</p>
      observation: >-
        <p>Rating depends on what you found.<br>No proxy - bad<br>Proxy but it
        doesn't filter - bad<br>Try to download Malware via HTTP, HTTPS, in a
        ZIP file, in an encrypted ZIP file etc.</p>
      remediation: >-
        <p>Use a proxy, either locally or in a central place.<br>Make sure to
        block malicious web traffic.<br>Inspect secured traffic for malware -
        SSL inspection.</p>
      references: []
      customFields: []
  category: System Security
- cvssv3: null
  priority: 3
  remediationComplexity: 2
  details:
    - locale: EN
      title: Software Lifecycle Management
      vulnType: Pentest
      description: >-
        <p>Used soft- and firmware as well as operating systems should always be
        kept to the most current versions.</p><p>Using outdated versions poses
        several direct and indirect security risks like:<br>- Security
        vulnerabilities: outdated software may have unpatched security holes
        that can be exploited by attackers.<br>- Compatibility issues: new
        hardware or software may not be compatible with old systems.<br>-
        Performance degradation: outdated software may run slower, become less
        responsive, or crash more often.<br>- Lack of features: newer software
        may have additional features or improvements that are not available in
        older versions.<br>- Compliance problems: outdated software may not meet
        industry regulations or standards.<br><br>So staying up to date is a
        mandatory requirement to a matured security culture and should be part
        of the patch management process.</p>
      observation: >-
        <p>Criticality depending on what could be achieved due to systems and
        software being outdated.</p>
      remediation: >-
        <p>Check if any of the mentioned software components can be upgraded /
        updated and if important security updates are missing.<br>Implement a
        patch management strategy and process that ensures that all your systems
        are up to date and that updates are applied timely according to their
        criticality.<br>Apply workarounds when no patches are available when
        tackling critical flaws.</p>
      references: []
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: RDP Configuration
      vulnType: Pentest
      description: >-
        <p><br>Remote Desktop Protocol (RDP) is a technology developed by
        Microsoft that allows users to connect to and control a remote computer
        over a network connection. It enables remote access to resources,
        applications, and desktop environments on a remote system.</p><p>RDP can
        be convenient for various purposes, such as remote administration,
        technical support, and remote work scenarios. However, if not properly
        secured, RDP can pose security risks. Some of the potential risks
        include:</p><ul><li><p>Unauthorized access: If RDP is exposed to the
        internet or not adequately protected, it can become a target for
        malicious actors attempting to gain unauthorized access to
        systems.</p></li><li><p>Brute-force attacks: Attackers can launch
        brute-force attacks against RDP sessions, trying various username and
        password combinations to gain access.</p></li><li><p>Vulnerabilities:
        Like any software, RDP implementations can have security vulnerabilities
        that can be exploited by attackers.</p></li></ul><p>Network Level
        Authentication (NLA) is a security feature in RDP that can help mitigate
        some of these risks. NLA requires users to authenticate themselves
        before establishing a remote desktop connection. It adds an extra layer
        of security by verifying the user's credentials before allowing access
        to the remote system. With NLA enabled, the remote system must
        authenticate the user before a full RDP session is initiated, reducing
        the risk of unauthorized access.</p><p>By enabling NLA, potential
        security risks associated with RDP can be mitigated, as it helps ensure
        that only authenticated and authorized users can establish remote
        desktop connections. It is recommended to configure RDP with NLA and
        follow best practices for securing RDP connections, such as using strong
        passwords, enabling network firewalls, keeping the RDP software up to
        date, and restricting access to trusted networks or specific IP
        addresses.</p>
      remediation: >-
        <p>If possible disable RDP completely.<br>If not possible, harden access
        by enforcing NLA. This can be done via GPO or directly via
        registry:<br><code>Computer Configuration -&gt; Administrative Templates
        -&gt; Windows Components -&gt; Remote Desktop Services -&gt; Remote
        Desktop Session Host -&gt; Security -&gt; Require user authentication
        for remote connections by using Network Level
        Authentication</code></p><p><code>Set-ItemProperty -Path
        'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal
        Server\WinStations\RDP-Tcp' -Name 'UserAuthentication' -Value
        1</code><br></p><p>Ensure strong passwords or even better MFA for
        accounts that can login remotely.</p>
      references: []
      customFields: []
  category: System Security
- cvssv3: null
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: WinRM Settings
      vulnType: Pentest
      description: >-
        <p>WinRM (Windows Remote Management) is a Microsoft Windows feature that
        allows for remote management and execution of commands on Windows
        systems over a network. It enables administrators to remotely manage
        Windows computers using PowerShell or other remote management
        tools.</p><p>WinRM relies on a client-server model, where the client
        (usually a remote administrator) communicates with the WinRM service
        running on the target system to perform management tasks. This allows
        administrators to remotely configure settings, execute commands,
        retrieve information, and perform other administrative tasks without
        physically accessing the system.</p><p>In terms of security
        implications, WinRM introduces potential risks if not properly
        configured and secured. Some key considerations
        include:</p><ul><li><p>Authentication and Authorization: WinRM should be
        configured to use strong authentication mechanisms, such as Kerberos or
        SSL/TLS, to prevent unauthorized access. Access controls should be
        defined to limit who can connect and what actions they can
        perform.</p></li><li><p>Encryption: Communication between the WinRM
        client and server should be encrypted using SSL/TLS to protect sensitive
        data and prevent eavesdropping or tampering.</p></li><li><p>Firewall
        Configuration: The necessary firewall rules should be in place to allow
        WinRM traffic only from trusted sources and block unauthorized access
        from the network.</p></li><li><p>Credential Management: Proper
        management of credentials used for WinRM authentication is essential.
        Secure storage and handling of credentials are crucial to prevent
        unauthorized access to sensitive information.</p></li><li><p>Regular
        Updates: Keeping the WinRM service and underlying operating system up to
        date with the latest security patches is important to address any
        vulnerabilities that may be discovered over time.</p></li></ul><p>By
        considering and implementing these security measures, WinRM can be used
        effectively while minimizing the potential risks associated with remote
        management capabilities.</p>
      remediation: >-
        <p>Follow the guidelines outlined in the description to harden
        WinRM.<br>If possible disable WinRM completely.</p>
      references:
        - >-
          https://learn.microsoft.com/en-us/powershell/scripting/learn/remoting/winrmsecurity?view=powershell-7.3
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N'
  priority: 4
  remediationComplexity: 1
  details:
    - locale: EN
      title: Unquoted Service Paths
      vulnType: Pentest
      description: >-
        <p>Windows services normally start executables. The executable path
        allows the OS to find the correct executable to run for each service.
        The following path is an example of a secure service
        path:</p><p><code>"C:\Programs\Test
        Folder\bin\service.exe"</code></p><p>The following path is an example of
        an unsafe service path:</p><p><code>C:\Program Files\Test
        Folder\bin\service.exe</code></p><p>When Windows attempts to read the
        path to this executable, it interprets the space as a kind of terminator
        if the path is not enclosed in <code>"</code>.&nbsp; So it will attempt
        to execute the following (in
        order):</p><p><code>C:\Program.exe</code></p><p><code>C:\Program
        Files\Test.exe</code></p><p><code>C:\Program Files\Test
        Folder\bin\service.exe</code></p><p>If the directories are configured
        with inappropriate permissions, the attacker can place a malicious
        executable file in them. If the service is set to run with
        administrative privileges (e.g. SYSTEM), the attacker can elevate its
        privileges and gain unauthorized administrative access to the system. In
        this case the attacker would want to try to add the first 2 files to the
        filesystem.</p>
      remediation: >-
        <p>The first step would be to ask the vendor of the affected application
        for an updated versions that fixes the misconfiguration.</p><p>A manual
        workaround would be to manually put the binary path into quotes.</p>
      references:
        - >-
          https://www.ired.team/offensive-security/privilege-escalation/unquoted-service-paths
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: EN
      title: Password Policy
      vulnType: Pentest
      description: >-
        <p>Using weak passwords has several security implications and is posing
        one of the biggest risks in the IT security threat landscape with the
        following impacts:</p><ul><li><p>Easy to guess: Bad passwords are often
        easily predictable, making it easier for hackers to guess or crack
        them.</p></li><li><p>Dictionary attacks: Poor passwords are susceptible
        to dictionary attacks, where a hacker uses a list of commonly used
        passwords to gain access to an account.</p></li><li><p>Brute force
        attacks: In a brute force attack, a hacker tries every possible
        combination of characters to crack a password, making a weak password
        easier to crack.</p></li><li><p>Reuse: People often reuse the same
        password across multiple accounts, putting all their information at risk
        if a single password is compromised.</p></li><li><p>...</p><p></p><p>If
        the passwords used by the users are not complex enough they can easily
        be guessed or the clear text passwords can trivially be recovered if an
        attacker gets access to their hashed values.</p></li></ul>
      remediation: >-
        <p>The following settings and measures can help to harden access to
        users and their credentials:</p><ul><li><p>Implementing multi-factor
        authentication.</p></li><li><p>Implementing a secure domain wide
        password policy in case of Active Directory. At least 12 characters for
        low privileged and 14 characters for high privileged accounts. For
        service accounts at least 20 characters should be
        used.</p></li><li><p>Using a password manager. Best in combination with
        the possibility for fine granular rights management and MFA
        authentication.</p></li><li><p>Password blacklisting. Ban passwords with
        the company name, seasons, passwords on leaked lists
        etc.</p></li><li><p>Implementing password policies based on the access
        rights of the accounts affected.</p></li><li><p>Regular password
        audits.</p></li><li><p>User awareness campaigns. Especially security
        related trainings for technical staff.</p><p></p></li></ul><p>Best
        practices for the Domain Password
        Policy:</p><ul><li><p>ComplexityEnabled =
        True</p></li><li><p>LockoutDuration &gt;= 15
        Minutes</p></li><li><p>LockoutObservationWindow &gt;= 15
        Minutes</p></li><li><p>LockoutThreshold &lt;= 10
        Minutes</p></li><li><p>MinPasswordLength &gt;=
        12</p></li><li><p>ReversibleEncryptionEnabled = False</p></li></ul>
      references: []
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: EN
      title: Co-installer Configuration
      vulnType: Pentest
      description: >-
        <p>The Windows Co-installer [1] feature is a mechanism used in Windows
        operating systems to facilitate the installation and management of
        device drivers. Co-installers are DLL (Dynamic Link Library) files that
        can be included alongside a device driver package. They provide
        additional functionality and instructions to the Windows Installer
        service during the installation or update of a
        driver.</p><p>Co-installers are used to perform various tasks, such as
        configuring hardware settings, updating firmware, handling complex
        driver installations or even installing additional
        software.</p><p>However, the use of Co-installers can have security
        implications for the following reasons:</p><ul><li><p><strong>Privilege
        Escalation</strong>: Co-installers might run with elevated privileges
        during the driver installation process. If a Co-installer has
        vulnerabilities or malicious code, it could potentially be exploited by
        attackers to escalate their privileges and gain control of the
        system.</p></li><li><p><strong>Code Execution</strong>: Co-installers
        execute code as part of the driver installation process. Malicious
        Co-installers could execute harmful code, leading to various security
        issues, such as unauthorized access, data manipulation, or system
        compromise.</p></li><li><p><strong>Driver Tampering</strong>:
        Co-installers can modify driver settings and configurations. If an
        attacker replaces a legitimate Co-installer with a malicious one, they
        could tamper with the driver's behavior, potentially causing system
        instability or security vulnerabilities.</p></li><li><p><strong>Driver
        Signature Bypass</strong>: Co-installers can sometimes be used to bypass
        driver signature enforcement, which is a security feature that ensures
        drivers are digitally signed by trusted entities. This could enable the
        installation of unsigned or malicious drivers, further compromising
        system security.</p></li></ul><p>There are lots of Co-installers known
        to attackers that can be abused for privilege escalation. Amongst the
        most common ones was the one which comes while installing certain Razer
        devices [2].</p>
      remediation: >-
        <p>Disable the ability to install Co-installers by settings the
        following registry
        key:</p><p><code>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Device
        Installer\DisableCoInstallers = 1</code></p><p>Users will have to
        install the software that comes with the device drivers manual if really
        needed.</p>
      references:
        - >-
          [1]
          https://learn.microsoft.com/en-us/windows-hardware/drivers/install/writing-a-co-installer
        - >-
          [2]
          https://www.bleepingcomputer.com/news/microsoft/how-to-block-windows-plug-and-play-auto-installing-insecure-apps
        - 'https://www.scip.ch/en/?labs.20211209'
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: EN
      title: Secure Boot Configuration
      vulnType: Pentest
      description: >-
        <p>Secure Boot is a security feature in Windows (and other operating
        systems) that helps protect the boot process from malware and
        unauthorized modifications. Here's a brief overview:</p><p>Secure Boot
        works by ensuring that only digitally signed and trusted bootloaders and
        operating system components are allowed to run during the startup
        process. This prevents the execution of malicious code or unauthorized
        firmware and driver modifications that could compromise the system's
        integrity.</p><p>Key points about Secure Boot on
        Windows:</p><ul><li><p><strong>UEFI Requirement</strong>: Secure Boot
        relies on the Unified Extensible Firmware Interface (UEFI) in modern
        computers. It's typically enabled or disabled in the UEFI firmware
        settings.</p></li><li><p><strong>Digital Signatures</strong>:
        Bootloaders, kernel files, and drivers must have valid digital
        signatures from trusted Certificate Authorities (CAs) to be loaded
        during the boot process.</p></li><li><p><strong>Enforcement</strong>:
        When Secure Boot is enabled, the UEFI firmware checks the digital
        signatures of boot components and refuses to load them if they're not
        signed or not signed by trusted
        sources.</p></li><li><p><strong>Protection Against Rootkits</strong>:
        Secure Boot helps protect against rootkits and other low-level malware
        that attempt to compromise the boot
        process.</p></li><li><p><strong>Compatibility Mode</strong>: Some UEFI
        systems offer a compatibility mode that allows non-signed or legacy
        bootloaders to run. However, this weakens the security provided by
        Secure Boot.</p></li><li><p><strong>Hardware Requirements</strong>:
        Secure Boot requires hardware support in the form of a UEFI firmware
        with Secure Boot capabilities.</p></li></ul><p>By enforcing the use of
        trusted boot components, Secure Boot helps safeguard the integrity of
        the operating system and protects against certain types of attacks that
        target the boot process. It's an essential security feature for modern
        Windows systems, especially those running Windows 8 and later
        versions.</p><p>If Secure Boot is not enabled on a system, attackers may
        exploit this vulnerability to carry out various malicious activities,
        including:</p><ul><li><p><strong>Bootkit Attacks</strong>: Attackers can
        inject malicious bootloaders or rootkits during the boot process,
        allowing them to gain control of the system and potentially hide their
        presence from antivirus and security
        software.</p></li><li><p><strong>Malware Persistence</strong>: Without
        Secure Boot, malware can persistently infect the system, making it
        difficult for users to remove the malicious software, even after
        traditional disinfection attempts.</p></li><li><p><strong>Unauthorized
        Kernel Modifications</strong>: Attackers can load unsigned or malicious
        kernel modules, giving them control over the operating system and
        potentially compromising its integrity and
        security.</p></li><li><p><strong>Firmware Tampering</strong>: They can
        modify firmware settings and configurations, potentially leading to
        hardware vulnerabilities or backdoors that are difficult to detect and
        remove.</p></li><li><p><strong>Bypassing Security Measures</strong>:
        Secure Boot helps enforce driver and operating system component
        integrity. When it's disabled, attackers can potentially load unsigned
        or tampered components, bypassing security measures and exposing the
        system to a higher risk of exploitation.</p></li></ul><p>In summary, the
        absence of Secure Boot can leave a system more vulnerable to a range of
        attacks that target the boot process and operating system integrity,
        making it easier for attackers to compromise and control the system.</p>
      remediation: >-
        <p>Enable Secure Boot via the following registry
        key:</p><p><code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecureBoot\State\UEFISecureBootEnabled
        = 1</code></p><p></p>
      references:
        - >-
          https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-secure-boot
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:L/A:N'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: EN
      title: UAC Configuration
      vulnType: Pentest
      description: >-
        <p>Windows UAC (User Account Control) is a security feature in Windows
        operating systems that helps prevent unauthorized changes to your
        computer by requiring administrator-level permission for certain actions
        and system-level tasks. When a user or application attempts to perform
        an action that requires elevated privileges, UAC prompts the user for
        permission or prompts for an administrator's password, depending on the
        UAC settings.</p><p>Security implications of disabling or setting UAC to
        the weakest setting:</p><ul><li><p><strong>Elevated Attack
        Surface</strong>: Disabling UAC or setting it to the lowest level
        reduces the number of prompts for administrator privileges, making it
        easier for malicious software to execute privileged actions without user
        consent. This increases the attack surface and the risk of malware
        infections.</p></li><li><p><strong>Unauthorized System Changes</strong>:
        Without UAC, applications and scripts can make changes to system
        settings, install software, or modify critical files without any user
        intervention. This can lead to unauthorized system changes and
        potentially compromise the system's stability and
        security.</p></li><li><p><strong>Credential Theft</strong>: Weaker UAC
        settings may lead users to enter their administrator credentials more
        frequently, especially when prompted by malicious software. Attackers
        can then capture these credentials and use them for malicious
        purposes.</p></li><li><p><strong>Malware Evasion</strong>: Malware may
        attempt to disable or weaken UAC to operate more stealthily and avoid
        detection. This can make it harder for security software to identify and
        mitigate malware infections.</p></li><li><p><strong>Data Loss</strong>:
        Weaker UAC settings can allow unauthorized applications to access and
        modify sensitive user data, potentially leading to data loss or
        theft.</p></li></ul><p>In summary, UAC is an important security feature
        in Windows that helps prevent unauthorized changes and reduce the risk
        of malware infections. Disabling UAC or setting it to a weak level can
        significantly increase the system's vulnerability to various security
        threats and should be avoided for the sake of system security. It's
        generally recommended to keep UAC at its default or strongest
        setting.</p>
      remediation: >-
        <p>Enable UAC via GPO or registry.</p><p><code>"Computer Configuration"
        &gt; "Windows Settings" &gt; "Security Settings" &gt; "Local Policies"
        &gt; "Security Options."</code></p><ul><li><p>"Enabled" corresponds to
        the highest security level, "Always notify
        me."</p></li><li><p>"Disabled" corresponds to the lowest security level,
        "Never notify."</p></li><li><p>"Not Configured" leaves the UAC settings
        at their
        default.</p></li></ul><p><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System</code></p><ul><li><p>Use
        "1" for the highest security level, "Always notify
        me."</p></li><li><p>Use "0" for the lowest security level, "Never
        notify."</p></li></ul><p></p>
      references:
        - >-
          https://learn.microsoft.com/en-us/windows/security/application-security/application-control/user-account-control/how-it-works
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N'
  details:
    - locale: EN
      title: WSUS Client Configuration
      vulnType: Pentest
      description: >-
        <p>WSUS (Windows Server Update Services) is a Microsoft tool that allows
        organizations to manage and distribute updates released by Microsoft to
        Windows computers within their network. WSUS client settings refer to
        the configurations on individual Windows machines that determine how
        they interact with a WSUS server to receive and install
        updates.</p><p>Using HTTP for WSUS communication can pose security risks
        for several reasons:</p><ul><li><p><strong>Lack of Encryption</strong>:
        HTTP does not encrypt the data transmitted between the WSUS server and
        clients. This means that update metadata, files, and potentially
        sensitive information are sent in plain text over the network. Attackers
        could intercept and eavesdrop on this traffic, potentially gaining
        insight into the systems being updated and the updates
        themselves.</p></li><li><p><strong>Tampering Risk</strong>: Without
        encryption, there is a risk that malicious actors could tamper with the
        update files or metadata during transit. This could result in
        compromised updates being applied to client systems, potentially
        introducing malware or
        vulnerabilities.</p></li><li><p><strong>Credential Exposure</strong>: If
        WSUS clients are configured to use HTTP and require authentication
        (e.g., for proxy authentication), the credentials used for
        authentication may also be transmitted in plaintext, making them
        susceptible to interception.</p></li><li><p><strong>Man-in-the-Middle
        Attacks</strong>: HTTP traffic is vulnerable to man-in-the-middle (MITM)
        attacks, where an attacker intercepts and potentially modifies the
        communication between the client and server. This could allow an
        attacker to inject malicious updates or steal sensitive
        data.</p></li></ul>
      remediation: >-
        <p>To address these security concerns, it is recommended to use HTTPS
        for WSUS communication. HTTPS provides encryption and authentication,
        ensuring the confidentiality and integrity of update data and reducing
        the risk of tampering, eavesdropping, and MITM attacks.</p>
      references:
        - >-
          https://learn.microsoft.com/en-us/mem/configmgr/sum/get-started/software-update-point-ssl
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N'
  priority: 3
  remediationComplexity: 2
  details:
    - locale: EN
      title: IPv6 Configuration
      vulnType: Pentest
      description: >-
        <p>IPv6 is the latest version of the Internet Protocol, designed to
        replace IPv4, and it significantly expands the address space available
        for devices connected to the internet, allowing for a vastly larger
        number of unique IP addresses.</p><p>Man-in-the-Middle (MitM) attacks
        against IPv6-enabled clients are a common way of abusing IPv6 enabled
        clients.</p><p>IPv6 is enabled by default on all newer Windows versions
        and broadcast requests for DHCPv6 are sent out.<br>An attacker in the
        same network segment can respond to those requests and assign the
        attacked client an IPv6 address within the link-local range. In the
        provided DHCPv6 settings, the attacker sets a rogue DNS server to
        redirect the traffic of the attacked clients. As IPv6 per default takes
        precedence over IPv4 those settings will be honored first.</p><p></p>
      remediation: >-
        <p>If possible, completely disable IPv6 on all the network interfaces.
        But be aware that some internal server functions rely on IPv6 e.g.
        Domain Controllers and Exchange servers. So act carefully on
        servers.</p><p>Alternatively IPv4 can be given precedence over IPv6, so
        that firstly you valid IPv4 configuration will be prioritized.</p><p>If
        IPv6 is really needed, you should specify valid values for stuff like
        DNS server and Gateway.</p><p>Some IDS systems and even AVs are capable
        of detecting such attacks and act on them.</p>
      references:
        - >-
          https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/
        - >-
          https://www.blackhillsinfosec.com/mitm6-strikes-again-the-dark-side-of-ipv6/
      customFields: []
  category: System Security
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:N'
  details:
    - locale: EN
      title: WSTG-INFO-01 - Information Leakage
      vulnType: Pentest
      description: >-
        <p>Information leakage occurs when sensitive information is
        unintentionally disclosed by a web application. This could include error
        messages, internal IP addresses, server configurations, software
        versions, and debugging information. Such disclosures can be leveraged
        by attackers to gain insight into the application’s environment and
        architecture, enabling them to craft more effective attacks.</p>
      remediation: >-
        <ul><li><p><strong>Customize Error Responses</strong>: Configure the
        application to display generic error messages without exposing sensitive
        details such as stack traces, database information, or version
        numbers.</p></li><li><p><strong>Disable Debugging Features</strong>:
        Ensure that debugging is disabled in production environments to prevent
        exposure of sensitive information.</p></li><li><p><strong>Control Access
        to Configuration Files</strong>: Protect configuration and backup files
        from being accessed via the web. Ensure that files like
        <code>robots.txt</code>, <code>.htaccess</code>, and environment files
        do not expose sensitive data.</p></li><li><p><strong>Perform Regular
        Security Audits</strong>: Conduct frequent audits to identify and
        mitigate information leakage vulnerabilities. This includes reviewing
        system logs, configuration files, and response headers.</p></li></ul>
      references:
        - 'OWASP Testing Guide: WSTG-INFO-01 Information Leakage'
        - >-
          URL:
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Information_Gathering_Testing/01-Testing_for_Information_Leakage
      customFields: []
  category: Web Pentest
- cvssv3: null
  details:
    - locale: EN
      title: WSTG-INFO-02 - Fingerprinting
      vulnType: Pentest
      description: >-
        <p>Fingerprinting is the process of identifying the underlying
        technologies and components used in a web application by analyzing
        server responses, HTTP headers, error messages, and other
        characteristics. This information can help attackers identify specific
        versions of software that may contain vulnerabilities, allowing them to
        target their attacks accordingly. Web servers, application frameworks,
        databases, and other technologies can be fingerprinted through
        techniques like examining HTTP response headers, error pages, or
        conducting port scans.</p>
      remediation: >-
        <ul><li><p><strong>Remove or Obfuscate Server Identifiers</strong>:
        Configure the web server, application server, and other services to
        avoid revealing version information in HTTP headers (e.g.,
        <code>Server</code>, <code>X-Powered-By</code>
        headers).</p></li><li><p><strong>Custom Error Pages</strong>: Ensure
        that custom error pages are implemented that do not disclose the
        underlying technologies or frameworks.</p></li><li><p><strong>Disable
        Unnecessary Features</strong>: Disable any unnecessary functionality or
        services that expose version details.</p></li><li><p><strong>Regularly
        Update and Patch Systems</strong>: Ensure that all underlying
        technologies are regularly patched and updated to the latest versions to
        mitigate vulnerabilities.</p></li></ul>
      references:
        - 'OWASP Testing Guide: WSTG-INFO-02 Fingerprinting'
        - >-
          URL:
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Information_Gathering_Testing/02-Fingerprinting
      customFields: []
  category: Web Pentest
- cvssv3: null
  details:
    - locale: EN
      title: WSTG-INFO-03 - Application Discovery
      vulnType: Pentest
      description: >-
        <p>Application discovery involves identifying the web applications
        hosted on a server. Attackers can use various methods, such as directory
        listing, brute-forcing URLs, or using search engines to uncover hidden
        or unlinked applications and services that may not be intended for
        public access. Once discovered, these applications might expose
        sensitive information, have security vulnerabilities, or provide an
        entry point for further attacks.</p>
      remediation: >-
        <ul><li><p><strong>Disable Directory Listings</strong>: Ensure directory
        listing is disabled on the server so that attackers cannot easily browse
        through directories.</p></li><li><p><strong>Use Robots.txt
        Effectively</strong>: Properly configure the <code>robots.txt</code>
        file to hide sensitive or non-public URLs from search engine
        crawlers.</p></li><li><p><strong>Enforce Authentication on Hidden
        Resources</strong>: Ensure that any hidden applications or resources
        that should not be publicly accessible require authentication and are
        properly protected.</p></li><li><p><strong>Regularly Audit and Remove
        Unused Applications</strong>: Perform regular audits to identify and
        remove old or unused applications to reduce the attack
        surface.</p></li></ul>
      references:
        - 'OWASP Testing Guide: WSTG-INFO-03 Application Discovery'
        - >-
          URL:
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Information_Gathering_Testing/03-Application_Discovery
      customFields: []
  category: Web Pentest
- cvssv3: null
  details:
    - locale: EN
      title: WSTG-INFO-04 - Web Application Fingerprinting
      description: >-
        <p>Web application fingerprinting is a technique used to identify the
        specific type, version, or configuration of a web application or
        platform. This is achieved by analyzing characteristics such as the
        structure of URLs, error pages, HTTP headers, and cookies. By knowing
        the specific application or framework in use, attackers can tailor their
        attacks to exploit known vulnerabilities or weaknesses associated with
        that particular platform or version.</p>
      remediation: >-
        <ul><li><p><strong>Mask Application Information</strong>: Remove or
        modify any identifying information from HTTP headers (e.g.,
        <code>Server</code>, <code>X-Powered-By</code> headers) to prevent
        revealing the web application framework or
        version.</p></li><li><p><strong>Custom Error Messages</strong>:
        Implement custom error pages that do not disclose information about the
        underlying web application or platform.</p></li><li><p><strong>Regular
        Patching and Updates</strong>: Keep all web applications, frameworks,
        and servers up-to-date with the latest security patches to minimize the
        risk of known vulnerabilities being
        exploited.</p></li><li><p><strong>Use Web Application Firewalls
        (WAFs)</strong>: Implement a WAF to help mask application
        characteristics and prevent fingerprinting attempts by blocking
        malicious traffic.</p></li></ul>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver
      customFields: []
  category: Web Pentest
- cvssv3: null
  details:
    - locale: EN
      title: WSTG-INFO-05 - Search Engine Discovery
      vulnType: Pentest
      description: >-
        <p>Search engine discovery refers to the process where attackers
        leverage search engines to uncover sensitive information exposed by a
        web application. This includes misconfigured files, exposed databases,
        or sensitive directories that are unintentionally indexed by search
        engines. Attackers often use advanced search techniques (e.g., Google
        Dorking) to discover vulnerabilities, login portals, or private
        information that is not meant for public access.</p>
      observation: >-
        <ul><li><p><strong>Proper Use of Robots.txt and Meta Tags</strong>:
        Configure the <code>robots.txt</code> file and meta tags appropriately
        to ensure that sensitive files, directories, or administrative portals
        are not indexed by search engines.</p></li><li><p><strong>Remove Exposed
        Content</strong>: Regularly audit your web application to identify and
        remove sensitive content from search engine
        indexes.</p></li><li><p><strong>Monitor Search Engines</strong>: Use
        Google Search Console and other tools to monitor indexed pages and
        ensure no sensitive information is publicly
        accessible.</p></li><li><p><strong>Obfuscate Sensitive Data</strong>:
        Avoid exposing sensitive file names or URLs in public sections of your
        website that could be indexed.</p></li></ul>
      remediation: >-
        <ul><li><p><strong>Proper Use of Robots.txt and Meta Tags</strong>:
        Configure the <code>robots.txt</code> file and meta tags appropriately
        to ensure that sensitive files, directories, or administrative portals
        are not indexed by search engines.</p></li><li><p><strong>Remove Exposed
        Content</strong>: Regularly audit your web application to identify and
        remove sensitive content from search engine
        indexes.</p></li><li><p><strong>Monitor Search Engines</strong>: Use
        Google Search Console and other tools to monitor indexed pages and
        ensure no sensitive information is publicly
        accessible.</p></li><li><p><strong>Obfuscate Sensitive Data</strong>:
        Avoid exposing sensitive file names or URLs in public sections of your
        website that could be indexed.</p></li></ul>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Information_Gathering_Testing/05-Search_Engine_Discovery_and_Reconnaissance
      customFields: []
  category: Web Pentest
- cvssv3: null
  details:
    - locale: EN
      title: 'WSTG-INFO-06: Security Misconfiguration'
      vulnType: Pentest
      description: >-
        <p>Security misconfigurations occur when an application or its
        environment is not configured securely. This includes using default
        settings, running unnecessary services, exposing error messages, or
        having insufficient permissions on files and directories. These
        misconfigurations can provide attackers with opportunities to exploit
        weaknesses and gain unauthorized access.</p>
      remediation: >-
        <ul><li><p><strong>Review Configurations</strong>: Regularly audit and
        review application and server configurations to ensure they follow best
        practices for security.</p></li><li><p><strong>Change Defaults</strong>:
        Update default passwords, settings, and configurations to secure
        values.</p></li><li><p><strong>Disable Unnecessary Services</strong>:
        Disable or remove any services or features that are not required for the
        application’s operation.</p></li><li><p><strong>Secure Error
        Handling</strong>: Configure error messages to avoid revealing stack
        traces or detailed internal information.</p></li><li><p><strong>Set
        Proper Permissions</strong>: Ensure that file and directory permissions
        are set appropriately to restrict unauthorized
        access.</p></li><li><p><strong>Implement Security Headers</strong>: Add
        and configure appropriate HTTP security headers such as Content Security
        Policy (CSP), X-Content-Type-Options, and X-Frame-Options.</p></li></ul>
      references:
        - >-
          OWASP Web Security Testing Guide - Security Misconfiguration
          https://owasp.org/www-project-web-security-testing-guide/latest/
      customFields: []
  category: Web Pentest
- cvssv3: null
  details:
    - locale: EN
      title: 'WSTG-INFO-07: Sensitive Data Exposure'
      description: >-
        <p>Sensitive data exposure occurs when an application does not
        adequately protect sensitive information such as personal data,
        financial data, or authentication credentials. This can include data
        being transmitted unencrypted, stored insecurely, or exposed through
        poor access controls or insufficient data masking.</p>
      remediation: >-
        <ul><li><p><strong>Limit Error Information</strong>: Configure the
        application to provide generic error messages to users while logging
        detailed errors internally for debugging
        purposes.</p></li><li><p><strong>Secure Logs</strong>: Ensure that logs
        do not contain sensitive information and are stored securely with
        restricted access.</p></li><li><p><strong>Mask Sensitive Data</strong>:
        Mask or obfuscate sensitive data when it needs to be displayed or
        logged.</p></li><li><p><strong>Encrypt Data</strong>: Use encryption to
        protect sensitive data both in transit and at
        rest.</p></li><li><p><strong>Implement Access Controls</strong>:
        Restrict access to sensitive information based on roles and
        responsibilities.</p></li></ul>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/07-Map_Execution_Paths_Through_Application
      customFields: []
  category: Web Pentest
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: >-
        Disclosure of sensitive information indexed in web search engines or
        other public sources
      vulnType: OWASP WSTG
      description: >-
        <p>Search engines can be used to perform recognition of web sites and
        applications. There are direct and indirect elements to search engine
        discovery and recognition: direct methods are related with searching the
        indexes and associated content of caches, while indirect methods are
        related with learning sensitive information about the layout and
        configuration by searching in forums, newsgroups, and websites.</p><p>By
        using search engines such as Google, DuckDuckGo or Bing it is possible
        to find potentially sensitive information such as:</p><ul><li><p>Network
        diagrams and configurations.</p></li><li><p>Archived messages and emails
        from administrators or other key personnel.</p></li><li><p>Login
        procedures and username formats.</p></li><li><p>User names, passwords
        and private keys.</p></li><li><p>Configuration files from third parties
        or cloud services.</p></li><li><p>Content of revealing error
        messages.</p></li><li><p>Development versions, tests, user acceptance
        tests (UAT) and test versions of the applications.</p></li></ul>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>Before publishing an application, it is essential to consider the
        sensitivity of the data exposed in it in order to prevent accidental
        disclosures of sensitive information.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/01-Conduct_Search_Engine_Discovery_Reconnaissance_for_Information_Leakage
      customFields: []
  category: Information Gathering
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Disclosure of sensitive information in HTTP headers
      vulnType: OWASP WSTG
      description: >-
        <p>This situation occurs when the application reveals the type and/or
        version of an internal component being used by revealing information in
        the HTTP protocol headers. Through this information, the operating
        system, one of its services (web, mail, file transfer...), or one of its
        components (PHP, mod_proxy, WebDAV...) can be revealed.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>To prevent this kind of information disclosure, it is necessary to
        conceal the information displayed in the protocol headers.To prevent
        this kind of information disclosure, it is necessary to conceal the
        information displayed in the protocol headers.</p><p>A fix, which is
        typically an update to it or the application of a specific patch, is
        typically necessary to fix the published vulnerabilities of the detected
        components and requires adhering to the recommendations of the maker of
        the vulnerable software to resolve the vulnerabilities.</p><p>It would
        be necessary to decide whether to stop offering the service until a
        solution was found or take the chance of doing so even in the absence of
        a published solution.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server
        - 'https://cwe.mitre.org/data/definitions/200.html'
        - >-
          https://wiki.owasp.org/index.php/Testing_for_Web_Application_Fingerprint_(OWASP-IG-004)
      customFields: []
  category: Information Gathering
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Disclosure of sensitive information in application cookies
      vulnType: OWASP WSTG
      description: >-
        <p>The configuration of the cookies exposes sensitive information in
        both the cookie's pre-established name and its content, which leads to
        this vulnerability. For instance, a cookie with the name of the software
        it was created with.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>To prevent this kind of information disclosure, it is necessary to
        either hide the data displayed in the cookies or alter their name or
        content.</p><p>In order to fix the publicly disclosed vulnerabilities of
        the detected components, it is typically necessary to follow the
        manufacturer's recommendations for resolving the vulnerabilities, a
        solution which typically entails an update of the software or the
        application of a particular patch.</p><p>It would be necessary to decide
        whether to stop offering the service until a solution was found or take
        the chance of doing so even in the absence of a published solution.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework
      customFields: []
  category: Information Gathering
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Disclosure of sensitive information in the 'robots.txt' file
      vulnType: OWASP WSTG
      description: >-
        <p>Some programs use spider bots to automatically browse websites in an
        effort to index them. Any user can access the "robots.txt" file, which
        is used to specify directories and resources that the administrator
        wants to be indexed and those that he or she does not. The configuration
        of this file needs to be handled with extra caution because it may
        reveal which resources are sensitive.</p><p>The "robots.txt" file
        contains sensitive resources that could be used by an attacker to launch
        more sophisticated and precise attacks using the data gathered.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>The 'robots.txt' file shouldn't be used as a method of restricting
        access to the application's insecure areas. Beyond their protection from
        spider-type robots, access to these sections must be properly controlled
        against potential attacks.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage
        - 'https://cwe.mitre.org/data/definitions/200.html'
        - 'https://developers.google.com/search/docs/advanced/robots/intro'
      customFields: []
  category: Information Gathering
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Disclosure of sensitive information in the 'sitemap.xml' file
      vulnType: OWASP WSTG
      description: >-
        <p>A developer or organization can provide details about the resources
        available in the application and their connections in the "sitemap.xml"
        file.</p><p>The "sitemap.xml" file contains sensitive resources that can
        be used by an attacker to launch more advanced and precise attacks using
        the data they have gathered.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>It is advised to delete any sensitive data from the "sitemap.xml"
        file that is not required for the application's development.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage
        - 'https://cwe.mitre.org/data/definitions/200.html'
      customFields: []
  category: Information Gathering
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Disclosure of sensitive information in the 'security.txt' file
      vulnType: OWASP WSTG
      description: >-
        <p>A proposed standard allows web pages to specify security policies and
        contact information in the "security.txt" file.</p><p>The "security.txt"
        file contains sensitive information that could be used by an attacker to
        launch more sophisticated and precise attacks using the data
        gathered.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>It is advised to delete all private data from the "security.txt" file
        that is not required for the application's development.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage
        - 'https://cwe.mitre.org/data/definitions/200.html'
      customFields: []
  category: Information Gathering
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Disclosure of sensitive information in the 'humans.txt' file
      vulnType: OWASP WSTG
      description: >-
        <p>The "humans.txt" file is a project to learn more about the people who
        create a website.</p><p>The "humans.txt" file contains sensitive
        information that could be used by an attacker to launch more
        sophisticated and precise attacks using the data gathered.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>It is advised to delete all private data from the "humans.txt" file
        that isn't necessary for the application's development.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage
        - 'https://cwe.mitre.org/data/definitions/200.html'
      customFields: []
  category: Information Gathering
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Disclosure of sensitive information in the source code
      vulnType: OWASP WSTG
      description: >-
        <p>This situation arises when analyzing a file that has been uploaded to
        a web server reveals server-related information that can be used to plan
        new attacks, such as the type and version of applications being used,
        components or extensions that are in use, credentials...</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>To prevent sensitive information leaks, the HTML source code that the
        server sends must be modified.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage
        - 'https://cwe.mitre.org/data/definitions/540.html'
      customFields: []
  category: Information Gathering
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Disclosure of sensitive information because debug mode is enabled
      vulnType: OWASP WSTG
      description: >-
        <p>It is occasionally possible to display technical data or trade
        secrets within the application by using a "enabling debug parameter." As
        a result, the attacker increases the size of his attack surface by
        learning more about how the application works. Enabling the debug flag
        might occasionally even result in code execution attacks (older versions
        of werkzeug)</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>Production applications shouldn't ever generate internal information
        like stack traces and error messages unless they directly commit it to a
        log that the end user cannot see. Before being written to the log file,
        all error message text should be HTML entity encoded to prevent
        potential cross-site scripting attacks against the log viewer.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/497.html'
      customFields: []
  category: Information Gathering
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Disclosure of sensitive information (generic)
      vulnType: OWASP WSTG
      description: >-
        <p>A password, for example, is a sensitive piece of information that can
        be valuable on its own or be used to launch other, more serious attacks
        (such as obtaining an uncontrolled error message). Error message content
        can be used by an attacker to support the launch of a different, more
        focused attack. An attempt to exploit a directory enumeration or path
        traversal flaw, for instance, might reveal the complete path to the
        installed application.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>Create "safe" areas within the system where trust boundaries can be
        clearly defined. Allow no sensitive information to cross the lines of
        trust, and exercise extreme caution whenever interacting with a
        compartment outside of a secure area.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage
        - 'https://cwe.mitre.org/data/definitions/200.html'
      customFields: []
  category: Information Gathering
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Disclosure of credentials (credentials leak)
      vulnType: OWASP WSTG
      description: >-
        <p>It has been possible to verify and check the existence of files
        containing sensitive information, such as valid credentials for
        accessing other systems, at a variety of endpoints. There is no need for
        any kind of cookie or earlier authentication system to access these
        credentials.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>Regardless of the software these user credentials are used for, it is
        never advised to expose sensitive files that expose user
        credentials.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/200.html'
        - 'https://cwe.mitre.org/data/definitions/359.html'
      customFields: []
  category: Information Gathering
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: Use of Hard-coded Credentials
      vulnType: OWASP WSTG
      description: >-
        <p>For its own internal data encryption, outbound communication with
        external components, and inbound authentication, the software has
        hard-coded credentials, such as a password or cryptographic key.
        Hard-coded credentials frequently produce a sizable security gap that
        enables an attacker to get around the authentication settings that the
        software administrator has set up.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: If hard-coded
        passwords are used, it is almost certain that malicious users will gain
        access to the account in question.</p></li><li><p>Access Control:
        Execute Unauthorized Code or Commands: This weakness can lead to the
        exposure of resources or functionality to unintended actors, possibly
        providing attackers with sensitive information or even execute arbitrary
        code.</p></li></ul>
      remediation: '<p>Instead of static API secrets and keys, use session tokens.</p>'
      references:
        - 'https://cwe.mitre.org/data/definitions/798.html'
      customFields: []
  category: Information Gathering
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: >-
        Disclosure of sensitive information in the metadata of files available
        in the application
      vulnType: OWASP WSTG
      description: >-
        <p>The term "metadata" refers to information about a document that is
        primarily descriptive in nature. Information about administration and
        management may also be included.</p><p>The collection of data that
        characterizes or defines a particular piece of information that they are
        linked to is known as metadata. By enhancing the information they are
        linked to, metadata make a computer's interpretation of that information
        much more thorough and enhance document retrieval.</p><p>Through its
        metadata, they have been found to have been used to extract sensitive
        information.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>It is advised that all files available in the application should have
        their metadata removed before being made accessible to the network in
        order to address this vulnerability.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage
        - 'https://cwe.mitre.org/data/definitions/200.html'
        - 'https://capec.mitre.org/data/definitions/118.html'
      customFields: []
  category: Information Gathering
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Disclosure of sensitive information in default content
      vulnType: OWASP WSTG
      description: >-
        <p>This occurs when default files are left open after the installation
        of a service or application. Due to the type of information they
        divulge, such as the type and version of the Web server being used, the
        existence of default files on a Web server poses a threat.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>In order to fix it, all default files that are not required for the
        server's operation must be removed, including the default pages that
        were installed after the server.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework
      customFields: []
  category: Information Gathering
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: Disclosure of internal server paths and directories
      vulnType: OWASP WSTG
      description: >-
        <p>This fact arises whenever the absolute path of a web server or an
        application hosted on it can be determined using any mechanism, such as
        by sending an error message, tracking the sending of parameters,
        etc.</p><p>The server's absolute directory, where the web content is
        stored, can be found.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>Depending on the kind of flaw that led to the disclosure, the best
        course of action will vary. If it was obtained following an error
        message, it is essential to swap out these server error messages with a
        generic message that merely reports an abnormal situation without going
        into further detail regarding its cause. It is necessary to alter the
        application logic so that only relative paths are displayed or not at
        all if that path has been made public by an application
        parameter.</p><p>It is advised to swap out the server error messages for
        a generic message that simply states that something is abnormal without
        going into further detail as to why.</p><p>The configuration file must
        be used in order to accomplish this.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver
        - 'https://cwe.mitre.org/data/definitions/538.html'
        - 'https://www.owasp.org/index.php/Full_Path_Disclosure'
      customFields: []
  category: Information Gathering
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: Directory listing
      vulnType: OWASP WSTG
      description: >-
        <p>Directory listing is a feature that, when enabled, causes web servers
        to list the contents of a directory when no index file (eg index.php or
        index.html) is present. Therefore, if a request is made to a directory
        where directory listing is enabled, and there is no index file, even if
        there are files from a web application, the web server sends a directory
        listing as a response.</p><p>When this happens there is a data leakage
        problem, and attackers can use this data to build other attacks,
        including direct hit vulnerabilities like XSS. This can be useful in
        development environments but is not a good practice for production
        servers.</p><p>The fact that a web server allows listing a directory has
        several security implications:</p><ul><li><p>Allows users to download
        certain files or access certain directories that would not otherwise be
        possible.</p></li><li><p>It can display information that helps an
        attacker find out technical details about the web
        server.</p></li><li><p>Shows all the contents of the directory, without
        discriminating between files that can be public, and those that should
        remain private.</p></li></ul><p>This is often accidental, as a default
        web server displays a directory listing in case the index file is
        invalid or does not exist.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Files or Directories: Exposing the
        contents of a directory can lead to an attacker gaining access to source
        code or providing useful information for the attacker to devise
        exploits, such as creation times of files or any information that may be
        encoded in file names. The directory listing may also compromise private
        or confidential data.</p></li></ul>
      remediation: >-
        <p>Configure properly. The web servers, whether NGINX, Apache, or IIS,
        must be set up so that neither the directory listing nor user navigation
        through the paths is permitted.For instance, on an Apache web server,
        you need to create an.htaccess file in the appropriate application
        directory to disable directory listing. The following lines can be added
        to the httpd.conf file or swapped out for the ones already
        there:</p><p><Directory /{YOUR DIRECTORY}>Options
        FollowSymLinks</Directory></p><p>As you can see from the sample code
        above, in order to safely disable the directory listing feature on an
        Apache web server, you must remove the Indexes and MultiViews
        statements.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver
        - 'https://cwe.mitre.org/data/definitions/548.html'
      customFields: []
  category: Information Gathering
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N'
  details:
    - locale: en
      title: Absence of SSL/TLS encryption
      vulnType: OWASP WSTG
      description: >-
        <p>Instead of the HTTPs protocol, HTTP is used to communicate with the
        web server. To stop an attacker from reading or altering the data sent
        between the client and server, it must be encrypted and protected. The
        most common method for doing this is through HTTPS, which substitutes
        the Secure Socket Layer (SSL) protocol for the Transport Layer Security
        (TLS) protocol. By displaying a trusted digital certificate, the server
        can use TLS to show the client that it is connected to the right
        server.</p><p>Over the years, a large number of cryptographic weaknesses
        have been identified in the SSL and TLS protocols, as well as in the
        ciphers they use. In addition, many of the implementations of these
        protocols have also had serious vulnerabilities. Therefore, it is
        important to check that sites are not only implementing TLS, but that
        they are doing so in a secure manner.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: An attacker may be
        able to decrypt the data using brute force attacks.</p></li></ul>
      remediation: >-
        <p>The web server must be configured in order to support HTTPs.
        Additionally, it is practical to use the HSTS header and switch all HTTP
        requests to the HTTPs protocol.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption
        - 'https://cwe.mitre.org/data/definitions/311.html'
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html
        - >-
          https://wiki.owasp.org/index.php/Testing_for_Weak_SSL/TLS_Ciphers,_Insufficient_Transport_Layer_Protection_(OTG-CRYPST-001)
      customFields: []
  category: SSL/TLS encryption
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N'
  details:
    - locale: en
      title: Mixed content
      vulnType: OWASP WSTG
      description: >-
        <p>Content uploaded using the HTTP protocol is used by the web
        application, which uses the HTTPs protocol. Since any data uploaded via
        HTTP can be intercepted and altered by an attacker, this practice is
        regarded as being insufficient.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>The web server must be configured in order to support HTTPs.
        Additionally, it is practical to use the HSTS header and switch all HTTP
        requests to the HTTPs protocol.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security
        - >-
          https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels
        - 'https://cwe.mitre.org/data/definitions/16.html'
        - 'https://cwe.mitre.org/data/definitions/319.html'
        - 'https://capec.mitre.org/data/definitions/117.html'
      customFields: []
  category: SSL/TLS encryption
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N'
  details:
    - locale: en
      title: Weak Encryption algorithms
      vulnType: OWASP WSTG
      description: >-
        <p>Numerous flaws in the web server's configuration of the SSL/TLS
        service could lead to insecure communication between the client and the
        server.</p><p>The encryption algorithms used by the SSL/TLS service
        running on the server are regarded as being weak or having known
        vulnerabilities.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li><li><p>Access Control: Modify
        Application Data: An attacker can trick a user into performing actions
        that are masked and hidden from the user's view. The impact varies
        widely, depending on the functionality of the underlying application.
        For example, in a social media application, clickjacking could be used
        to trik the user into changing privacy settings.</p></li></ul>
      remediation: >-
        <p>Allow only TLS connections with encryption that is regarded as secure
        in versions 1.2 or 1.3.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption
        - 'https://cwe.mitre.org/data/definitions/310.html'
        - 'https://cwe.mitre.org/data/definitions/327.html'
      customFields: []
  category: SSL/TLS encryption
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N'
  details:
    - locale: en
      title: Use of Obsolete SSL/TLS Protocol Versions
      vulnType: OWASP WSTG
      description: >-
        <p>To stop an attacker from reading or altering the data sent between
        the client and server, it must be encrypted and protected. The most
        popular method for doing this is HTTPS, which substitutes the outdated
        Secure Socket Layer (SSL) protocol with the Transport Layer Security
        (TLS) protocol. By displaying a trusted digital certificate, the server
        can use TLS to show the client that it is connected to the right
        server.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>On the web server, insecure variants of the SSL/TLS protocol must be
        disabled.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security
        - 'https://cwe.mitre.org/data/definitions/326.html'
      customFields: []
  category: SSL/TLS encryption
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N'
  details:
    - locale: en
      title: Secure Client-Initiated Renegotiation
      vulnType: OWASP WSTG
      description: >-
        <p>On the server side compared to the client side, more resources are
        used during SSL/TLS connection negotiation. In the event that the server
        permits the client to request a connection renegotiation, an attacker
        might take advantage of this feature to send out numerous negotiation
        requests, using up server resources and possibly resulting in a denial
        of service (DoS).</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>To address the vulnerability, it is advised to apply the most recent
        patch. It is essential to update to version 0.9.8l or later on systems
        running OpenSSL. On the other hand, it is also possible to disable the
        client's initiation of renegotiation as a mitigation without the need
        for an update.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security
      customFields: []
  category: SSL/TLS encryption
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N'
  details:
    - locale: en
      title: Untrusted Digital Certificate
      vulnType: OWASP WSTG
      description: >-
        <p>The server's digital certificate is insecure and unreliable due to
        some incorrect parameters, which increases the risk of confidentiality
        or dependability to the system.</p>
      observation: '<ul><li><p>Other: Technical Impact: Varies by Context</p></li></ul>'
      remediation: >-
        <p>It is advised to create a digital certificate that browsers recognize
        as reliable (issued by a recognized authority, within the validity
        period and with the common name of the certificate equal to the name of
        the Web site offering the services).</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security
        - >-
          https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption
        - 'https://cwe.mitre.org/data/definitions/16.html'
      customFields: []
  category: SSL/TLS encryption
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N'
  details:
    - locale: en
      title: Improper check for certificate revocation (OCSP Stapling)
      vulnType: OWASP WSTG
      description: >-
        <p>To stop man-in-the-middle attacks on users of your applications, you
        should always be able to quickly recall these certificates whenever your
        certificate authority loses trust.</p>
      observation: >-
        <ul><li><p>Access Control: Gain Privileges or Assume Identity: Trust may
        be assigned to an entity who is not who it claims to
        be.</p></li><li><p>Other: Other: Data from an untrusted (and possibly
        malicious) source may be integrated.</p></li><li><p>Confidentiality:
        Read Application Data: Data may be disclosed to an entity impersonating
        a trusted entity, resulting in information disclosure.</p></li></ul>
      remediation: >-
        <p>The keyset file on the secure signing computer, which is also where
        the signed and unsigned copies of the zone are stored, contains the
        trust anchor for the given zone. The signing procedure includes an
        automatic creation of this file.</p><p>A certificate revocation list
        (CRL) is a list, created and signed by a certificate authority (CA),
        which contains serial numbers of certificates that have been issued by
        that CA and are currently revoked. In addition to the serial number of
        the revoked certifications, the CRL also contains the reason for
        revocation for each certificate and the time the certificate was
        revoked. The serial number for each revoked certificate is kept in the
        CAs database and published in the CRL until the certificate
        expires.</p><p>The CRL entry for the revoked certificate is deleted once
        it has expired, and the CA is then free to delete the certificate from
        its database. The revoked certificate typically remains in the CRL for
        one publication period following the expiration of the certificate. You
        should always have access to this knowledge so that you can act
        quickly.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/299.html'
      customFields: []
  category: SSL/TLS encryption
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: CA certificates
      vulnType: OWASP WSTG
      description: >-
        <p>An organization that issues digital certificates is known as a
        certificate authority (CA) in the field of cryptography. A digital
        certificate attests to the named subject of the certificate's ownership
        of a public key. A CA can occasionally fail and be removed from the
        browser. If your application uses a certificate issued by this CA, this
        will result in untrusted TLS connections.</p><p>An identity certificate
        that is signed by the same entity whose identity it certifies is known
        as a self-signed certificate. This phrase has nothing to do with who or
        what was responsible for carrying out the signing process. A self-signed
        certificate is one that was signed using a private key that belongs to
        the issuer.</p><p>In typical public key infrastructure (PKI)
        arrangements, a digital signature from a certificate authority (CA)
        attests that a particular public key certificate is valid. Each CA has
        one or more root keys; and the certificates associated with those public
        keys are ""trust anchors"" that use a special type of self-signed
        certificates. Establishing trust of the CA root certificate is dependent
        upon procedures beyond checking its digital signature.</p>
      observation: >-
        <ul><li><p>Access Control: Gain Privileges or Assume Identity: Trust may
        be assigned to an entity who is not who it claims to
        be.</p></li><li><p>Other: Other: Data from an untrusted (and possibly
        malicious) source may be integrated.</p></li><li><p>Confidentiality:
        Read Application Data: Data may be disclosed to an entity impersonating
        a trusted entity, resulting in information disclosure.</p></li></ul>
      remediation: >-
        <p>Install a trusted certificate from a reputable root CA on the
        server.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/299.html'
      customFields: []
  category: SSL/TLS encryption
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N'
  details:
    - locale: en
      title: Ensure overall security
      vulnType: OWASP WSTG
      description: >-
        <p>Due to the fact that it receives a lot of attention during
        development, the primary authentication mechanism is frequently a good
        hardened functionality. This is typically not the case, though, for
        secondary authentication mechanisms like password-forget features or
        other alternate routes that could result in successful application
        authentication.</p>
      observation: >-
        <ul><li><p>Other: Other: Exposing critical functionality essentially
        provides an attacker with the privilege level of that functionality. The
        consequences will depend on the associated functionality, but they can
        range from reading or modifying sensitive data, access to administrative
        or other privileged functionality, or possibly even execution of
        arbitrary code.</p></li></ul>
      remediation: >-
        <p>Make sure that all account identity authentication features (like
        update profile, forgotten password, disabled/lost token, help desk, or
        IVR) that could allow you to regain access to your account are at least
        as secure against hacking as the main authentication method.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/306.html'
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Outdated OS version (Known associated vulnerabilities)
      vulnType: OWASP WSTG
      description: >-
        <p>When the operating system version of the server running the
        application can be determined, this problem occurs.</p><p>Any type of
        information pertaining to the technology that underpins the web
        application should always be kept secret in order to hinder or outright
        prevent that once this information is known, targeted attacks against
        this software can be planned.</p>
      observation: >-
        <ul><li><p>Other: Quality Degradation: The attacker is using a function
        that is no updated</p></li></ul>
      remediation: >-
        <p>Updating the operating system to the most recent version is
        advised.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration
        - 'https://cwe.mitre.org/data/definitions/477.html'
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Outdated dependencies and libraries
      vulnType: OWASP WSTG
      description: >-
        <p>Security researchers report and store vulnerabilities they find in
        libraries, modules, frameworks, platforms, or operating systems in the
        CVE list. Given that the list is available to everyone, it provides
        access for any attacker aiming to compromise an outdated web
        application.</p>
      observation: >-
        <ul><li><p>Other: Reduce Maintainability: The attacker could find
        vulnerabilities of outdated components and use those to exploit new
        attack vectors.</p></li></ul>
      remediation: >-
        <p>The main piece of advice is to always use the most recent
        dependencies and libraries that the manufacturer offers. Additionally,
        it is strongly advised to use tools like OWASP dependency check when
        running the application's libraries and modules through the SDLC. This
        program scans imported libraries and modules for known CVEs.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration
        - 'https://cwe.mitre.org/data/definitions/477.html'
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Identification of management panels
      vulnType: OWASP WSTG
      description: >-
        <p>It is not advised for the administration panels or authentication
        panels for various applications to be publicly accessible on the
        internet. Therefore, it would be convenient to restrict access to the
        administration or authentication panels to VPN (Virtual Private Network)
        connections whenever possible.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>It is advised to use VPNs to connect to the organization's resources
        instead of opening administration or authentication panels to the
        Internet.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces
        - 'https://cwe.mitre.org/data/definitions/16.html'
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Server configuration not hardened
      vulnType: OWASP WSTG
      description: >-
        <p>Any part of the application stack, including the network services,
        platform, web server, application server, database, frameworks, custom
        code, pre-installed virtual machines, containers, or storage, is
        susceptible to security misconfiguration.</p><p>Attackers frequently
        gain unauthorized access to certain system data or functionality thanks
        to such flaws. Such flaws can occasionally compromise the entire system.
        The application and data protection requirements determine the business
        impact.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>Implementing secure installation procedures, such as:</p><ul><li><p>A
        repeatable hardening process that makes it fast and easy to deploy
        another environment that is properly locked down. Development, QA, and
        production environments should all be configured identically, with
        different credentials used in each environment. This process should be
        automated to minimize the effort required to setup a new secure
        environment.</p></li><li><p>A minimal platform without any unnecessary
        features, components, documentation, and samples. Remove or do not
        install unused features and frameworks.</p></li><li><p>A task to review
        and update the configurations appropriate to all security notes, updates
        and patches as part of the patch management process. In particular,
        review cloud storage permissions.</p></li><li><p>A segmented application
        architecture that provides effective, secure separation between
        components or tenants, with segmentation, containerization, or cloud
        security groups (ACLs).</p></li><li><p>Sending security directives to
        clients, e.g. Security Headers.</p></li><li><p>An automated process to
        verify the effectiveness of the configurations and settings in all
        environments.</p></li></ul>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces
        - 'https://cwe.mitre.org/data/definitions/16.html'
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Sensitive information in accessible logs
      vulnType: OWASP WSTG
      description: >-
        <p>A log is a record of the activities taking place within the networks
        and systems of an organization. Logs are made up of log entries, and
        each entry in a log contains details about a specific event that has
        taken place in a system or network.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>It is recommended to keep logs in a separate location and not on the
        web server itself. This also facilitates the aggregation of logs from
        different sources that refer to the same application (such as those from
        a web server farm) and also facilitates log analysis (which can be CPU
        intensive) without affecting the server itself. </p><p>It is also
        recommended to implement a log rotation ensuring
        that:</p><ul><li><p>Logs are kept for the time defined in the security
        policy, no more and no less.</p></li><li><p>Logs are compressed once
        rotated (this is a convenience, as it will mean that more logs will be
        stored for the same available disk space).</p></li><li><p>The file
        system permissions of rotated log files are the same (or stricter) than
        those of the log files themselves. For example, web servers will need to
        write to the logs they use, but they do not actually need to write to
        the rotated logs, which means that the file permissions can be changed
        at rotation time to prevent the web server process from modifying
        them.</p></li><li><p>Some servers may rotate logs when they reach a
        certain size. If this happens, make sure that an attacker cannot force
        log rotation to hide his or her trail.</p></li></ul><p>Finally,
        implement access control so that the event log information is never
        visible to end users and analyze the logs periodically, for example
        based on error messages:</p><ul><li><p>Error messages 40x (not found). A
        large number of them coming from the same source could indicate that a
        CGI scanning tool is being used against the web
        server.</p></li><li><p>50x (server error) messages. These can be an
        indication that an attacker is abusing parts of the application that
        fail unexpectedly. For example, the early stages of a SQL injection
        attack will produce these error messages when the SQL query is not well
        constructed and its execution fails in the back end
        database.</p></li></ul><p>Statistics or log analysis should not be
        generated, or stored, on the same server that produces the logs.
        Otherwise, an attacker could, through a web server vulnerability or
        improper configuration, access them and retrieve information similar to
        that which would be revealed by the log files themselves.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/02-Test_Application_Platform_Configuration
        - 'https://cwe.mitre.org/data/definitions/532.html'
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Backup file identification
      vulnType: OWASP WSTG
      description: >-
        <p>Files that are unrelated to the application but are created as a
        result of editing application files, after making backups while in use,
        or by leaving outdated or unreferenced files in the web tree are a
        significant source of vulnerability. On-the-fly editing and other
        administrative tasks on production web servers may unintentionally leave
        backup copies that were created automatically by the editor as they were
        being edited or by the administrator as they were compressing a group of
        files to create a backup.</p><p>Editing files may leave automatic backup
        copies of type .bak, .sav, .old, or ~. The web server does not have by
        default defined an interpretation for this type of files, so the result
        is usually either to display their contents or to proceed to download
        them.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>To remove the risk, it is necessary to delete the discovered backup
        file. It is necessary to routinely search the server for files with the
        extensions.bak,.bac,.sav,.old,.BAK,.BAC,.SAV,.OLD,.tar,.gz, and.tgz and
        remove them from the server in order to fix this type of defect
        generally.In order to avoid having the file downloaded or the contents
        of the file displayed by the browser, it is also advised to configure
        the web server to be able to understand these extensions.If the document
        root is on a file system that makes use of this technology, file system
        snapshots shouldn't be accessible via the web. Configure your web server
        to deny access to such directories, for example, in Apache a location
        directive like this should be used:</p><p><Location ~ ".snapshot">Order
        deny,allowDeny from all</Location></p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information
        - 'https://cwe.mitre.org/data/definitions/200.html'
        - 'https://cwe.mitre.org/data/definitions/530.html'
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Insecure HTTP methods enabled
      vulnType: OWASP WSTG
      description: >-
        <p>A variety of techniques are available through HTTP to carry out
        operations on the web server (the HTTP 1.1 standard refers to them as
        methods, but they are also commonly described as verbs). Although GET
        and POST are by far the most popular ways to access data from a web
        server, HTTP also supports a number of additional, less well-known ways.
        If the web server is configured incorrectly, some of these could be used
        maliciously.</p>
      observation: '<ul><li><p>Other: Technical Impact: Varies by Context</p></li></ul>'
      remediation: >-
        <p>The methods that were determined to be superfluous in the server
        configuration must be deactivated.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods
        - 'https://cwe.mitre.org/data/definitions/16.html'
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Lack of security HTTP headers
      vulnType: OWASP WSTG
      description: >-
        <p>Security headers are implemented as HTTP response headers that limit
        the potential for client-side vulnerability exploitation by instructing
        the browser how to behave in specific circumstances. The full security
        configuration needed to establish a secure connection with the client is
        not present in server responses.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: Access control
        checks for specific user data or functionality can be
        bypassed.</p></li></ul>
      remediation: >-
        <p>Implementation of all security HTTP headers in server responses is
        recommended. The recommended values
        are:</p><ul><li><p>Strict-Transport-Security (HSTS): max-age=31536000;
        includeSubDomains.</p></li><li><p>Content-Security-Policy: default-src
        https:
        'self'.</p></li><li><p>X-XSS-Protection:1</p></li><li><p>X-Frame-Options:
        'DENY' (if not possible,
        'SAMEORIGIN').</p></li><li><p>X-Content-Type-Options:
        nosniff.</p></li><li><p>Cache-Control:
        no-store.</p></li><li><p>Referrer-Policy: 'no-referrer' (or
        'same-origin').</p></li><li><p>Permissions-Policy: Define the minimum
        allowed functions and deny the others.</p></li></ul>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy
        - 'https://cwe.mitre.org/data/definitions/16.html'
        - 'https://cwe.mitre.org/data/definitions/693.html'
        - 'https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project'
        - >-
          https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Absence of HSTS (HTTP Strict Transport Security) header
      vulnType: OWASP WSTG
      description: >-
        <p>The "strict transport security" (HSTS) HTTP header is used to thwart
        attempts to intercept communications, cookies, etc. This mechanism
        allows a web server to declare that only secure HTTP connections—HTTP
        over TLS/SSL—are permitted for browser communication.</p>
      observation: >-
        <ul><li><p>Access Control: Gain Privileges or Assume Identity: An
        attacker could gain unauthorized access to the system by retrieving
        legitimate user's authentication credentials</p></li></ul>
      remediation: >-
        <p>Define the HTTP Strict-Transport-Security header, which instructs the
        client browser to automatically redirect requests received via the HTTP
        protocol to the HTTPS secure protocol rather than using or forcing an
        insecure protocol.</p><p><Strict-Transport-Security: max-age=60000;
        includeSubDomains></p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy
        - 'https://cwe.mitre.org/data/definitions/16.html'
        - 'https://cwe.mitre.org/data/definitions/693.html'
        - 'https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project'
        - >-
          https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Absence of X-Frame-Options header
      vulnType: OWASP WSTG
      description: >-
        <p>A user is tricked into using functionality on a hidden website by
        clicking on some other content on a bogus website using the Clickjacking
        vulnerability. The method is based on embedding a hidden button or link,
        for instance, within an iframe, on an actionable, visible web page (or
        pages). The user's anticipated decoy web page's content is overlaid by
        the iframe.</p>
      observation: >-
        <ul><li><p>Access Control: Gain Privileges or Assume Identity: An
        attacker could gain privileges by modifying or reading critical data
        directly, or by accessing insufficiently-protected, privileged
        functionality.</p></li></ul>
      remediation: >-
        <p>The X-Frame-Options header is supported by most contemporary web
        browsers. It is advised to set the web server up so that this header is
        enabled for all web pages. The SAMEORIGIN option should be used if the
        page is anticipated to contain only code from the server.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy
        - 'https://cwe.mitre.org/data/definitions/16.html'
        - 'https://cwe.mitre.org/data/definitions/693.html'
        - 'https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project'
        - >-
          https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Absence of Content Security Policy (CSP) header
      vulnType: OWASP WSTG
      description: >-
        <p>An HTTP response header that increases security is called
        Content-Security-Policy. With the help of this header, you can limit the
        resources that the browser can load, including JavaScript, CSS, and
        more.</p>
      observation: >-
        <ul><li><p>Access Control: Gain Privileges or Assume Identity: An
        attacker could gain privileges by modifying or reading critical data
        directly, or by accessing insufficiently-protected, privileged
        functionality.</p></li><li><p>Access Control: Bypass Protection
        Mechanism: Access control checks for specific user data or functionality
        can be bypassed.</p></li><li><p>Confidentiality: Read Application Data:
        Data may be disclosed to an entity impersonating a trusted entity,
        resulting in information disclosure.</p></li><li><p>Access Control:
        Modify Application Data: An attacker can trick a user into performing
        actions that are masked and hidden from the user's view. The impact
        varies widely, depending on the functionality of the underlying
        application. For example, in a social media application, clickjacking
        could be used to trik the user into changing privacy
        settings.</p></li></ul>
      remediation: "<p>By including the Content-Security-Policy header in the HTTP response headers, which tells the browser to apply the desired policies, you can enable CSP on a website.\_</p><p>Content-Security-Policy: script-src https://example.com:*;&gt;</p>"
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy
        - 'https://cwe.mitre.org/data/definitions/16.html'
        - 'https://cwe.mitre.org/data/definitions/693.html'
        - 'https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project'
        - >-
          https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Absence of Cache Control header
      vulnType: OWASP WSTG
      description: >-
        <p>Directives for caching mechanisms are specified in the HTTP
        Cache-Control header.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: Access control
        checks for specific user data or functionality can be
        bypassed.</p></li></ul>
      remediation: >-
        <p>Create a Cache-Control header on your web server with the necessary
        instructions. The Pragma header value should be no-cache and the
        Cache-Control value should be no-cache, no-store if the page contains
        sensitive information.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy
        - 'https://cwe.mitre.org/data/definitions/16.html'
        - 'https://cwe.mitre.org/data/definitions/693.html'
        - 'https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project'
        - >-
          https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Absence of Pragma header
      vulnType: OWASP WSTG
      description: >-
        <p>The Pragma header is an implementation-specific header that can
        impact the request-response chain in a number of ways. When the HTTP/1.1
        Cache-Control header is not yet present, it is used for backward
        compatibility with earlier HTTP/1.0 cache versions.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: Access control
        checks for specific user data or functionality can be
        bypassed.</p></li></ul>
      remediation: >-
        <p>The Cache-Control header is the ideal way to specify a caching policy
        when at least HTTP/1.1 is used in server responses. The header for
        Pragma can be removed.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy
        - 'https://cwe.mitre.org/data/definitions/16.html'
        - 'https://cwe.mitre.org/data/definitions/693.html'
        - 'https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project'
        - >-
          https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Absence of Feature Policy header
      vulnType: OWASP WSTG
      description: >-
        <p>Web developers can selectively enable, disable, and alter the
        behavior of specific APIs and web features in the browser by using the
        header Feature-Policy. Note that this header has been divided into a
        Permissions-Policy and a Document-Policy, and that it will be regarded
        as deprecated once all impacted features have been eliminated from the
        Feature-Policy.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: Access control
        checks for specific user data or functionality can be
        bypassed.</p></li></ul>
      remediation: "<p>Below is an example of how to add the Feature-Policy header to web server responses:\_</p><p><Feature-Policy: vibrate 'self'; usermedia *; sync-xhr 'self' https://example.com></p>"
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy
        - 'https://cwe.mitre.org/data/definitions/16.html'
        - 'https://cwe.mitre.org/data/definitions/693.html'
        - 'https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project'
        - >-
          https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Absence of Referrer Policy header
      vulnType: OWASP WSTG
      description: >-
        <p>Requests made from a document, and for navigations away from that
        document are associated with a Referer header. While the header can be
        suppressed for links with the noreferrer link type, authors might wish
        to control the Referer header more directly for a number of
        reasons:</p><ul><li><p>Privacy: a social networking site has a profile
        page for each of its users, and users add hyperlinks from their profile
        page to their favorite bands.The social networking site might not wish
        to leak the user’s profile URL to the band web sites when other users
        follow those hyperlinks (because the profile URLs might reveal the
        identity of the owner of the profile).Some social networking sites,
        however, might wish to inform the band web sites that the links
        originated from the social networking site but not reveal which specific
        user’s profile contained the links.</p></li><li><p>Security: a web
        application uses HTTPS and a URL based session identifier. The web
        application might wish to link to HTTPS resources on other web sites
        without leaking the user’s session identifier in the URL. Alternatively,
        a web application may use URLs which themselves grant some capability.
        Controlling the referrer can help prevent these capability URLs from
        leaking via referrer headers.</p></li></ul><p>Note that there are other
        ways for capability URLs to leak, and controlling the referrer is not
        enough to control all those potential leaks.</p><ul><li><p>Trackback: a
        blog hosted over HTTPS might wish to link to a blog hosted over HTTP and
        receive trackback links.</p></li></ul>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: Access control
        checks for specific user data or functionality can be
        bypassed.</p></li></ul>
      remediation: >-
        <p>Referrer Policy How much referrer data, which is transmitted via the
        Referer header, should be included with requests is controlled by the
        HTTP header. The Referer header has a lot of good intentions, but it
        also has unfavorable effects on user security and privacy. The following
        values ought to be configured in the policy:</p><p>Referrer-Policy:
        no-referrerReferrer-Policy: same-origin</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/116.html'
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Absence of X-Content-Type-Options header
      vulnType: OWASP WSTG
      description: >-
        <p>In order to safeguard against Reflective File Download and other
        types of injections, certain API callbacks must have security headers
        that are properly configured.</p><p>Additionally, confirm whether user
        input is reflected in the API response and whether it is dynamic. If so,
        in order to stop XSS and same origin method execution attacks, you must
        validate and encode the input.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: Access control
        checks for specific user data or functionality can be
        bypassed.</p></li></ul>
      remediation: >-
        <p>Sanitize your API's input; escaping is insufficient in this case;
        they should only permit alphanumeric. Make sure that
        X-Content-Type-Options are present in every API response. to stop the
        browser from interpreting files as something other than what the content
        type has declared, use nosniff (this helps prevent XSS if the page is
        interpreted as html or js).</p><p>Add</p><p>Content-Disposition:
        attachment; filename="filename.extension"</p><p>with extension
        corresponding the file extension and contenttype, on APIs that are not
        going to be rendered</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/116.html'
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Anti-Caching header (Server-side)
      vulnType: OWASP WSTG
      description: >-
        <p>Anti-caching headers prevents sensitive data from being stored on
        reverse proxies, load balancers and application cache modules. By not
        implementing this headers correctly, sensitive information may be stored
        within the cache of these modules and may be exposed.Let's see two
        examples of improperly configured headers:Cache-Control:
        max-age=315360000, public: the response may be stored by any
        cacheCache-Control: private: the response may be stored by a browser's
        cache</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>This vulnerability will be reduced if the anti-caching headers are
        properly implemented. An appropriately used anti-caching header will
        resemble:</p><p>Cache-Control: no-storePragma: no-cache (only for
        backwards compatibility with HTTP/1.0 clients)</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/524.html'
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Unsafe Content-Type header within the response
      vulnType: OWASP WSTG
      description: >-
        <p>Setting the proper content headers is crucial for strengthening the
        security of your applications because it lowers your exposure to
        drive-by download attacks and websites hosting user-uploaded content
        that, due to clever naming, MS Internet Explorer may mistake for
        executable or dynamic HTML files, creating security flaws.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: Access control
        checks for specific user data or functionality can be
        bypassed.</p></li></ul>
      remediation: >-
        <p>An example of a safe Content-type header would
        be:</p><p>Content-Type: text/html; charset=UTF8Content-Type:
        application/json;</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/173.html'
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: Excessive file and directory permissions
      vulnType: OWASP WSTG
      description: >-
        <p>Giving a resource a permission setting that allows access to a larger
        group of users than necessary runs the risk of exposing sensitive data
        or allowing unauthorized individuals to change the resource. When the
        resource is connected to program configuration, execution, or sensitive
        user data, this is especially risky.</p><p>A clear example is an
        execution file that may be executed by unauthorized users. Another
        example is that account information or the value of a token to access an
        API (increasingly common in today's web services or microservices) may
        be stored in a configuration file whose permissions are set by default
        to be readable by everyone from the installation. This sensitive data
        can be exposed by malicious internal users or by a remote attacker who
        has compromised the service with other vulnerabilities, but has low
        privileges.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The injected code
        could access restricted data / files.</p></li><li><p>Confidentiality:
        Read Files or Directories: An attacker could read sensitive data, either
        by reading the data directly from a data store that is not properly
        restricted, or by accessing insufficiently-protected, privileged
        functionality to read the data.</p></li></ul>
      remediation: >-
        <p>Setting file and directory permissions correctly will help to address
        this vulnerability by preventing unauthorized users from needlessly
        accessing vital resources.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission
        - 'https://cwe.mitre.org/data/definitions/732.html'
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L'
  details:
    - locale: en
      title: Allocation of Resources Without Limits or Throttling
      vulnType: OWASP WSTG
      description: >-
        <p>In contravention of the intended security policy for that actor, the
        software allocates a reusable resource or set of resources on the
        actor's behalf without imposing any limitations on the size or quantity
        of resources that can be allocated.</p>
      observation: >-
        <ul><li><p>Availability: DoS: Resource Consumption (Other): When
        allocating resources without limits, an attacker could prevent other
        systems, applications, or processes from accessing the same type of
        resource.</p></li></ul>
      remediation: >-
        <p>Requirements</p><ul><li><p>Clearly specify the minimum and maximum
        expectations for capabilities, and dictate which behaviours are
        acceptable when resource allocation reaches
        limits.</p></li></ul><p>Architecture and Design- Limit the amount of
        resources that are accessible to unprivileged users. Set per-user limits
        for resources. Allow the system administrator to define these limits. Be
        careful to avoid 410.- Design throttling mechanisms into the system
        architecture. The best protection is to limit the amount of resources
        that an unauthorized user can cause to be expended. A strong
        authentication and access control model will help prevent such attacks
        from occurring in the first place, and it will help the administrator to
        identify who is committing the abuse. The login application should be
        protected against DoS attacks as much as possible. Limiting the database
        access, perhaps by caching result sets, can help minimize the resources
        expended. To further limit the potential for a DoS attack, consider
        tracking the rate of requests received from users and blocking requests
        that exceed a defined rate threshold.- Ensure that protocols have
        specific limits of scale placed on them.- For any security checks that
        are performed on the client side, ensure that these checks are
        duplicated on the server side, in order to avoid 602: Client-Side
        Enforcement of Server-Side Security. Attackers can bypass the
        client-side checks by modifying values after the checks have been
        performed, or by changing the client to remove the client-side checks
        entirely. Then, these modified values would be submitted to the
        server.</p><p>Implementation- Assume all input is malicious. Use an
        "accept known good" input validation strategy, i.e., use a list of
        acceptable inputs that strictly conform to specifications. Reject any
        input that does not strictly conform to specifications, or transform it
        into something that does.- When performing input validation, consider
        all potentially relevant properties, including length, type of input,
        the full range of acceptable values, missing or extra inputs, syntax,
        consistency across related fields, and conformance to business rules. As
        an example of business rule logic, "boat" may be syntactically valid
        because it only contains alphanumeric characters, but it is not valid if
        the input is only expected to contain colours such as "red" or "blue."-
        Do not rely exclusively on looking for malicious or malformed inputs.
        This is likely to miss at least one undesirable input, especially if the
        code's environment changes. This can give attackers enough room to
        bypass the intended validation. However, blacklists can be useful for
        detecting potential attacks or determining which inputs are so malformed
        that they should be rejected outright.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/770.html'
      customFields: []
  category: Configuration and Deploy Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: Account (users) enumeration
      vulnType: OWASP WSTG
      description: >-
        <p>Due to configuration errors or intentional design choices, web
        applications frequently make it clear whether a username already exists
        on the system. For instance, when incorrect credentials are sent, the
        resulting message can sometimes indicate whether the username already
        exists in the system or whether the password was entered incorrectly. An
        attacker can use the information they have collected to compile a user
        list for the system. By employing a brute force attack or a default
        username and password attack, for instance, this information can be used
        to attack the web application.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li><li><p>Access Control: Bypass
        Protection Mechanism: Access control checks for specific user data or
        functionality can be bypassed.</p></li></ul>
      remediation: >-
        <p>There are several recommendations to avoid this type of
        vulnerabilities. The best solution is to apply some or all of them as
        appropriate:</p><ul><li><p>Avoid using any public data (alias, email,
        etc.) as username to authenticate in the application. This data should
        be private and only known by the user.</p></li><li><p>During the
        development phase, optimize the user authentication process to avoid
        "high" response times during authentication.</p></li><li><p>Do not use
        informative messages that aid in guessing the existence of user
        names.</p></li><li><p>Avoid different behaviors in the web application
        depending on the existence of usernames.</p></li><li><p>Delegate the
        generation of usernames to the web application. The generator used
        should be completely random and never sequential since it would be
        predictable.</p></li></ul>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account
        - 'https://cwe.mitre.org/data/definitions/203.html'
        - 'https://cwe.mitre.org/data/definitions/204.html'
        - 'https://cwe.mitre.org/data/definitions/200.html'
      customFields: []
  category: Identity Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: Insecure user registration process
      vulnType: OWASP WSTG
      description: >-
        <p>The provision of system access to users is automated (or partially
        automated) by some web applications' user registration process.
        Depending on the system's security requirements, the identity
        requirements for access can range from positive identification to none
        at all. Due to the size of their user bases, many public applications
        completely automate the registration and provisioning processes. A
        hacker could use this vulnerability to control other user accounts, for
        example, if best practices are not followed when automating the
        registration process.</p>
      observation: >-
        <ul><li><p>Access Control: Execute Unauthorized Code or Commands: This
        weakness can lead to the exposure of resources or functionality to
        unintended actors, possibly providing attackers with sensitive
        information or even execute arbitrary code.</p></li></ul>
      remediation: >-
        <p>It is advised to put in place identification and verification
        requirements that are in line with the security requirements of the data
        that the credentials are protecting.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/02-Test_User_Registration_Process
        - 'https://cwe.mitre.org/data/definitions/287.html'
      customFields: []
  category: Identity Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N'
  details:
    - locale: en
      title: The login functionality should always generate a new session id
      vulnType: OWASP WSTG
      description: >-
        <p>A new session cookie should be created by the application each time a
        user is successfully authenticated.</p>
      observation: >-
        <ul><li><p>Access Control: Gain Privileges or Assume Identity: The
        application does not invalidate any existing session identifier and
        gives an attacker the opportunity to steal authenticated
        sessions.</p></li></ul>
      remediation: >-
        <p>After a successful login, the login functionality should always
        create (and use) a new session ID. This is done to stop an attacker from
        attacking your users using a session fixation attack.Some frameworks,
        such as.net applications, do not let you change the session ID when you
        log in. You could add an extra random cookie with a strong token on
        login whenever this issue arises and store the value in a session
        variable.</p><p>Now that authentication depends on more than just the
        session ID and the random cookie cannot be predicted or fixed by an
        attacker, you can compare the cookie value with the session variable to
        prevent session fixation.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/384.html'
      customFields: []
  category: Identity Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: Weaknesses in password policy
      vulnType: OWASP WSTG
      description: >-
        <p>All of the security features incorporated into the technological
        infrastructure can be exposed by a lax password policy. Without
        utilizing any other vulnerabilities, guessing a password would grant
        access to legitimate systems. It frequently occurs in the domains of
        large organizations, where the administrator's users with higher
        privileges are completely forgotten in favor of the regular users with
        restricted access to which a strict password policy is applied. In other
        words, in contrast to a user with limited privileges, an administrator
        user can use a password that is deemed weak. To make it simple for new
        users to connect, many services come with default usernames and
        passwords at first. The crucial step of changing this information is
        frequently overlooked, leaving the system accessible using what are
        known as the default credentials.</p>
      observation: >-
        <ul><li><p>Access Control: Gain Privileges or Assume Identity: As
        passwords age, the probability that they are compromised
        grows.</p></li><li><p>Access Control: Gain Privileges or Assume
        Identity: An attacker could easily guess user passwords and gain access
        user accounts.</p></li></ul>
      remediation: "<p>Establish a strong password policy that requires the user to:</p><ul><li><p>A minimum password length of 8 charactersUse all character types, including capital and lowercase letters, numbers, and special characters.</p></li><li><p>Making use of an effective encryption algorithm like AES-128 or SHA-256</p></li><li><p>Check to see if the blank password is prohibited.</p></li><li><p>Steer clear of using the user identifier (or any subset of it) as a password.-\_Regularly force the change.</p></li><li><p>Prevent users from using previous passwords.</p></li></ul>"
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy
        - 'https://cwe.mitre.org/data/definitions/521.html'
      customFields: []
  category: Authentication
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N'
  details:
    - locale: en
      title: No password rotation policy
      vulnType: OWASP WSTG
      description: >-
        <p>Some policies require users to change passwords periodically, often
        every 90 or 180 days.</p><p>The benefit of password expiration, however,
        is debatable. Systems that implement such policies sometimes prevent
        users from picking a password too close to a previous
        selection.</p><p>This policy can often backfire. Some users find it hard
        to devise "good" passwords that are also easy to remember, so if people
        are required to choose many passwords because they have to change them
        often, they end up using much weaker passwords; the policy also
        encourages users to write passwords down. Also, if the policy prevents a
        user from repeating a recent password, this requires that there is a
        database in existence of everyone's recent passwords (or their hashes)
        instead of having the old ones erased from memory. Finally, users may
        change their password repeatedly within a few minutes, and then change
        back to the one they really want to use, circumventing the password
        change policy altogether.</p>
      observation: >-
        <ul><li><p>Access Control: Gain Privileges or Assume Identity: As
        passwords age, the probability that they are compromised
        grows.</p></li></ul>
      remediation: >-
        <p>Only when the application's enforced password strength is no longer
        strong enough to withstand brute force attacks due to an increase in
        computing power can users be made to update their passwords.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/263.html'
      customFields: []
  category: Authentication
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N'
  details:
    - locale: en
      title: Permit password change
      vulnType: OWASP WSTG
      description: >-
        <p>Users ought to have the option of changing their password whenever
        necessary. Consider, for instance, the situation where they frequently
        use the same password across different applications. Users must
        immediately update their login information in each application they have
        registered for if their password is compromised. Therefore, there is a
        chance that a user's account could be compromised if the application
        does not give him access to a password update feature.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: Access control
        checks for specific user data or functionality can be
        bypassed.</p></li><li><p>Access Control: Gain Privileges or Assume
        Identity: As passwords age, the probability that they are compromised
        grows.</p></li></ul>
      remediation: >-
        <p>Applications should offer a feature that enables the user to modify
        their own password.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/620.html'
      customFields: []
  category: Authentication
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Verify breached passwords
      vulnType: OWASP WSTG
      description: >-
        <p>Over the years, breaches have resulted in the release of numerous
        databases containing stolen credentials. Users are subject to dictionary
        attacks if they select compromised passwords.</p>
      observation: >-
        <ul><li><p>Access Control: Gain Privileges or Assume Identity: An
        attacker could easily guess user passwords and gain access user
        accounts.</p></li></ul>
      remediation: >-
        <p>Check that passwords entered during account creation, login, and
        password changes are compared to a list of passwords that have been
        compromised. The application must require the user to re-enter a
        password that hasn't already been compromised if the password they chose
        has already been compromised.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/521.html'
      customFields: []
  category: Authentication
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: Secrets should be secure random generated
      vulnType: OWASP WSTG
      description: >-
        <p>Passwords, API tokens, and secret keys must be generated dynamically.
        These tokens can become predictable and be used by attackers to
        compromise user accounts whenever they are not generated
        dynamically.</p>
      observation: >-
        <ul><li><p>Other: Other: When a protection mechanism relies on random
        values to restrict access to a sensitive resource, such as a session ID
        or a seed for generating a cryptographic key, then the resource being
        protected could be accessed by guessing the ID or
        key</p></li><li><p>Other: Other: If software relies on unique,
        unguessable IDs to identify a resource, an attacker might be able to
        guess an ID for a resource that is owned by another user. The attacker
        could then read the resource, or pre-create a resource with the same ID
        to prevent the legitimate program from properly sending the resource to
        the intended user. For example, a product might maintain session
        information in a file whose name is based on a username. An attacker
        could pre-create this file for a victim user, then set the permissions
        so that the application cannot generate the session for the victim,
        preventing the victim from using the application.</p></li><li><p>Access
        Control: Gain Privileges or Assume Identity: When an authorization or
        authentication mechanism relies on random values to restrict access to
        restricted functionality, such as a session ID or a seed for generating
        a cryptographic key, then an attacker may access the restricted
        functionality by guessing the ID or key.</p></li></ul>
      remediation: >-
        <p>These values must be dynamically generated and only valid once when
        it comes to API tokens and secret keys.The secret token should be
        cryptographically "random secure," have at least 120 bits of effective
        entropy, be salted with a special and randomly generated 32-bit value,
        and hashed using a recognized hashing (one-way) function.</p><p>Instead
        of giving a user a password that is dynamically generated, passwords
        should be created by the user themselves. In order to activate his
        account and create a password of his own, the user should be given a
        one-time link with a cryptographically random token via email or
        SMS.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/330.html'
      customFields: []
  category: Authentication
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Weaknesses in protection against brute force attacks
      vulnType: OWASP WSTG
      description: >-
        <p>A common threat web developers face is a password-guessing attack
        known as a brute force attack. A brute-force attack is an attempt to
        discover a password by systematically trying every possible combination
        of letters, numbers, and symbols until you discover the one correct
        combination that works. If your web site requires user authentication,
        you are a good target for a brute-force attack. </p><p>An attacker can
        always discover a password through a brute-force attack, but the
        downside is that it could take years to find it. Depending on the
        password's length and complexity, there could be trillions of possible
        combinations. To speed things up a bit, a brute-force attack could start
        with dictionary words or slightly modified dictionary words because most
        people will use those rather than a completely random password. These
        attacks are called dictionary attacks or hybrid brute-force attacks.
        Brute-force attacks put user accounts at risk and flood your site with
        unnecessary traffic.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: When
        authorization, authentication, or another protection mechanism relies on
        CAPTCHA entities to ensure that only human actors can access certain
        functionality, then an automated attacker such as a bot may access the
        restricted functionality by guessing the
        CAPTCHA.</p></li><li><p>Availability: DoS: Resource Consumption (Other):
        Users could be locked out of accounts.</p></li><li><p>Access Control:
        Bypass Protection Mechanism: An attacker could perform an arbitrary
        number of authentication attempts using different passwords, and
        eventually gain access to the targeted account.</p></li></ul>
      remediation: >-
        <p>Create a sufficient defense system to stop attacks. Verify that the
        combination of numbers and letters in a captcha system is difficult to
        predict, and do not provide the answer in any of the responses that are
        sent to the user's browser.</p><p>Utilize account unlocking procedures
        in accordance with the level of risk. From the riskiest to the
        safest:</p><ul><li><p>Blocking and unblocking based on
        time.</p></li><li><p>Unblocking using self-service (sending unblocking
        email to registered email address).</p></li><li><p>Administrator
        unlocking by hand.</p></li><li><p>Positive user identification for
        manual administrator unlocking.</p></li><li><p>Making use of a
        self-service mechanism: As previously mentioned, this self-service
        mechanism needs to be sufficiently secure to prevent the attacker from
        being able to unlock the accounts on his own.</p></li></ul>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism
        - 'https://cwe.mitre.org/data/definitions/804.html'
        - 'https://cwe.mitre.org/data/definitions/645.html'
        - 'https://cwe.mitre.org/data/definitions/1216.html'
        - 'https://cwe.mitre.org/data/definitions/307.html'
      customFields: []
  category: Authentication
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Weakness in the second factor authentication mechanism (2FA).
      vulnType: OWASP WSTG
      description: >-
        <p>A zero trust security model's two-factor authentication mechanism
        (2FA) is a key component. You must confirm that users attempting to
        access sensitive data are who they claim to be in order to protect it.
        Security threats like phishing, brute force attacks, credential
        exploitation, etc. that target user passwords and accounts can be
        successfully defended against with 2FA.</p><p>Let's say you complete
        primary authentication in an application with a username and password.
        The Internet is used to transmit that information (primary network). It
        would be preferable to finish two-factor authentication using a
        different (out-of-band) channel. Out-of-band authentication includes
        things like approving a push notification sent over your mobile
        network.</p><p>Despite being highly recommended, this approach can be
        harmful if not used properly.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: The application
        does not use or incorrectly uses a protection mechanism that provides
        sufficient defense against directed attacks against the
        product.</p></li></ul>
      remediation: >-
        <p>While it is best to omit SMS as 2FA only option, this does not
        address the reason for adding 2FA in the first place. To avoid brute
        force and other attacks targeting password authentication, some form of
        2FA is needed. Some of the alternatives to 2FA
        SMS:</p><ul><li><p>Hardware authentication. Hardware authentication
        relies on a dedicated physical device to grant access. In addition to
        the password, users have to enter a random code generated by the device.
        Logins will fail without the code. Hardware authentication vendors
        include RSA SecurID and Thales SafeNet.</p></li><li><p>Software
        authentication. Software authentication essentially follows the same
        principle as hardware authentication. But instead of requiring a
        physical device, token codes are generated with a mobile application.
        The most popular authentication application is Google Authenticator, but
        there are many options. For example, RSA now offers its SecurID
        authenticator as an app.</p></li><li><p>IP-based authentication. This
        method checks the user's IP address when logging in. You can block
        access to specific IP addresses suspected of being malicious, or simply
        allow only logins from known IP addresses and ranges. IP-based
        authentication can be used in conjunction with other ways to add another
        layer of protection.</p></li></ul>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism
        - 'https://cwe.mitre.org/data/definitions/693.html'
      customFields: []
  category: Authentication
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: Default usernames and passwords
      vulnType: OWASP WSTG
      description: >-
        <p>The built-in administrative account has default passwords on a lot of
        hardware and web applications. Although they may occasionally be
        generated at random, they are frequently static, making it simple for an
        attacker to guess or obtain them.</p><p>Additionally, predefined
        passwords might be assigned to new users when they are created in
        applications. These may be generated automatically by the application or
        manually by staff. The passwords in both situations are susceptible to
        guessing attacks if they are not generated securely.</p>
      observation: >-
        <ul><li><p>Access Control: Gain Privileges or Assume Identity: An
        attacker could easily guess user passwords and gain access user
        accounts.</p></li></ul>
      remediation: >-
        <p>The design of a product should require compliance with an appropriate
        password policy. The specific requirements for passwords highly depend
        on contextual factors, but it is recommended that they contain the
        following attributes:</p><ol><li><p>Enforcement of a minimum and maximum
        length</p></li><li><p>Restrictions against password
        reuse.</p></li><li><p>Restrictions against the use of common
        passwords.</p></li><li><p>Restrictions against the use of contextual
        strings in the password (e.g., user ID, application
        name).</p></li></ol><p>Depending on the threat model, the password
        policy may include several additional attributes.</p><p>Complex
        passwords requiring mixed character sets (alphabetic, numeric, special,
        upper and lower case):</p><ul><li><p>Increasing the range of characters
        makes the password more difficult to crack and may be appropriate for
        systems that rely on single-factor
        authentication.</p></li><li><p>Unfortunately, a complex password can be
        difficult to memorize, which encourages the user to select a short
        password or to mismanage the password (write it
        down).</p></li><li><p>Another disadvantage of this approach is that it
        often does not result in a significant increase in overall password
        complexity due to people's predictable use of various
        symbols.</p></li></ul><p>Extensive minimum
        length:</p><ol><li><p>Increasing the number of characters makes the
        password more difficult to crack and may be appropriate for systems that
        rely on single-factor authentication.</p></li><li><p>A disadvantage of
        this approach is that selecting a good passphrase is not easy and poor
        passwords can still be generated. Some prompting may be needed to
        encourage long and unpredictable passwords.</p></li></ol><p>Randomly
        generated passwords:</p><ol><li><p>Generating a password for the user
        can help ensure that length and complexity requirements are met, and may
        result in strong passwords being used.</p></li><li><p>A disadvantage of
        this approach is that the resulting password or key may be too difficult
        to memorize, which encourages writing them
        down.</p></li></ol><p>Password expiration:</p><ol><li><p>Requiring a
        periodic password change can reduce the window of time an attacker has
        to crack a password, while limiting the damage caused by exposing the
        password elsewhere.</p></li><li><p>Password expiration can be a good
        mitigation technique when long and complex passwords are not
        desired.</p></li></ol>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials
        - 'https://cwe.mitre.org/data/definitions/521.html'
      customFields: []
  category: Authentication
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: Login functionality bypass
      vulnType: OWASP WSTG
      description: >-
        <p>In computer security, authentication is the process of attempting to
        verify the digital identity of the sender of a communication. A common
        example of this is the login process. Testing the authentication scheme
        means understanding how the authentication process works and using that
        information to circumvent the authentication mechanism.</p><p>Although
        most applications require authentication to access private information
        or to execute tasks, not all authentication methods are capable of
        providing adequate security. Negligence, ignorance or simple
        underestimation of security threats often result in authentication
        schemes that can be circumvented by simply bypassing the login page and
        calling directly to an internal page that is supposed to be accessible
        only once authentication is performed.</p><p>In addition, it is often
        possible to bypass authentication measures by manipulating requests and
        tricking the application into thinking that the user is already
        authenticated. This can be achieved by modifying the given URL
        parameter, manipulating the form or spoofing sessions.</p><p>Problems
        related to the authentication scheme can be encountered at different
        stages of the software development life cycle (SDLC), such as the
        design, development and deployment phases:</p><ul><li><p>In the design
        phase errors can include a wrong definition of the sections of the
        application to be protected, choosing not to apply strong encryption
        protocols to secure the transmission of credentials, and many
        more.</p></li><li><p>In the development phase errors may include
        incorrect implementation of the input validation functionality or not
        following security best practices for the specific
        language.</p></li><li><p>In the application deployment phase, there may
        be problems during application configuration (installation and
        configuration activities) due to lack of required technical knowledge or
        lack of good documentation.</p></li></ul>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: The attacker may
        use an alternate path or channel that does not require
        authentication.</p></li></ul>
      remediation: >-
        <p>Only authenticated users may view the application's private
        pages.</p><p>Explain in detail the modifications required to address the
        vulnerability in the case of bypassing the authentication
        functionality.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/04-Testing_for_Bypassing_Authentication_Schema
        - 'https://cwe.mitre.org/data/definitions/288.html'
      customFields: []
  category: Authentication
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Sensitive information stored in browser
      vulnType: OWASP WSTG
      description: >-
        <p>The web application lacks a proper caching policy that establishes
        the level of caching that should be done for each web page and the
        associated form fields.</p><p>Information may be stored by browsers for
        history and caching purposes. To enhance performance, caching is used so
        that previously downloaded data doesn't have to be downloaded again. For
        the user's convenience, history mechanisms are used so that they can see
        exactly what was viewed when the resource was retrieved. When sensitive
        data (like your address, credit card number, Social Security number, or
        user name) is displayed to the user, this data may be cached or saved
        for history purposes and can thus be retrieved by looking through the
        browser cache or by simply pressing the browser's back button.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>Use a restrictive caching policy for forms and web pages that
        potentially contain sensitive information. Do not store unnecessary
        sensitive information in the cache. Consider using encryption in the
        cache. Depending on whether this information is stored in history or
        cached the following actions can be taken to mitigate the
        vulnerability:</p><p>The back button can be prevented from displaying
        sensitive data. This can be done by:</p><p>Sending the page over
        HTTPS.</p><p>Setting Cache-Control: must-revalidate</p><p>To prevent
        pages containing sensitive information from being cached it is necessary
        to do one of the following two things:</p><p>Set the directive
        "Cache-Control: no-cache, no-store" or "Pragma: no-cache" in the
        response headers for such pages.
        Ex:</p><p>HTTP/1.1:</p><p>Cache-Control: no-cache,
        no-store.</p><p>HTTP/1.0:</p><p>Pragma: no-cache (or Cache-Control:
        no-cache).</p><p>Expires: <past date or an illegal value (ex:
        0)></p><p>Include in each HTML page that has sensitive information the
        following code:</p><p>HTTP/1.1:</p><p><META HTTP-EQUIV="Cache-Control"
        CONTENT="no-cache, no-store"></p><p>HTTP/1.0:</p><p><META
        HTTP-EQUIV="Pragma" CONTENT="no-cache"></p><p><META HTTP-EQUIV="Expires"
        CONTENT="Sat, 01-Jan-2000 00:00:00GMT"></p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses
        - 'https://cwe.mitre.org/data/definitions/525.html'
      customFields: []
  category: Authentication
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Weaknesses in password change/reset functionality
      vulnType: OWASP WSTG
      description: >-
        <p>A mechanism that enables a user to access their account in the event
        that they forget their password is typically present in applications.
        The password recovery mechanism is frequently unreliable, which
        increases the likelihood that someone besides the system's legitimate
        user will be able to access that user's account. A strong password
        authentication scheme is completely destroyed by weak password recovery
        procedures.</p><p>This weakness may exist due to the security question
        being too easy to guess (e.g., because the question is too common, or
        the answers can be found using social networks). There may also be an
        implementation weakness in the code of the password recovery mechanism
        that may, for instance, trick the system into emailing the new password
        to an email account other than the user's email account. The password
        reset rate may not be regulated, so a legitimate user may be denied of
        service if an attacker attempts to recover his or her password in quick
        succession. The system can send the original password to the user
        instead of generating a new temporary password. In summary, password
        recovery functionality, if not carefully designed and implemented, can
        often become the weakest link in the system that can be misused in a way
        that allows an attacker to gain unauthorized access to the system.</p>
      observation: >-
        <ul><li><p>Access Control: Gain Privileges or Assume Identity: An
        attacker could gain unauthorized access to the system by retrieving
        legitimate user's authentication
        credentials</p></li><li><p>Availability: DoS: Resource Consumption : An
        attacker could deny service to legitimate system users by launching a
        brute force attack on the password recovery mechanism using user ids of
        legitimate users.</p></li><li><p>Other: Other: The system's security
        functionality is turned against the system by the
        attacker.</p></li></ul>
      remediation: >-
        <p>Make sure that the password recovery mechanism has thoroughly
        filtered and validated every piece of information the user
        provides.</p><ul><li><p>Use multiple security questions rather than the
        usual weak security questions.</p></li><li><p>Make sure there aren't too
        many incorrect responses to a security question. After a certain (small)
        number of wrong answers, turn off the password recovery
        feature.</p></li><li><p>Demand that users correctly respond to the
        security question before allowing them to reset their password and
        receive the new password at the email address they have on
        file.</p></li><li><p>In the password recovery mechanism, never let the
        user choose the email address to which the new password will be
        sent.</p></li><li><p>Give a new temporary password rather than sharing
        the old one.</p></li></ul>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities
        - 'https://cwe.mitre.org/data/definitions/640.html'
      customFields: []
  category: Authentication
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: Credentials sent in clear text via email
      vulnType: OWASP WSTG
      description: >-
        <p>This flaw implies that after the user has verified their identity,
        the registration or password recovery functionality emails them the
        password. There are two main reasons why this is regarded as less
        secure:</p><p>The user receives the password in an unencrypted
        form.</p><p>The user is locked out of their account until they receive
        the email because the account password is changed at the time of the
        request. It is possible to prevent a user from accessing their account
        by sending numerous requests.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: An attacker may be
        able to decrypt the data using brute force attacks.</p></li></ul>
      remediation: >-
        <p>When sending passwords via email, the following areas should be
        reviewed:</p><ul><li><p>Is the user forced to change the password upon
        first login? The new password is sent via unencrypted email, and may
        remain in the user's inbox indefinitely if the user does not delete the
        email. Therefore, the user should be required to change the password
        upon first login.</p></li><li><p>Is the password generated securely? The
        password should be generated using a cryptographically secure
        pseudorandom number generator (CSPRNG), and should be long enough to
        prevent password guessing or brute force attacks. For a secure user
        experience, it should be generated using a secure passphrase style
        approach (i.e., combining multiple words), rather than a random string
        of characters.</p></li><li><p>Is the user's current password sent?
        Instead of generating a new password for the user, some applications
        send the users their current password. This is a very insecure method,
        as it exposes your current password via unencrypted email. Furthermore,
        if the site is able to retrieve the existing password, this implies that
        passwords are stored using reversible encryption, or (more likely) in
        unencrypted plaintext, which represents a serious security
        weakness.</p></li><li><p>Are emails sent from a domain with
        anti-spoofing protection? The domain must implement SPF, DKIM and DMARC
        to prevent attackers from spoofing emails coming from it, which could be
        used as part of a social engineering attack.</p></li><li><p>Is email
        considered secure enough? Emails are often sent unencrypted and, in many
        cases, the user's email account will not be protected by MFA. In
        addition, it may be shared among multiple individuals, especially in a
        corporate environment.</p></li></ul><p>Consider whether email-based
        password reset functionality is appropriate based on the context of the
        application being tested.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities
        - 'https://cwe.mitre.org/data/definitions/319.html'
        - 'https://cwe.mitre.org/data/definitions/311.html'
      customFields: []
  category: Authentication
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: Improper authentication
      vulnType: OWASP WSTG
      description: >-
        <p>The application does not prove or does not sufficiently prove that an
        actor's claim to possess a particular identity is true.</p>
      observation: >-
        <ul><li><p>Access Control: Execute Unauthorized Code or Commands: This
        weakness can lead to the exposure of resources or functionality to
        unintended actors, possibly providing attackers with sensitive
        information or even execute arbitrary code.</p></li></ul>
      remediation: >-
        <p>Utilize a framework or library for authentication, such as the OWASP
        ESAPI Authentication feature.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/287.html'
      customFields: []
  category: Authentication
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L'
  details:
    - locale: en
      title: All authentication controls must fail securely
      vulnType: OWASP WSTG
      description: >-
        <p>Secure error handling is a crucial component of secure coding.Two
        errors in particular require special attention. The first category is
        exceptions that arise during a security control's processing. It's
        crucial that these exceptions do not permit actions that the
        countermeasure would typically forbid.You should keep in mind as a
        developer that a security mechanism typically has three possible
        outcomes:</p><ul><li><p>Permit the procedure.</p></li><li><p>Permit the
        operation not.</p></li><li><p>An exception In general, your security
        mechanism should be built so that a failure will have the same effect as
        turning off the operation.</p></li></ul>
      observation: >-
        <ul><li><p>Confidentiality: Read Files or Directories: An attacker could
        read sensitive data, either by reading the data directly from a data
        store that is not properly restricted, or by accessing
        insufficiently-protected, privileged functionality to read the
        data.</p></li><li><p>Integrity: Modify Files or Directories: An attacker
        could modify sensitive data, either by writing the data directly to a
        data store that is not properly restricted, or by accessing
        insufficiently-protected, privileged functionality to write the
        data.</p></li><li><p>Access Control: Gain Privileges or Assume Identity:
        An attacker could gain privileges by modifying or reading critical data
        directly, or by accessing insufficiently-protected, privileged
        functionality.</p></li></ul>
      remediation: >-
        <p>Before using any access control systems in your application, make
        sure they have all undergone extensive security testing. Complete unit
        tests are frequently made specifically for this purpose.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/285.html'
      customFields: []
  category: Authentication
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: Cryptographic modules must fail securely - Padding Oracle Attack
      vulnType: OWASP WSTG
      description: >-
        <p>When a cryptographic module fails insecurely, the device must be put
        into error state so that it is no longer functional.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker may be
        able to read sensitive information</p></li></ul>
      remediation: >-
        <p>We advise putting the cryptographic module through its own tests
        using the National Institute of Standards and Technology (NIST) standard
        to see if it fails securely.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/310.html'
      customFields: []
  category: Authentication
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: Path Traversal
      vulnType: OWASP WSTG
      description: >-
        <p>The "Path Traversal" vulnerability enables users to access files or
        directories located elsewhere on the system by escaping the restricted
        area. It is possible to access any files and directories stored in the
        file system by adjusting variables that refer to files with
        "dot-dot-slash (../)" sequences and their variations.</p>
      observation: >-
        <ul><li><p>Integrity: Execute Unauthorized Code or Commands: The
        attacker may be able to create or overwrite critical files that are used
        to execute code, such as programs or
        libraries.</p></li><li><p>Confidentiality: Execute Unauthorized Code or
        Commands: The attacker may be able to create or overwrite critical files
        that are used to execute code, such as programs or
        libraries.</p></li><li><p>Availability: Execute Unauthorized Code or
        Commands: The attacker may be able to create or overwrite critical files
        that are used to execute code, such as programs or
        libraries.</p></li><li><p>Integrity: Modify Files or Directories: The
        attacker may be able to overwrite or create critical files, such as
        programs, libraries, or important data. If the targeted file is used for
        a security mechanism, then the attacker may be able to bypass that
        mechanism. For example, appending a new account at the end of a password
        file may allow an attacker to bypass
        authentication.</p></li><li><p>Confidentiality: Read Files or
        Directories: The attacker may be able read the contents of unexpected
        files and expose sensitive data. If the targeted file is used for a
        security mechanism, then the attacker may be able to bypass that
        mechanism. For example, by reading a password file, the attacker could
        conduct brute force password guessing attacks in order to break into an
        account on the system.</p></li><li><p>Availability: DoS: Crash, Exit, or
        Restart: The attacker may be able to overwrite, delete, or corrupt
        unexpected critical files such as programs, libraries, or important
        data. This may prevent the software from working at all and in the case
        of a protection mechanisms such as authentication, it has the potential
        to lockout every user of the software.</p></li></ul>
      remediation: >-
        <p>Use a data input validation strategy, or a list of inputs that are
        strictly compliant with the requirements, and reject any input that does
        not meet those requirements.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include
        - 'https://cwe.mitre.org/data/definitions/22.html'
      customFields: []
  category: Authorization
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: IDOR (Insecure Direct Object References)
      vulnType: OWASP WSTG
      description: >-
        <p>When an application grants direct access to objects based on input
        from the user, this is known as a "insecure direct object reference"
        (IDOR). This vulnerability enables attackers to bypass authentication
        and gain direct access to system resources, such as files or database
        records. By changing the value of a parameter used to point directly to
        an object, an attacker can bypass authentication and gain unrestricted
        access to resources. These resources may include system files, other
        users' database entries, etc. This happens because the application uses
        user-provided input to retrieve an object without carrying out enough
        authorization checks.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: An attacker
        could perform an arbitrary number of authentication attempts using
        different passwords, and eventually gain access to the targeted
        account.</p></li><li><p>Access Control: Gain Privileges or Assume
        Identity: Horizontal escalation of privilege is possible (one user can
        view/modify information of another user).</p></li><li><p>Access Control:
        Gain Privileges or Assume Identity: Vertical escalation of privilege is
        possible if the user-controlled key is actually a flag that indicates
        administrator status, allowing the attacker to gain administrative
        access.</p></li></ul>
      remediation: >-
        <p>Avert displaying references to secret items like file names or
        keys.</p><p>The server side must correctly implement parameter
        validation and object verification for all references.</p><p>Tokens must
        be created in a way that restricts their assignment to the user and
        prevents them from being shared with the public.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References
        - 'https://cwe.mitre.org/data/definitions/706.html'
        - 'https://cwe.mitre.org/data/definitions/813.html'
      customFields: []
  category: Authorization
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: Principle of least privilege
      vulnType: OWASP WSTG
      description: >-
        <p>According to the principle of least privilege, accounts should have
        the fewest privileges necessary to carry out their business operations.
        This includes user rights as well as network, file system, and resource
        permissions like CPU and memory caps.</p>
      observation: >-
        <ul><li><p>Other: Other: Exposing critical functionality essentially
        provides an attacker with the privilege level of that functionality. The
        consequences will depend on the associated functionality, but they can
        range from reading or modifying sensitive data, access to administrative
        or other privileged functionality, or possibly even execution of
        arbitrary code.</p></li></ul>
      remediation: >-
        <ul><li><p>The principle means giving a user account only those
        privileges which are essential to that user’s work. For example, a
        backup user does not need to install software: hence, the backup user
        has rights only to run backup and backup related applications. Any other
        privileges, such as installing new software, are
        blocked.</p></li><li><p>The principle applies also to a personal
        computer user who usually does work in a normal user account, and opens
        a privileged, password protected account (that is, a superuser) only
        when the situation absolutely demands it.</p></li><li><p>This principle
        can also be applied to your web applications. Instead of solely
        depending on role based authentication methods using sessions, we rather
        want to assign privileges to users by means of a Database-Based
        Authentication system.</p></li></ul><p>We still use sessions in order to
        identify if the user was logged in correctly, only now instead of
        assigning that user with a specific role we assign him with privileges
        to verify which actions he is privileged to perform on the system.Also,
        a big pro of this method is, whenever a user has to be assigned fewer
        privileges your changes will be applied on the fly since the assigning
        does not depend on the session which otherwise had to expire first.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/306.html'
      customFields: []
  category: Authorization
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: Improper Authorization
      vulnType: OWASP WSTG
      description: >-
        <p>When an actor tries to access a resource or carry out an action, the
        software either doesn't perform or incorrectly performs an authorization
        check.Based on the user's privileges and any permissions or other
        access-control requirements that apply to the resource, authorization is
        the process of determining whether a user with a given identity can
        access a specific resource.</p><p>Users are able to access data or carry
        out actions that they shouldn't be able to carry out when access control
        checks are not applied consistently, or at all. Numerous issues, such as
        information exposures, denial of service attacks, and arbitrary code
        execution, may result from this.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Files or Directories: An attacker could
        read sensitive data, either by reading the data directly from a data
        store that is not properly restricted, or by accessing
        insufficiently-protected, privileged functionality to read the
        data.</p></li><li><p>Integrity: Modify Files or Directories: An attacker
        could modify sensitive data, either by writing the data directly to a
        data store that is not properly restricted, or by accessing
        insufficiently-protected, privileged functionality to write the
        data.</p></li><li><p>Access Control: Gain Privileges or Assume Identity:
        An attacker could gain privileges by modifying or reading critical data
        directly, or by accessing insufficiently-protected, privileged
        functionality.</p></li></ul>
      remediation: >-
        <p>Architecture and Design</p><ul><li><p>Divide the software into
        anonymous, normal, privileged, and administrative areas. Reduce the
        attack surface by carefully mapping roles with data and functionality.
        Use role-based access control (RBAC) to enforce the roles at the
        appropriate boundaries.</p></li></ul><p>Note that this approach may not
        protect against horizontal authorization, i.e., it will not protect a
        user from attacking others with the same role.</p><ul><li><p>Ensure that
        you perform access control checks related to your business logic. These
        checks may be different than the access control checks that you apply to
        more generic resources such as files, connections, processes, memory,
        and database records. For example, a database may restrict access for
        medical records to a specific database user, but each record might only
        be intended to be accessible to the patient and the patient's
        doctor.</p></li><li><p>Use a vetted library or framework that does not
        allow this weakness to occur or provides constructs that make this
        weakness easier to avoid.</p></li><li><p>For example, consider using
        authorization frameworks such as the JAAS Authorization Framework
        REF-233 and the OWASP ESAPI Access Control feature
        REF-45.</p></li><li><p>For web applications, make sure that the access
        control mechanism is enforced correctly at the server side on every
        page. Users should not be able to access any unauthorized functionality
        or information by simply requesting direct access to that
        page.</p></li><li><p>One way to do this is to ensure that all pages
        containing sensitive information are not cached, and that all such pages
        restrict access to requests that are accompanied by an active and
        authenticated session token associated with a user who has the required
        permissions to access that page.</p></li></ul><p>System Configuration:
        Installation</p><ul><li><p>Use the access control capabilities of your
        operating system and server environment and define your access control
        lists accordingly. Use a "default deny" policy when defining these
        ACLs.</p></li></ul>
      references:
        - 'https://cwe.mitre.org/data/definitions/285.html'
      customFields: []
  category: Authorization
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: Predictable session ID
      vulnType: OWASP WSTG
      description: >-
        <p>The main objective of the session prediction attack is to foresee
        session ID values that enable an attacker to get around an application's
        authentication process. An attacker can predict a valid session ID value
        and gain access to the application by investigating and comprehending
        the session ID generation process.</p><p>First, the attacker needs to
        collect some valid session ID values that are used to identify
        authenticated users. Next, he or she needs to understand the structure
        of the session ID, the information used to create it, and the encryption
        or hashing algorithm used by the application to protect it. Some bad
        implementations use session IDs composed of the username or other
        predictable information, such as the client's timestamp or IP address.
        In the worst case, this information is used in clear text or is encoded
        using some weak algorithm such as base64 encoding.</p><p>Also, the
        attacker can implement a brute-force technique to generate and test
        different values of the session ID until he or she gains access to the
        application.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: An attacker
        could stay logged for long, which could reuse old or deleted IDs and
        direct references.</p></li></ul>
      remediation: >-
        <p>By utilizing hashes and non-repeatable variables like timestamps, a
        non-predictable session should be generated.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema
        - 'https://cwe.mitre.org/data/definitions/1018.html'
        - 'https://owasp.org/www-community/attacks/Session_Prediction'
      customFields: []
  category: Session Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Secure attribute missing in cookies
      vulnType: OWASP WSTG
      description: >-
        <p>The Secure attribute and the HttpOnly attribute are used to make sure
        that cookies are sent securely and cannot be accessed by scripts or
        unintended parties. A cookie with the Secure attribute is only ever sent
        to the server in conjunction with an encrypted HTTPS request. The
        JavaScript API cannot access a cookie with the HttpOnly attribute;
        instead, the server receives it instead.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: An attacker that
        performs a successful cross-site scripting or man-in-the-middle attack
        will be able to read the contents of the cookie and exfiltrate
        information obtained.</p></li></ul>
      remediation: >-
        <p>Both HttpOnly and Secure attributes should be used by the server when
        setting cookies in order to mitigate this vulnerability. An illustration
        is provided below:</p><p>Set-Cookie: cookie1=info1; Secure; HttpOnly</p>
      references:
        - >-
          https://cwe.mitre.org/data/definitions/614.html
          https://cwe.mitre.org/data/definitions/1004.html
        - 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies'
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html
      customFields: []
  category: Session Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: HTTP Only attribute missing in cookies
      vulnType: OWASP WSTG
      description: >-
        <p>The Secure attribute and the HttpOnly attribute are employed to
        guarantee that cookies are sent securely and cannot be accessed by
        unauthorized individuals or scripts. Only encrypted requests made using
        the HTTPS protocol and never unsecured HTTP are allowed to send cookies
        with the Secure attribute to the server. The JavaScript API cannot
        access a cookie with the HttpOnly attribute because it is only sent to
        the server.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: If the HttpOnly flag
        is not set, then sensitive information stored in the cookie may be
        exposed to unintended parties.</p></li><li><p>Integrity: Gain Privileges
        or Assume Identity: If the cookie in question is an authentication
        cookie, then not setting the HttpOnly flag may allow an adversary to
        steal authentication data (e.g., a session ID) and assume the identity
        of the user.</p></li></ul>
      remediation: >-
        <p>Both HttpOnly and Secure attributes should be used by the server when
        setting cookies in order to mitigate this vulnerability. An illustration
        is provided below:</p><p>Set-Cookie: cookie1=info1; Secure; HttpOnly</p>
      references:
        - >-
          https://cwe.mitre.org/data/definitions/614.html
          https://cwe.mitre.org/data/definitions/1004.html
        - 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies'
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html
      customFields: []
  category: Session Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: SameSite attribute missing in cookies
      vulnType: OWASP WSTG
      description: >-
        <p>It has been discovered that the cookies created by the application do
        not make use of the SameSite protection mechanism at the time of website
        access. This safeguard prevents potential Cross-Site Request Forgery
        (CSRF) attacks by regulating how cookies are sent in requests to other
        domains.</p>
      observation: >-
        <ul><li><p>Confidentiality: Modify Application Data: If the website does
        not impose additional defense against CSRF attacks, failing to use the
        'Lax' or 'Strict' values could increase the risk of exposure to CSRF
        attacks. The likelihood of the integrity breach is Low because a
        successful attack does not only depend on an insecure SameSite
        attribute. In order to perform a CSRF attack there are many conditions
        that must be met, such as the lack of CSRF tokens, no confirmations for
        sensitive actions on the website, a "simple" "Content-Type" header in
        the HTTP request and many more.</p></li></ul>
      remediation: >-
        <p>When possible, it is advised to create cookies with the 'SameSite'
        attribute set to the 'Strict' value.</p><p>Set-Cookie: <Cookie>=<Value>;
        Path=/; Expires=<Date>; Domain=<Domain>; Secure; HttpOnly;
        SameSite=Strict</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes
        - 'https://cwe.mitre.org/data/definitions/1275.html'
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html
        - 'https://cwe.mitre.org/data/definitions/1275.html'
      customFields: []
  category: Session Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Application cookies have an excessive or indefinite expiration time.
      vulnType: OWASP WSTG
      description: >-
        <p>The Expires attribute is used to:</p><ul><li><p>Set persistent
        cookies.</p></li><li><p>Limit the lifetime if a session lives too
        long.</p></li><li><p>Forcibly delete a cookie by setting it to a date in
        the past.</p></li></ul><p>Unlike session cookies, persistent cookies
        will be used by the browser until the cookie expires. Once the
        expiration date has passed the set time, the browser will delete the
        cookie.</p><p>Lack of proper session expiration can enhance the success
        likelihood of certain attacks. For example, an attacker can intercept a
        session ID, possibly through a network sniffer or Cross-site Scripting
        attack. While short session expiration times do not help if a stolen
        token is used immediately, they will protect against continuous replay
        of the session ID. In another scenario, a user might access a website
        from a shared computer (such as in a library, Internet cafe, or open
        work environment). Insufficient session expiration could allow an
        attacker to use the browser's back button to access web pages that the
        victim has previously accessed.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: An attacker
        could stay logged for long, which could reuse old or deleted IDs and
        direct references.</p></li></ul>
      remediation: >-
        <p>Only persistent cookies are set using the attribute itself. However,
        it's crucial to check that no sensitive data is present in the
        persistent cookie. For instance, if a persistent cookie is used to store
        information necessary for user authentication, an attacker with access
        to the cookie could use it to prove their identity to the
        application.</p><p>Therefore, we must make sure that a cookie containing
        sensitive information does not have the 'Expires' attribute
        set.</p><p>On the other hand, it is advisable to set brief expiration
        times to lower the likelihood that a potential attacker will repurpose
        them.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes
        - 'https://cwe.mitre.org/data/definitions/613.html'
      customFields: []
  category: Session Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: Insufficient Session Expiration
      vulnType: OWASP WSTG
      description: >-
        <p>Authenticated users' unique session cookies, which are typically used
        by web applications, must be configured with a lifetime so that they
        expire after a maximum set amount of time. Because of this, if a user
        logs in on another computer without manually ending their session, any
        other user who logs in on that computer and accesses the application
        will continue to be in the previous authenticated user's session.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: An attacker
        could stay logged for long, which could reuse old or deleted IDs and
        direct references.</p></li></ul>
      remediation: <p>Reduce the session expiration times.</p>
      references:
        - 'https://owasp.org/www-community/Session_Timeout'
      customFields: []
  category: Session Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: Session Fixation
      vulnType: OWASP WSTG
      description: >-
        <p>Authenticating a user, or establishing a new user session, without
        invalidating any existing session identifiers, gives an attacker the
        opportunity to steal authenticated sessions.</p><p>This scenario is
        commonly observed when:</p><ol><li><p>A web application authenticates a
        user without first invalidating the existing session, thus continuing
        the session already associated with the user.</p></li><li><p>An attacker
        is able to force a known session identifier on a user so that, once the
        user authenticates, the attacker has access to the authenticated
        session.</p></li><li><p>The application or container uses predictable
        session identifiers. In the generic exploit of session fixation
        vulnerabilities, an attacker creates a new session in a web application
        and registers the associated session identifier. The attacker then has
        the victim associate, and possibly authenticate, against the server
        using that session identifier, giving the attacker access to the user's
        account through the active session.</p></li></ol>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: An attacker
        could stay logged for long, which could reuse old or deleted IDs and
        direct references.</p></li></ul>
      remediation: >-
        <p>The countermeasure for a session fixation vulnerability is to
        hard-code the application in such a way that prevents the application
        from accepting a token that has been forced into the victim's
        session.</p><p>The following steps provide a robust way to secure a web
        application against these attacks:</p><ul><li><p>Do not accept session
        identifiers in GET or POST parameters. This makes it much more difficult
        for an attacker to exploit, as it is easier to trick a victim into
        making the request without browser vulnerabilities. In addition, all
        session IDs must be generated by the server; there should be no need for
        the client to propose a new session ID for the
        application.</p></li><li><p>Change the session ID after login. The
        server should generate a new session ID and set it as a cookie after the
        user has logged in. Any existing session for the user should be
        destroyed on the server.</p></li><li><p>Provide a logout function and
        expire old sessions. The user should be able to choose when to end their
        session with the application, which should immediately terminate any
        current session on the server and not simply delete the cookie from the
        browser. Session data should also expire automatically after a certain
        period, to reduce the time an attacker can make use of a compromised
        session.</p></li></ul>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/03-Testing_for_Session_Fixation
        - 'https://cwe.mitre.org/data/definitions/384.html'
      customFields: []
  category: Session Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: Cross-site Request Forgery (CSRF)
      vulnType: OWASP WSTG
      description: >-
        <p>A CSRF attack aims to trick a user into unwittingly executing
        functionality in a vulnerable web application that will be of benefit to
        the attacker and to the detriment of the affected
        user.</p><p>Specifically, the attack is carried out by forcing the
        browser of an unsuspecting user to make a request to the vulnerable
        website, a request that the user will carry out without realizing it,
        and succeeding as long as the user is logged into the website since the
        already established credentials (session ID, cookies,...) will be
        automatically used.</p><p>Unlike XSS attacks, which exploit the trust
        that a user has in a particular site, Cross Site Request Forgery
        exploits the trust that a site has in a particular user. This is an
        insufficient authentication vulnerability in which the application does
        not properly validate the origin of the request.</p>
      observation: >-
        <ul><li><p>Access Control: DoS: Crash, Exit, or Restart: The
        consequences will vary depending on the nature of the functionality that
        is vulnerable to CSRF. An attacker could effectively perform any
        operations as the victim. If the victim is an administrator or
        privileged user, the consequences may include obtaining complete control
        over the web application - deleting or stealing data, uninstalling the
        product, or using it to launch other attacks against all of the
        product's users. Because the attacker has the identity of the victim,
        the scope of CSRF is limited only by the victim's
        privileges.</p></li></ul>
      remediation: >-
        <p>To avoid Cross-Site Request Forgery attacks, it is necessary that
        each request made to the website contains a unique identifier (a
        synchronizer token), which must be a parameter that the attacker cannot
        find out.</p><p>For example, it is suggested to send in a parameter the
        session identifier of the legitimate user. The server must check this
        parameter as a way of validating that it is indeed the current user who
        is requesting the current operation.</p><p>Additionally, user
        interaction can be requested for sensitive transactions as a form of
        double authentication or by responding to a CAPTCHA.</p><p>Also, the
        REFERER header in the client request should be checked to ensure that
        each request is coming from the original site and not from an external
        source. This mitigation, although necessary, can be bypassed by an
        attacker using other types of vulnerabilities such as XSS.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery
        - 'https://cwe.mitre.org/data/definitions/352.html'
      customFields: []
  category: Session Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: Absence of token anti-CSRF
      vulnType: OWASP WSTG
      description: >-
        <p>A CSRF attack aims to trick a user into unwittingly executing
        functionality in a vulnerable web application that will be of benefit to
        the attacker and to the detriment of the affected
        user.</p><p>Specifically, the attack is carried out by forcing the
        browser of an unsuspecting user to make a request to the vulnerable
        website, a request that the user will carry out without realizing it,
        and succeeding as long as the user is logged into the website since the
        already established credentials (session ID, cookies,...) will be
        automatically used.</p><p>Unlike XSS attacks, which exploit the trust
        that a user has in a particular site, Cross Site Request Forgery
        exploits the trust that a site has in a particular user. This is an
        insufficient authentication vulnerability in which the application does
        not properly validate the origin of the request.</p>
      observation: >-
        <ul><li><p>Access Control: DoS: Crash, Exit, or Restart: The
        consequences will vary depending on the nature of the functionality that
        is vulnerable to CSRF. An attacker could effectively perform any
        operations as the victim. If the victim is an administrator or
        privileged user, the consequences may include obtaining complete control
        over the web application - deleting or stealing data, uninstalling the
        product, or using it to launch other attacks against all of the
        product's users. Because the attacker has the identity of the victim,
        the scope of CSRF is limited only by the victim's
        privileges.</p></li></ul>
      remediation: >-
        <p>The application should be updated to include anti-CSRF token support
        for any sensitive forms that are accessible during an authenticated
        session.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery
        - 'https://cwe.mitre.org/data/definitions/352.html'
      customFields: []
  category: Session Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: Weaknesses in the logout process.
      vulnType: OWASP WSTG
      description: >-
        <p>The applications' user logout mechanism is improperly
        implemented.</p><p>A user can interact with the application again
        without having to enter their login information again because the
        session is not properly invalidated.</p>
      observation: >-
        <ul><li><p>Access Control: Execute Unauthorized Code or Commands: This
        weakness can lead to the exposure of resources or functionality to
        unintended actors, possibly providing attackers with sensitive
        information or even execute arbitrary code.</p></li></ul>
      remediation: >-
        <p>It is advised that the logout button be present on all application
        pages, that it invalidate the session on both the client and the server,
        and that the server reject any further connections made with the same
        token.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/06-Testing_for_Logout_Functionality
        - 'https://cwe.mitre.org/data/definitions/287.html'
      customFields: []
  category: Session Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: Weaknesses in the logout process due to inactivity.
      vulnType: OWASP WSTG
      description: >-
        <p>All applications should implement an inactivity timeout for sessions.
        This timeout defines the amount of time a session will remain active in
        case of no user activity, closing and invalidating the session after the
        defined period of inactivity since the last HTTP request received by the
        web application for a given session ID. The most appropiate timeout
        should be a balance between security (shorter timeout) and usability
        (longer timeout) and depends largely on the level of sensitivity of the
        data handled by the application. For example, a 60-minute logout time
        for a public forum may be acceptable, but such a long time would be too
        long in a home banking application (where a maximum timeout of 15
        minutes is recommended). In any case, any application that does not
        enforce a timeout-based logout should be considered insecure, unless
        such behavior is required by a specific functional
        requirement.</p><p>Timeout limits the possibilities for an attacker to
        guess and use a valid session ID of another user, and in certain
        circumstances could protect public computers from session reuse.
        However, if the attacker is able to hijack a given session, the
        inactivity timeout does not limit the attacker's actions, as he or she
        can generate activity in the session periodically to keep the session
        active for a longer period of time.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: An attacker
        could stay logged for long, which could reuse old or deleted IDs and
        direct references.</p></li></ul>
      remediation: >-
        <p>The server side must implement session timeout management and
        expiration. An attacker could manipulate client-controlled data that is
        used to enforce session timeout, such as cookie values or other client
        parameters that track time references (such as the number of minutes
        since the login time), in order to lengthen the session. As a result,
        the application must monitor server-side idle time and, once the timeout
        period has passed, automatically invalidate the current user's session
        and delete all client-side data.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout
        - 'https://cwe.mitre.org/data/definitions/1018.html'
      customFields: []
  category: Session Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: Session Hijacking
      vulnType: OWASP WSTG
      description: >-
        <p>The session hijacking attack consists of exploiting the web session
        control mechanism, which is normally managed for a session
        token.</p><p>Since http communication uses many different TCP
        connections, the web server needs a method to recognize each user's
        connections. The most useful method relies on a token that the web
        server sends to the client browser after successful client
        authentication. A session token is typically composed of a variable
        width string and can be used in a variety of ways, such as in the URL,
        in the HTTP request header as a cookie, in other parts of the HTTP
        request header, or even in the body of the HTTP request.</p><p>The
        Session Hijacking attack compromises the session token by stealing or
        predicting a valid session token to gain unauthorized access to the web
        server.</p><p>The session token can be compromised in different ways;
        the most common ones are:- Session token prediction.- Session scanning.-
        Client-side attacks (XSS, malicious JavaScript code, Trojans, etc).-
        Man-in-the-middle attack.- Man-in-the-browser attack.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: An attacker
        could stay logged for long, which could reuse old or deleted IDs and
        direct references.</p></li></ul>
      remediation: >-
        <p>Use industry-standard session key generation processes that generate
        session keys using a lot of entropy, and properly encrypt and sign
        identity tokens in transit. You can rely on a lot of common web and
        application servers to handle this task. For each session, use a session
        timeout. After this timeout period, end the user's session if they
        didn't explicitly log out. A new session key must be generated if the
        user logs in again.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/09-Testing_for_Session_Hijacking
        - 'https://capec.mitre.org/data/definitions/593.html'
      customFields: []
  category: Session Management
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: Concurrent logins not properly controlled.
      vulnType: OWASP WSTG
      description: >-
        <p>Applications requiring authentication must only permit one active
        session per user and must not permit multiple authenticated user
        sessions across various browsers or computers.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: An attacker
        could stay logged for long, which could reuse old or deleted IDs and
        direct references.</p></li></ul>
      remediation: >-
        <p>It is advised that the same user's sessions not run concurrently and
        that they always receive notification when an old session is still
        active.</p>
      references:
        - 'https://owasp.org/www-community/attacks/Session_hijacking_attack'
      customFields: []
  category: Session Management
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: (generic) Failure to Sanitize input
      vulnType: OWASP WSTG
      description: >-
        <p>The incorrect use of special elements in user-controlled input is not
        properly filtered, removed, quoted, or otherwise managed by the product,
        which could have a negative impact on its behavior and integrity.</p>
      observation: >-
        <ul><li><p>Availability: DoS: Crash, Exit, or Restart: Client-side
        validation checks can be easily bypassed, allowing malformed or
        unexpected input to pass into the application, potentially as trusted
        data. This may lead to unexpected states, behaviours and possibly a
        resulting crash.</p></li><li><p>Availability: Execute Unauthorized Code
        or Commands: An attacker could use malicious input to modify data or
        possibly alter control flow in unexpected ways, including arbitrary
        command execution.</p></li></ul>
      remediation: >-
        <p>Developers should anticipate that special elements will be
        injected/removed/manipulated in the input vectors of their software
        system. Use an appropriate combination of black lists and whitelists to
        ensure only valid, expected and appropriate input is processed by the
        system.Implementation</p><ul><li><p>Assume all input is malicious. Use
        an ""accept known good"" input validation strategy, i.e., use a list of
        acceptable inputs that strictly conform to specifications. Reject any
        input that does not strictly conform to specifications, or transform it
        into something that does. When performing input validation, consider all
        potentially relevant properties, including length, type of input, the
        full range of acceptable values, missing or extra inputs, syntax,
        consistency across related fields, and conformance to business rules. As
        an example of business rule logic, ""boat"" may be syntactically valid
        because it only contains alphanumeric characters, but it is not valid if
        the input is only expected to contain colours such as "red" or "blue."
        Do not rely exclusively on looking for malicious or malformed inputs.
        This is likely to miss at least one undesirable input, especially if the
        code's environment changes. This can give attackers enough room to
        bypass the intended validation. However, blacklists can be useful for
        detecting potential attacks or determining which inputs are so malformed
        that they should be rejected outright.</p></li><li><p>While it is risky
        to use dynamically-generated query strings, code, or commands that mix
        control and data together, sometimes it may be unavoidable. Properly
        quote arguments and escape any special characters within those
        arguments. The most conservative approach is to escape or filter all
        characters that do not pass an extremely strict whitelist (such as
        everything that is not alphanumeric or white space). If some special
        characters are still needed, such as white space, wrap each argument in
        quotes after the escaping/filtering step. Be careful of argument
        injection (88).</p></li><li><p>Inputs should be decoded and
        canonicalized to the application's current internal representation
        before being validated (180). Make sure that the application does not
        decode the same input twice (174). Such errors could be used to bypass
        whitelist validation schemes by introducing dangerous inputs after they
        have been checked.</p></li></ul>
      references:
        - 'https://cwe.mitre.org/data/definitions/159.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: (generic) Cross-Site Scripting (XSS)
      vulnType: OWASP WSTG
      description: >-
        <p>The "Cross-Site Scripting (XSS)" vulnerability enables outside
        parties to inject Java Script or HTML code into specific application web
        pages. By doing this, it is possible to steal user sessions, compromise
        the security of the system, and obtain sensitive or proprietary
        information from the application.</p><p>This vulnerability is typically
        brought on by an application's failure to validate input and output
        parameters, which frequently happens with forms.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The most common
        attack performed with cross-site scripting involves the disclosure of
        information stored in user cookies. Typically, a malicious user will
        craft a client-side script, which -- when parsed by a web browser --
        performs some activity (such as sending all site cookies to a given
        E-mail address). This script will be loaded and run by each user
        visiting the web site. Since the site requesting to run the script has
        access to the cookies in question, the malicious script does
        also.</p></li><li><p>Availability: Execute Unauthorized Code or
        Commands: In some circumstances it may be possible to run arbitrary code
        on a victim's computer when cross-site scripting is combined with other
        flaws.</p></li><li><p>Access Control: Read Application Data: The
        consequence of an XSS attack is the same regardless of whether it is
        stored or reflected. The difference is in how the payload arrives at the
        server. XSS can cause a variety of problems for the end user that range
        in severity from an annoyance to complete account compromise. Some
        cross-site scripting vulnerabilities can be exploited to manipulate or
        steal cookies, create requests that can be mistaken for those of a valid
        user, compromise confidential information, or execute malicious code on
        the end user systems for a variety of nefarious purposes. Other damaging
        attacks include the disclosure of end user files, installation of Trojan
        horse programs, redirecting the user to some other page or site, running
        "Active X" controls (under Microsoft Internet Explorer) from sites that
        a user perceives as trustworthy, and modifying presentation of
        content.</p></li></ul>
      remediation: >-
        <p>Every parameter that the application manages needs to be validated,
        especially when it comes to input data provided by the user. This
        validation is always carried out on the server side and NEVER relies on
        validations carried out on the client side.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting
        - 'https://owasp.org/www-community/attacks/xss/'
        - 'https://cwe.mitre.org/data/definitions/79.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: Reflected Cross-Site Scripting (Reflected XSS)
      vulnType: OWASP WSTG
      description: >-
        <p>Through a Cross-Site Scripting (XSS) attack, an attacker can insert
        malicious code that runs in the victim's browser, take control of the
        browser, and use it to access credentials, sensitive data, or session
        data from the affected application.</p><p>For Reflected Cross-Site
        Scripting to work, the attacker must be in direct contact with the
        victim in order to send the malicious code that will be run in the
        victim's browser as part of the application.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The most common
        attack performed with cross-site scripting involves the disclosure of
        information stored in user cookies. Typically, a malicious user will
        craft a client-side script, which -- when parsed by a web browser --
        performs some activity (such as sending all site cookies to a given
        E-mail address). This script will be loaded and run by each user
        visiting the web site. Since the site requesting to run the script has
        access to the cookies in question, the malicious script does
        also.</p></li><li><p>Availability: Execute Unauthorized Code or
        Commands: In some circumstances it may be possible to run arbitrary code
        on a victim's computer when cross-site scripting is combined with other
        flaws.</p></li><li><p>Access Control: Read Application Data: The
        consequence of an XSS attack is the same regardless of whether it is
        stored or reflected. The difference is in how the payload arrives at the
        server. XSS can cause a variety of problems for the end user that range
        in severity from an annoyance to complete account compromise. Some
        cross-site scripting vulnerabilities can be exploited to manipulate or
        steal cookies, create requests that can be mistaken for those of a valid
        user, compromise confidential information, or execute malicious code on
        the end user systems for a variety of nefarious purposes. Other damaging
        attacks include the disclosure of end user files, installation of Trojan
        horse programs, redirecting the user to some other page or site, running
        "Active X" controls (under Microsoft Internet Explorer) from sites that
        a user perceives as trustworthy, and modifying presentation of
        content.</p></li></ul>
      remediation: >-
        <p>Preventing Cross-site Scripting (XSS) attacks is not trivial
        depending on the complexity of the application and how it handles
        user-controllable data and the type of Cross-site Scripting (XSS)
        vulnerability.</p><p>However, there are certain general principles that
        the following measures should implement:</p><ul><li><p>Filter data
        input: Treat all user input as untrusted, filter as strictly as possible
        based on what is expected or is valid input.</p></li><li><p>Use
        encryption: With the use of an appropriate encryption technique prevent
        it from being interpreted as legitimate content.</p></li><li><p>Use
        secure response headers: Browsers accept different types of headers to
        prevent Cross-site Scripting (XSS) attacks, such as a Content Security
        Policy (CSP) and 'X-XSS-Protection'.</p></li><li><p>Protect cookies: It
        is necessary to mitigate possible access to session cookies with the
        'HttpOnly' flag. This flag disables access to cookies through
        client-side JavaScript.</p></li></ul>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting
        - 'https://owasp.org/www-community/attacks/xss/'
        - 'https://cwe.mitre.org/data/definitions/79.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: Stored Cross-Site Scripting (Stored XSS)
      vulnType: OWASP WSTG
      description: >-
        <p>Cross-Site Scripting (XSS) attacks are a type of injection, in which
        malicious scripts are injected into otherwise benign and trusted
        websites. XSS attacks occur when an attacker uses a web application to
        send malicious code, generally in the form of a browser side script, to
        a different end user. Flaws that allow these attacks to succeed are
        quite widespread and occur anywhere a web application uses input from a
        user within the output it generates without validating or encoding it.
        Stored attacks are those where the injected script is permanently stored
        on the target servers, such as in a database, in a message forum,
        visitor log, comment field, etc. The victim then retrieves the malicious
        script from the server when it requests the stored information. Stored
        XSS is also sometimes referred to as Persistent or Type-I XSS.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The most common
        attack performed with cross-site scripting involves the disclosure of
        information stored in user cookies. Typically, a malicious user will
        craft a client-side script, which -- when parsed by a web browser --
        performs some activity (such as sending all site cookies to a given
        E-mail address). This script will be loaded and run by each user
        visiting the web site. Since the site requesting to run the script has
        access to the cookies in question, the malicious script does
        also.</p></li><li><p>Availability: Execute Unauthorized Code or
        Commands: In some circumstances it may be possible to run arbitrary code
        on a victim's computer when cross-site scripting is combined with other
        flaws.</p></li><li><p>Access Control: Read Application Data: The
        consequence of an XSS attack is the same regardless of whether it is
        stored or reflected. The difference is in how the payload arrives at the
        server. XSS can cause a variety of problems for the end user that range
        in severity from an annoyance to complete account compromise. Some
        cross-site scripting vulnerabilities can be exploited to manipulate or
        steal cookies, create requests that can be mistaken for those of a valid
        user, compromise confidential information, or execute malicious code on
        the end user systems for a variety of nefarious purposes. Other damaging
        attacks include the disclosure of end user files, installation of Trojan
        horse programs, redirecting the user to some other page or site, running
        "Active X" controls (under Microsoft Internet Explorer) from sites that
        a user perceives as trustworthy, and modifying presentation of
        content.</p></li></ul>
      remediation: >-
        <p>Sanitizing all server-side input is necessary to reduce the risk of
        stored XSS. To serve all the data to the client side, create a White box
        filter with the permitted characters and use html encoding.</p>
      references:
        - >-
          https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
          https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_SS
          heet.html
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: HTTP Parameter Pollution (HPP)
      vulnType: OWASP WSTG
      description: >-
        <p>HTTP Parameter Pollution takes advantage of the application's
        incorrect behavior when responding to HTTP requests that have the same
        parameter defined on the server but were sent with different values.
        HTTP Parameter Pollution takes advantage of the application's incorrect
        behavior when responding to HTTP requests that have the same parameter
        defined on the server but were sent with different values.</p>
      observation: >-
        <ul><li><p>Integrity: Unexpected State: An attacker could manipulate
        parameters in the application</p></li></ul>
      remediation: >-
        <p>This kind of attack would be avoided by properly sanitizing input
        data, verifying the number of individual parameter instances in a
        request, and looking for requests with duplicate assignments.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution
        - 'https://cwe.mitre.org/data/definitions/235.html'
        - 'https://capec.mitre.org/data/definitions/460.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: (generic) SQL Injection
      vulnType: OWASP WSTG
      description: >-
        <p>Through the use of SQL code injection (SQLi), it is possible to
        change the logic of SQL statements and enable the execution of different
        kinds of database queries. In addition to adding new records or
        deleting/modifying existing ones, it is possible to obtain data from the
        database that should, in theory, not be accessible, such as users,
        passwords, details about the application itself, etc. If the database
        user has more rights than necessary, it might be possible for them to
        access other databases or even run system commands. The primary root
        cause of SQL code injection (SQLi) is improper application input
        parameter validation.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: Since SQL databases
        generally hold sensitive data, loss of confidentiality is a frequent
        problem with SQL injection vulnerabilities.</p></li><li><p>Access
        Control: Bypass Protection Mechanism: If poor SQL commands are used to
        check user names and passwords, it may be possible to connect to a
        system as another user with no previous knowledge of the
        password.</p></li><li><p>Access Control: Bypass Protection Mechanism: If
        authorization information is held in a SQL database, it may be possible
        to change this information through the successful exploitation of a SQL
        injection vulnerability.</p></li><li><p>Integrity: Modify Application
        Data: Just as it may be possible to read sensitive information, it is
        also possible to make changes or even delete this information with a SQL
        injection attack.</p></li></ul>
      remediation: >-
        <p>Validate the parameters that the application manages, especially when
        the user submits them as input data. This validation is always carried
        out on the server side and never depends on client-side validations.</p>
      references:
        - 'https://www.owasp.org/index.php/SQL_Injection'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: In band Union-based SQL Injection
      vulnType: OWASP WSTG
      description: >-
        <p>The SQL Injection (SQLi) attack attempts to obtain information or
        even execute commands through this vulnerability by interacting
        unexpectedly with the database. Since it is a blind sql injection in
        this instance, the response does not directly provide information about
        it; instead, an attacker must decipher the server's response messages in
        order to obtain the information.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: Since SQL databases
        generally hold sensitive data, loss of confidentiality is a frequent
        problem with SQL injection vulnerabilities.</p></li><li><p>Access
        Control: Bypass Protection Mechanism: If poor SQL commands are used to
        check user names and passwords, it may be possible to connect to a
        system as another user with no previous knowledge of the
        password.</p></li><li><p>Access Control: Bypass Protection Mechanism: If
        authorization information is held in a SQL database, it may be possible
        to change this information through the successful exploitation of a SQL
        injection vulnerability.</p></li><li><p>Integrity: Modify Application
        Data: Just as it may be possible to read sensitive information, it is
        also possible to make changes or even delete this information with a SQL
        injection attack.</p></li></ul>
      remediation: >-
        <p>Sanitizing the application's input parameters is advised to address
        this issue because doing so prevents attackers from introducing
        characters that could change the SQL query and enable information
        retrieval.</p><p>The main suggestion is to put in place a "White List"
        system where only the words and characters defined in the list are
        accepted and any other value is ignored before being used in the
        database. If this option is not feasible, a ""Black List"" that avoids
        the defined characters can be made using characters that are vulnerable
        to this kind of attack, such as % #'""""'"""" () +, ;, and SQL query
        keywords such as "select," "where," "union," "join," and "update."
        Additionally, you must look for any encoding variations for these
        characters, such as URL encoding, unicode/UTF-8, and hex.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection
        - 'https://owasp.org/www-community/attacks/Blind_SQL_Injection'
        - 'https://cwe.mitre.org/data/definitions/89.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: In band Error-Based SQL Injection
      vulnType: OWASP WSTG
      description: >-
        <p>An unexpected database interaction known as a SQL injection (SQLi)
        attack tries to obtain information or even execute commands using this
        flaw. Since it is an error-based sql injection in this instance, the
        response does not directly provide information about it; instead, an
        attacker must interpret the error messages the server provides in order
        to obtain the information.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: Since SQL databases
        generally hold sensitive data, loss of confidentiality is a frequent
        problem with SQL injection vulnerabilities.</p></li><li><p>Access
        Control: Bypass Protection Mechanism: If poor SQL commands are used to
        check user names and passwords, it may be possible to connect to a
        system as another user with no previous knowledge of the
        password.</p></li><li><p>Access Control: Bypass Protection Mechanism: If
        authorization information is held in a SQL database, it may be possible
        to change this information through the successful exploitation of a SQL
        injection vulnerability.</p></li><li><p>Integrity: Modify Application
        Data: Just as it may be possible to read sensitive information, it is
        also possible to make changes or even delete this information with a SQL
        injection attack.</p></li></ul>
      remediation: >-
        <p>Sanitizing the application's input parameters is advised to address
        this issue because doing so prevents attackers from introducing
        characters that could change the SQL query and enable information
        retrieval.</p><p>The main suggestion is to put in place a "White List"
        system where only the words and characters defined in the list are
        accepted and any other value is ignored before being used in the
        database. If this option is not feasible, a ""Black List"" that avoids
        the defined characters can be made using characters that are vulnerable
        to this kind of attack, such as % #'""""'"""" () +, ;, and SQL query
        keywords such as "select," "where," "union," "join," and "update."
        Additionally, you must look for any encoding variations for these
        characters, such as URL encoding, unicode/UTF-8, and hex.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection
        - 'https://cwe.mitre.org/data/definitions/89.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: Blind Time-Based SQL Injection
      vulnType: OWASP WSTG
      description: >-
        <p>The SQL Injection (SQLi) attack attempts to obtain information or
        even execute commands through this vulnerability by interacting
        unexpectedly with the database. Since it is a time-based sql injection
        in this instance, the response does not directly provide information
        about it; rather, an attacker must interpret the server's response times
        to obtain the necessary information.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: Since SQL databases
        generally hold sensitive data, loss of confidentiality is a frequent
        problem with SQL injection vulnerabilities.</p></li><li><p>Access
        Control: Bypass Protection Mechanism: If poor SQL commands are used to
        check user names and passwords, it may be possible to connect to a
        system as another user with no previous knowledge of the
        password.</p></li><li><p>Access Control: Bypass Protection Mechanism: If
        authorization information is held in a SQL database, it may be possible
        to change this information through the successful exploitation of a SQL
        injection vulnerability.</p></li><li><p>Integrity: Modify Application
        Data: Just as it may be possible to read sensitive information, it is
        also possible to make changes or even delete this information with a SQL
        injection attack.</p></li></ul>
      remediation: >-
        <p>Sanitizing the application's input parameters is advised to address
        this issue because doing so prevents attackers from introducing
        characters that could change the SQL query and enable information
        retrieval.</p><p>The main suggestion is to put in place a "White List"
        system where only the words and characters defined in the list are
        accepted and any other value is ignored before being used in the
        database. If this option is not feasible, a ""Black List"" that avoids
        the defined characters can be made using characters that are vulnerable
        to this kind of attack, such as % #'""""'"""" () +, ;, and SQL query
        keywords such as "select," "where," "union," "join," and "update."
        Additionally, you must look for any encoding variations for these
        characters, such as URL encoding, unicode/UTF-8, and hex.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection
        - 'https://cwe.mitre.org/data/definitions/89.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: Blind Boolean-Based SQL Injection
      vulnType: OWASP WSTG
      description: >-
        <p>The attacker uses boolean-based SQL injection to send SQL queries to
        the database, forcing the application to return a different result
        depending on whether the query returns true or false. The HTTP
        response's content may change or stay the same depending on the outcome.
        Even if no data is returned from the database, this enables an attacker
        to determine whether the result is true or false.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: Since SQL databases
        generally hold sensitive data, loss of confidentiality is a frequent
        problem with SQL injection vulnerabilities.</p></li><li><p>Access
        Control: Bypass Protection Mechanism: If poor SQL commands are used to
        check user names and passwords, it may be possible to connect to a
        system as another user with no previous knowledge of the
        password.</p></li><li><p>Access Control: Bypass Protection Mechanism: If
        authorization information is held in a SQL database, it may be possible
        to change this information through the successful exploitation of a SQL
        injection vulnerability.</p></li><li><p>Integrity: Modify Application
        Data: Just as it may be possible to read sensitive information, it is
        also possible to make changes or even delete this information with a SQL
        injection attack.</p></li></ul>
      remediation: >-
        <p>Sanitizing the application's input parameters is advised to address
        this issue because doing so prevents attackers from introducing
        characters that could change the SQL query and enable information
        retrieval.</p><p>The main suggestion is to put in place a "White List"
        system where only the words and characters defined in the list are
        accepted and any other value is ignored before being used in the
        database. If this option is not feasible, a ""Black List"" that avoids
        the defined characters can be made using characters that are vulnerable
        to this kind of attack, such as % #'""""'"""" () +, ;, and SQL query
        keywords such as "select," "where," "union," "join," and "update."
        Additionally, you must look for any encoding variations for these
        characters, such as URL encoding, unicode/UTF-8, and hex.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection
        - 'https://cwe.mitre.org/data/definitions/89.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: Out of Band SQL Injection
      vulnType: OWASP WSTG
      description: >-
        <p>Out-of-Band SQL injection exfiltrates data through the output
        channel, which can be the DNS or HTTP protocol, as opposed to in-band
        and blind SQL injection. Depending on the available function, a database
        system may or may not be able to start an outgoing HTTP or DNS request.
        The function may set a connection (for instance, DBMS LDAP.INIT, UTL
        HTTP.request) or operate on files (for instance, load file(), master..xp
        dirtree). The targeted web and database servers must comply with the
        following requirements in order to exploit OOB SQL
        injection:</p><ul><li><p>The web application's lack of input
        validation</p></li><li><p>A network environment that dispenses with
        security perimeters and permits the target database server to initiate
        outgoing requests (via DNS or HTTP) to the general
        public</p></li><li><p>Enough rights to run the function required to send
        the exit request</p></li></ul>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: Since SQL databases
        generally hold sensitive data, loss of confidentiality is a frequent
        problem with SQL injection vulnerabilities.</p></li><li><p>Access
        Control: Bypass Protection Mechanism: If poor SQL commands are used to
        check user names and passwords, it may be possible to connect to a
        system as another user with no previous knowledge of the
        password.</p></li><li><p>Access Control: Bypass Protection Mechanism: If
        authorization information is held in a SQL database, it may be possible
        to change this information through the successful exploitation of a SQL
        injection vulnerability.</p></li><li><p>Integrity: Modify Application
        Data: Just as it may be possible to read sensitive information, it is
        also possible to make changes or even delete this information with a SQL
        injection attack.</p></li></ul>
      remediation: >-
        <ul><li><p>On both the client and server sides, input
        validation.</p></li><li><p>Correct handling of errors to prevent
        detailed information about them from being
        displayed.</p></li><li><p>Examine the architectures for the network and
        security.</p></li><li><p>Use the least privilege possible when
        allocating the database account to the application.</p></li><li><p>The
        use of additional security measures like intrusion prevention systems
        (IPS) and web application firewalls (WAF).</p></li><li><p>Constantly
        keeping an eye out for anomalies and having effective incident response
        procedures in place as a network of security controls.</p></li></ul>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection
        - 'https://cwe.mitre.org/data/definitions/89.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: LDAP Injection
      vulnType: OWASP WSTG
      description: >-
        <p>Information about users, hosts, and numerous other objects is stored
        using the Lightweight Directory Access Protocol (LDAP). An LDAP
        injection is a server-side attack that can reveal, modify, or insert
        sensitive data about users and hosts represented in an LDAP structure.
        Input parameters that are later passed to the internal find, add, and
        modify functions are changed to accomplish this.</p><p>To allow users to
        authenticate or look up other users' information within a corporate
        structure, a web application might use LDAP. LDAP injection attacks aim
        to insert LDAP search filter metacharacters into an application query
        that will be executed.</p>
      observation: >-
        <ul><li><p>Integrity: Modify Application Data: An attacker could include
        input that changes the LDAP query which allows unintended commands or
        code to be executed, allows sensitive data to be read or modified or
        causes other unintended behavior.</p></li></ul>
      remediation: >-
        <p>Assume that all inputs are malicious. Use an "accept the good-known"
        input validation strategy, that is, use a list of acceptable inputs that
        strictly conform to specifications. Reject any input that doesn't
        strictly conform to specs, or transform it into something that
        does.</p><p>When performing input validation, consider all potentially
        relevant properties, such as length, input type, full range of
        acceptable values, missing or extra inputs, syntax, consistency between
        related fields and compliance with business rules. As an example of
        business rule logic, "ship" may be syntactically valid because it
        contains only alphanumeric characters, but it is not valid if the input
        is expected to contain only colors such as "red" or "blue".</p><p>Do not
        rely only on searching for malicious or malformed entries. At least one
        unwanted input is likely to be missed, especially if the environment of
        the code changes. This can give attackers enough room to bypass the
        intended validation. However, deny lists can be useful for detecting
        potential attacks or determining which entries are so malformed that
        they should be rejected outright.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html
        - 'https://cwe.mitre.org/data/definitions/90.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: XML External Entity Processing (XXE)
      vulnType: OWASP WSTG
      description: >-
        <p>Some applications transmit data between the browser and the server
        using the XML format. Applications that perform this almost always
        process the XML data on the server using a standard library or platform
        API. An example of a special XML entity is one whose defined values are
        loaded from sources other than the DTD in which they are declared. From
        a security standpoint, external entities are particularly intriguing
        because they enable the definition of an entity based on the contents of
        a file path or URL.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Files or Directories: If the attacker
        is able to include a crafted DTD and a default entity resolver is
        enabled, the attacker may be able to access arbitrary files on the
        system.</p></li><li><p>Integrity: Bypass Protection Mechanism: The DTD
        may include arbitrary HTTP requests that the server may execute. This
        could lead to other attacks leveraging the server's trust relationship
        with other entities.</p></li><li><p>Availability: DoS: Resource
        Consumption (Memory): The software could consume excessive CPU cycles or
        memory using a URI that points to a large file, or a device that always
        returns data such as /dev/random. Alternately, the URI could reference a
        file that contains many nested or recursive entity references to further
        slow down parsing.</p></li></ul>
      remediation: >-
        <p>According to the OWASP Cheat Sheet "XXE Prevention," turn off
        processing of XML external entities and DTDs in all XML parsers in the
        application.Additionally, use server-side input validation, filtering,
        or sanitization that is positive ("whitelisting") to ward off hostile
        data in XML documents, headers, or nodes.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/611.html'
        - >-
          https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing
          https://capec.mitre.org/data/definitions/201.html
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: Server Side Injection (SSI)
      vulnType: OWASP WSTG
      description: >-
        <p>SSI (Server-Side Includes) are directives present in web applications
        that are used to feed an HTML page with dynamic content. They are
        similar to CGIs, except that SSIs are used to execute some actions
        before the current page is loaded or while it is being displayed. To do
        this, the web server parses the SSIs before serving the page to the
        user.</p><p>The SSI injection attack allows you to attack a web
        application by injecting scripts into HTML pages or by executing
        arbitrary code remotely. It can be exploited through manipulation of SSI
        directives in use in the application or force their use by injecting new
        directives through user input fields.</p><p>It is possible to check if
        the application is correctly validating the data in the input fields by
        inserting characters that are used in SSI directives, such
        as:</p><p>&lt; ! # = / . " - &gt; and [a-zA-Z0-9]</p><p>Another way to
        find out if the application is potentially vulnerable is to check for
        the presence of pages with .stm, .shtm and .shtml extensions. However,
        the absence of such pages does not mean that the application is
        protected against SSI attacks.</p><p>In either case, the attack will
        only be successful if the web server allows SSI to run without
        performing proper validation first. If this occurs, it may be possible
        to access and manipulate system files and processes under the permission
        of the web server process owner.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The injected code
        could access restricted data / files.</p></li><li><p>Access Control:
        Bypass Protection Mechanism: In some cases, injectable code controls
        authentication; this may lead to a remote
        vulnerability.</p></li><li><p>Access Control: Gain Privileges or Assume
        Identity: Injected code can access resources that the attacker is
        directly prevented from accessing.</p></li><li><p>Other: Execute
        Unauthorized Code or Commands: Code injection attacks can lead to loss
        of data integrity in nearly all cases as the control-plane data injected
        is always incidental to data recall or writing. Additionally, code
        injection can often result in the execution of arbitrary
        code.</p></li><li><p>Non-Repudiation: Hide Activities: Often the actions
        performed by injected control code are
        unlogged.</p></li><li><p>Integrity: Modify Application Data: The
        communications between components can be modified in unexpected ways.
        Unexpected commands can be executed, bypassing other security
        mechanisms. Incoming data can be misinterpreted.</p></li></ul>
      remediation: >-
        <p>User-controllable data should not, whenever possible, be embedded by
        applications in pages that are rendered for SSI directives. There are
        generally safer alternate ways to implement the necessary functionality.
        If this is deemed impractical, the data must be rigorously validated.
        Ideally, you ought to employ a white list of particular acceptable
        values. Only brief alphanumeric strings will be accepted in the absence
        of this. Any additional data, including any potential SSI metacharacter,
        should be excluded from input.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/08-Testing_for_SSI_Injection
        - >-
          https://owasp.org/www-community/attacks/Server-Side_Includes_(SSI)_Injection#:~:text=The%20Server%2DSide%20Includes%20attack,use%20through%20user%20input%20fields.
        - '- http://httpd.apache.org/docs/current/howto/ssi.html'
        - 'https://cwe.mitre.org/data/definitions/96.html'
        - 'https://cwe.mitre.org/data/definitions/116.html'
        - 'https://cwe.mitre.org/data/definitions/159.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: XPATH injection
      vulnType: OWASP WSTG
      description: >-
        <p>Similar to SQL injection, XPath injection attacks take place when a
        website builds an XPath query for XML data using data supplied by the
        user.XPath is a kind of straightforward descriptive statement that
        enables searching the XML for a specific piece of information. You can
        specify specific attributes to look for and patterns to match, just like
        in SQL. It is common practice to accept some kind of input in the query
        string when using XML for a website in order to identify the content to
        find and display on the page. Such queries can be changed to return more
        data than they should or even run server-side code if the attacker sends
        a malicious XPath string.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: In some cases,
        injectable code controls authentication; this may lead to a remote
        vulnerability.</p></li><li><p>Access Control: Gain Privileges or Assume
        Identity: Injected code can access resources that the attacker is
        directly prevented from accessing.</p></li><li><p>Other: Execute
        Unauthorized Code or Commands: Code injection attacks can lead to loss
        of data integrity in nearly all cases as the control-plane data injected
        is always incidental to data recall or writing. Additionally, code
        injection can often result in the execution of arbitrary
        code.</p></li><li><p>Non-Repudiation: Hide Activities: Often the actions
        performed by injected control code are unlogged.</p></li></ul>
      remediation: >-
        <p>Before being included in XPATH (XML) queries, user input must be
        strictly validated. It is advised to employ a whitelist that restricts
        the characters or values that the application will accept as user
        input.</p><p>If whitelisting is not an option, a less preferred
        alternative is to employ a blacklist that at the very least eliminates
        the characters ""'/ @ = * [] (y)</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/09-Testing_for_XPath_Injection
        - 'https://owasp.org/www-community/attacks/XPATH_Injection'
        - 'https://cwe.mitre.org/data/definitions/94.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: File Path Manipulation
      vulnType: OWASP WSTG
      description: >-
        <p>When user-controllable data is inserted into a file or URL path that
        is used on the server to access local resources, which may be located
        inside or outside the web root, file path manipulation vulnerabilities
        are created. If a file path is vulnerable, an attacker can change it to
        access different resources.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Files or Directories: An attacker could
        read confidential data if they are able to control resource
        references.</p></li><li><p>Integrity: Modify Files or Directories: An
        attacker could modify sensitive data, either by writing the data
        directly to a data store that is not properly restricted, or by
        accessing insufficiently-protected, privileged functionality to write
        the data.</p></li></ul>
      remediation: >-
        <p>Believing that all input is malicious Use a list of inputs that are
        strictly compliant with specifications as part of a "accept known good"
        input validation strategy. Any input that does not strictly adhere to
        the specifications should be rejected or changed. Use strict whitelists
        that restrict the character set that can be used when validating
        filenames. To prevent vulnerabilities like CWE-23, only allow a single
        "." character in the filename, and keep directory separators like "/"
        out.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/35.html'
        - 'https://capec.mitre.org/data/definitions/126.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: External Control of Filename
      vulnType: OWASP WSTG
      description: >-
        <p>Due to a vulnerability, file names used by the filesystem can be
        changed or controlled by user input. An attacker can create a package
        that changes the ZIP file's downloadable extension.</p>
      observation: >-
        <ul><li><p>Confidentiality: Modify Files or Directories: The application
        can operate on unexpected files. Confidentiality is violated when the
        targeted filename is not directly readable by the
        attacker.</p></li><li><p>Integrity: Modify Files or Directories: The
        application can operate on unexpected files. This may violate integrity
        if the filename is written to, or if the filename is for a program or
        other form of executable code.</p></li><li><p>Availability: DoS: Crash,
        Exit, or Restart; DoS: Resource Consumption (Other): The application can
        operate on unexpected files. Availability can be violated if the
        attacker specifies an unexpected file that the application modifies.
        Availability can also be affected if the attacker specifies a filename
        for a large file, or points to a special device or a file that does not
        have the format that the application expects.</p></li></ul>
      remediation: >-
        <p>Believing that all input is malicious Use a list of inputs that are
        strictly compliant with specifications as part of a "accept known good"
        input validation strategy. Any input that does not strictly adhere to
        the specifications should be rejected or changed. Use strict whitelists
        that restrict the character set that can be used when validating
        filenames. To prevent vulnerabilities like CWE-23, only allow a single
        "." character in the filename, and keep directory separators like "/"
        out.Believing that all input is malicious Use a list of inputs that are
        strictly compliant with specifications as part of a "accept known good"
        input validation strategy. Any input that does not strictly adhere to
        the specifications should be rejected or changed. Use strict whitelists
        that restrict the character set that can be used when validating
        filenames.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/73.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: Remote code execution (RCE) by injection of local files
      vulnType: OWASP WSTG
      description: >-
        <p>Utilizing the application's vulnerable file call procedures, local
        file inclusion (LFI) is the process of including files that are already
        on the server. For instance, when a page receives input that is the path
        to a local file, this vulnerability manifests. Characters traversing the
        directory may be injected to access other files on the server if this
        entry is not properly sanitized.</p>
      observation: >-
        <ul><li><p>Access Control: Execute Unauthorized Code or Commands: This
        weakness can lead to the exposure of resources or functionality to
        unintended actors, possibly providing attackers with sensitive
        information or even execute arbitrary code.</p></li></ul>
      remediation: >-
        <p>The best way to get rid of file inclusion vulnerabilities is to never
        give any file system/framework APIs any user input. If this is not
        possible, the application can keep a list of permitted files that the
        page may include, and then use an index number or other identifier to
        access the desired file. So that malicious users cannot manipulate the
        route, any request that contains an invalid identifier should be
        rejected. It is advised to adhere to the recommendations of the OWASP
        guide (https://cheatsheetseries.owasp.org/cheatsheets/File Upload Cheat
        Sheet.html) for good remediation practices against File inclusion
        vulnerabilities.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion
        - 'https://cwe.mitre.org/data/definitions/20.html'
        - >-
          https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11-Testing_for_Code_Injection
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: Remote code execution (RCE)
      vulnType: OWASP WSTG
      description: >-
        <p>Attacks known as remote code execution (RCE) give an attacker the
        ability to remotely run malicious code on a computer. An RCE
        vulnerability may result in the execution of malware or the complete
        takeover of a compromised machine by an attacker.</p>
      observation: >-
        <ul><li><p>Access Control: Execute Unauthorized Code or Commands: This
        weakness can lead to the exposure of resources or functionality to
        unintended actors, possibly providing attackers with sensitive
        information or even execute arbitrary code.</p></li></ul>
      remediation: >-
        <p>Restrict the source, whether it is an input or an open path leading
        to an application, from which the RCE is being accessed.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html
        - 'https://cwe.mitre.org/data/definitions/20.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: Remote code execution (RCE) by remote file injection
      vulnType: OWASP WSTG
      description: >-
        <p>The process of including references to remote files from another
        server through the use of weak file call procedures that were
        implemented in the application is known as remote file inclusion (RFI).
        This flaw, for instance, appears when a page downloads files from
        outside sources and then includes them in the application. It is
        possible to alter the resource to make the request against one that is
        controlled by an attacker if that input is not properly sanitized.</p>
      observation: >-
        <ul><li><p>Access Control: Execute Unauthorized Code or Commands: This
        weakness can lead to the exposure of resources or functionality to
        unintended actors, possibly providing attackers with sensitive
        information or even execute arbitrary code.</p></li></ul>
      remediation: >-
        <p>The best way to get rid of file inclusion vulnerabilities is to never
        give any file system/framework APIs any user input. If this is not
        possible, the application can keep a list of permitted files that the
        page may include, and then use an index number or other identifier to
        access the desired file. So that malicious users cannot manipulate the
        route, any request that contains an invalid identifier should be
        rejected. It is advised to adhere to the recommendations of the OWASP
        guide (https://cheatsheetseries.owasp.org/cheatsheets/File Upload Cheat
        Sheet.html) for good remediation practices against File inclusion
        vulnerabilities.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html
        - 'https://cwe.mitre.org/data/definitions/20.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: Improper access control
      vulnType: OWASP WSTG
      description: >-
        <p>The software does not restrict or incorrectly restricts access to a
        resource from an unauthorized actor.Access control involves the use of
        several protection mechanisms such as:</p><ul><li><p>Authentication
        (proving the identity of an actor)</p></li><li><p>Authorization
        (ensuring that a given actor can access a
        resource)</p></li><li><p>Accountability (tracking of activities that
        were performed)</p></li></ul><p>When any mechanism is not applied or
        otherwise fails, attackers can compromise the security of the software
        by gaining privileges, reading sensitive information, executing
        commands, evading detection, etc.</p><p>There are two distinct behaviors
        that can introduce access control
        weaknesses:</p><ul><li><p>Specification: incorrect privileges,
        permissions, ownership, etc. are explicitly specified for either the
        user or the resource (for example, setting a password file to be
        world-writable, or giving administrator capabilities to a guest user).
        This action could be performed by the program or the
        administrator.</p></li><li><p>Enforcement: the mechanism contains errors
        that prevent it from properly enforcing the specified access control
        requirements (e.g., allowing the user to specify their own privileges,
        or allowing a syntactically-incorrect ACL to produce insecure settings).
        This problem occurs within the program itself, in that it does not
        actually enforce the intended security policy that the administrator
        specifies.</p></li></ul>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: Access control
        checks for specific user data or functionality can be
        bypassed.</p></li></ul>
      remediation: >-
        <p>Architecture and Design</p><ul><li><p>Very carefully manage the
        setting, management, and handling of privileges. Explicitly manage trust
        zones in the software.</p></li><li><p>Compartmentalize the system to
        have "safe" areas where trust boundaries can be unambiguously drawn. Do
        not allow sensitive data to go outside of the trust boundary and always
        be careful when interfacing with a compartment outside of the safe
        area.</p></li><li><p>Ensure that appropriate compartmentalization is
        built into the system design and that the compartmentalization serves to
        allow for and further reinforce privilege separation functionality.
        Architects and designers should rely on the principle of least privilege
        to decide when it is appropriate to use and to drop system
        privileges.</p></li></ul>
      references:
        - 'https://cwe.mitre.org/data/definitions/284.html'
      customFields: []
  category: Authorization
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: Remote Code Execution (RCE) by Improper Access Control
      vulnType: OWASP WSTG
      description: >-
        <p>The software's failure to impose access controls on a website object
        is referred to as an improper access control vulnerability. When
        accessing the web service, a malicious user may compromise the
        software's security and take certain unapproved actions.</p>
      observation: >-
        <ul><li><p>Other: Varies by Context: An attacker can access any
        functionality that is inadvertently accessible to the
        source.</p></li></ul>
      remediation: <p>Do not allow anonymous users to access this website.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/284.html'
      customFields: []
  category: Authorization
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: Command Injection
      vulnType: OWASP WSTG
      description: >-
        <p>Command injection vulnerabilities typically occur
        when:</p><ol><li><p>Data enters the app from an untrusted
        source.</p></li><li><p>The data is part of a string that is executed as
        a command by the application.</p></li><li><p>By executing the command,
        the application gives an attacker a privilege or capability that they
        would not have otherwise.</p></li></ol><p>Many protocols and products
        have their own custom command language. While shell or operating system
        command strings are frequently discovered and targeted, developers may
        not realize that these other command languages ​​can also be vulnerable
        to attack.</p>
      observation: >-
        <ul><li><p>Integrity: Execute Unauthorized Code or Commands: If a
        malicious user injects a character (such as a semi-colon) that delimits
        the end of one command and the beginning of another, it may be possible
        to then insert an entirely new and unrelated command that was not
        intended to be executed.</p></li><li><p>Confidentiality: Read
        Application Data: The injected code could access restricted data /
        files.</p></li><li><p>Access Control: Bypass Protection Mechanism: In
        some cases, injectable code controls authentication; this may lead to a
        remote vulnerability.</p></li><li><p>Access Control: Gain Privileges or
        Assume Identity: Injected code can access resources that the attacker is
        directly prevented from accessing.</p></li><li><p>Other: Execute
        Unauthorized Code or Commands: Code injection attacks can lead to loss
        of data integrity in nearly all cases as the control-plane data injected
        is always incidental to data recall or writing. Additionally, code
        injection can often result in the execution of arbitrary
        code.</p></li><li><p>Non-Repudiation: Hide Activities: Often the actions
        performed by injected control code are unlogged.</p></li></ul>
      remediation: >-
        <p>It is recommended to limit the user's capabilities as much as
        possible when allowing him or her to execute specific commands on the
        server and assess and evaluate, in the first instance, whether it is
        absolutely necessary for the user to be able to carry out this type of
        action, as they involve a potential danger inherently.</p><p>It would be
        appropriate to restrict these capabilities given that many languages
        have built-in functions for executing commands on the computer, such as
        the system() function in PHP, and that it is possible to restrict the
        capabilities of the interpreter that runs the application (as in the
        case of PHP).</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection
        - 'https://portswigger.net/web-security/os-command-injection'
        - 'https://cwe.mitre.org/data/definitions/77.html'
        - 'https://cwe.mitre.org/data/definitions/78.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: Injection of commands into HTTP Host headers.
      vulnType: OWASP WSTG
      description: >-
        <p>A web server typically hosts multiple web applications on the same IP
        address, referencing each application through the virtual host. On an
        incoming HTTP request, web servers typically send the request to the
        destination virtual host based on the value supplied in the Host header.
        Without proper validation of the header value, the attacker can supply
        invalid data to cause the web server to:</p><ul><li><p>Send the requests
        to the first virtual host in the list.</p></li><li><p>Cause a
        redirection to a domain controlled by the
        attacker.</p></li><li><p>Perform a poisoning of the web
        cache.</p></li><li><p>Manipulate the password reset
        functionality.</p></li></ul>
      observation: >-
        <ul><li><p>Access Control: Execute Unauthorized Code or Commands: This
        weakness can lead to the exposure of resources or functionality to
        unintended actors, possibly providing attackers with sensitive
        information or even execute arbitrary code.</p></li></ul>
      remediation: >-
        <p>To filter, escape, or encode unsecure data sent from the server in an
        HTTP response header, perform output validation.</p><p>Disable the
        ability for the client's browser to run scripts.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection
        - 'https://cwe.mitre.org/data/definitions/644.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: Server-Side Template Injection (SSTI)
      vulnType: OWASP WSTG
      description: >-
        <p>When a user requests an HTML view, modern applications generate it
        using a template engine (also known as "templates"). The programming
        language's built-in functions in these template engines allow for the
        execution of risky functions and even code on the server hosting the
        application. It is possible to use those functions to run code on the
        server if a malicious user can inject template directives, and these are
        then rendered by the template engine.</p>
      observation: >-
        <ul><li><p>Access Control: Bypass Protection Mechanism: In some cases,
        injectable code controls authentication; this may lead to a remote
        vulnerability.</p></li><li><p>Access Control: Gain Privileges or Assume
        Identity: Injected code can access resources that the attacker is
        directly prevented from accessing.</p></li><li><p>Other: Execute
        Unauthorized Code or Commands: Code injection attacks can lead to loss
        of data integrity in nearly all cases as the control-plane data injected
        is always incidental to data recall or writing. Additionally, code
        injection can often result in the execution of arbitrary
        code.</p></li><li><p>Non-Repudiation: Hide Activities: Often the actions
        performed by injected control code are without been
        logged.</p></li></ul>
      remediation: >-
        <p>Make sure you are not passing user-controllable variables to the
        functions that render templates. Sanitizing the input is crucial in the
        event that it is required to prevent characters from being
        interpreted.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection
        - 'https://cwe.mitre.org/data/definitions/94.html'
        - 'https://portswigger.net/research/server-side-template-injection'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: Server-Side Request Forgery (SSRF)
      vulnType: OWASP WSTG
      description: >-
        <p>The SSRF (Server-Side Request Forgery) vulnerability arises when it
        is possible to direct the server to send a request to any domain using
        the user's input data. When the user making the request does not receive
        the server's response, this vulnerability may become "blind." No such
        response is provided in this instance. However, based on the server
        response time, an enumeration of nearby machines on the network can be
        carried out.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The injected code
        could access restricted data / files.</p></li><li><p>Integrity: Execute
        Unauthorized Code or Commands: The attacker may be able to create or
        overwrite critical files that are used to execute code, such as programs
        or libraries.</p></li></ul>
      remediation: >-
        <p>Whitelisting the inputs that are permitted by that parameter is the
        appropriate mitigation for this vulnerability. In other words, only
        accept the paths to the resources that you actually need to access
        because, as of right now, doing otherwise gives www-data user access to
        any area of the permissions system where they can read.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery
        - 'https://cwe.mitre.org/data/definitions/918.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:L'
  details:
    - locale: en
      title: JSON validation schema
      vulnType: OWASP WSTG
      description: >-
        <p>A vocabulary called JSON Schema enables you to annotate and validate
        JSON documents.</p><p>You have better control over the kinds of user
        input that can be supplied in your application when adding schemas to
        your JSON files.When done properly, this drastically reduces an
        attacker's vector.</p><p>However, as an additional line of defense, you
        should always apply your own input validation and rejection. This
        strategy is also preferred because you also want to counteract and
        record user requests and input.</p>
      observation: >-
        <ul><li><p>Availability: DoS: Resource Consumption (Memory): An attacker
        could provide unexpected values and cause a program crash or excessive
        consumption of resources, such as memory and
        CPU.</p></li><li><p>Confidentiality: Read Files or Directories: An
        attacker could read confidential data if they are able to control
        resource references.</p></li><li><p>Availability: Execute Unauthorized
        Code or Commands: An attacker could use malicious input to modify data
        or possibly alter control flow in unexpected ways, including arbitrary
        command execution.</p></li></ul>
      remediation: >-
        <p>To ensure a properly formatted JSON request, confirm that JSON schema
        validation occurs. Next, validate each input field before any data
        processing is done.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/20.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:L'
  details:
    - locale: en
      title: XML schema (XSD)
      vulnType: OWASP WSTG
      description: >-
        <p>You have better control over the kind of user input that can be
        provided in your application when adding schemas to your XML files. When
        done properly, this drastically reduces an attacker's vector. However,
        as an additional line of defense, you should always apply your own input
        validation and rejection. This strategy is also preferred because you
        also want to counteract and record user requests and input.</p>
      observation: >-
        <ul><li><p>Availability: DoS: Resource Consumption (Memory): An attacker
        could provide unexpected values and cause a program crash or excessive
        consumption of resources, such as memory and
        CPU.</p></li><li><p>Confidentiality: Read Files or Directories: An
        attacker could read confidential data if they are able to control
        resource references.</p></li><li><p>Availability: Execute Unauthorized
        Code or Commands: An attacker could use malicious input to modify data
        or possibly alter control flow in unexpected ways, including arbitrary
        command execution.</p></li></ul>
      remediation: >-
        <p>Check that the XSD schema is validated to ensure that the XML
        document is correctly formatted, and then validate each input field
        before the data is processed.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/20.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:L'
  details:
    - locale: en
      title: Verify that structured data is strongly typed and validated
      vulnType: OWASP WSTG
      description: >-
        <p>When structured data is tightly typed and checked against a specified
        schema, a defendable proactive application can be created. By using the
        defined schemas, the application can now measure everything that is
        outside of its intended operation and should be used to reject input if
        the schema checks return false.</p>
      observation: >-
        <ul><li><p>Availability: DoS: Resource Consumption (Memory): An attacker
        could provide unexpected values and cause a program crash or excessive
        consumption of resources, such as memory and
        CPU.</p></li><li><p>Confidentiality: Read Files or Directories: An
        attacker could read confidential data if they are able to control
        resource references.</p></li><li><p>Availability: Execute Unauthorized
        Code or Commands: An attacker could use malicious input to modify data
        or possibly alter control flow in unexpected ways, including arbitrary
        command execution.</p></li></ul>
      remediation: >-
        <p>Check that structured data is strongly typed and validated against a
        defined schema, including the permitted characters, length, and pattern
        (for example, credit card numbers or phone numbers, or validating that
        two related fields are logical, such as validating suburbs and zip or
        post codes match).</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/20.html'
      customFields: []
  category: Input Validation
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N'
  details:
    - locale: en
      title: >-
        Disclosure of sensitive information due to improper handling of
        application errors.
      vulnType: OWASP WSTG
      description: >-
        <p>Verbose errors that are not properly controlled frequently result in
        responses that inform the user of the application's internal
        architecture. Versions of installed software or database information are
        some examples of the data that can be retrieved in this way.</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The attacker gets
        information from an error message response</p></li></ul>
      remediation: >-
        <p>To stop the application from displaying sensitive information from
        your infrastructure or database, implement a proper system of
        redirections to secure pages or generic texts in the response.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling
      customFields: []
  category: Error handling
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N'
  details:
    - locale: en
      title: Abuse of application logic workflow.
      vulnType: OWASP WSTG
      description: >-
        <p>Workflow vulnerabilities involve any type of vulnerability that
        allows an attacker to misuse an application/system in a way that allows
        them to bypass (not follow) the designed/intended
        workflow.</p><p>Definition of a workflow on Wikipedia:</p><p>A workflow
        consists of a sequence of connected steps in which each step follows
        without delay or gap, ending just before the next step can begin. It is
        a representation of a sequence of operations, stated as the work of a
        person or group, an organization of personnel, or one or more simple or
        complex mechanisms. Workflow can be thought of as an abstraction of
        actual work.</p><p>The application's business logic should require the
        user to complete specific steps in the correct/specific order and if the
        workflow is terminated without completing it successfully, all actions
        and generated actions are ""rolled back"" or aborted. Vulnerabilities
        related to workflow circumvention of correct business logic are unique
        in that they are very application/system specific and careful manual
        abuse cases must be developed using the requirements. and use
        cases.</p><p>The applications business process must have checks to
        ensure that user transactions/actions proceed in the correct/acceptable
        order and if a transaction triggers some type of action, that action
        will be ""rolled back"" and killed if the transaction does not complete
        successfully.</p>
      observation: >-
        <ul><li><p>Other: Alter Execution Logic: An attacker could cause the
        software to skip critical steps or perform them in the wrong order,
        bypassing its intended business logic. This can sometimes have security
        implications.</p></li></ul>
      remediation: >-
        <p>The application needs controls that ensure users complete each
        workflow step in the proper order and stop attackers from bypassing,
        skipping, or replaying any steps or processes in the workflow. It also
        needs to be self-aware. Creating business logic abuse or misuse cases
        with the objective of successfully completing the business process while
        not completing the correct steps in the correct order is how testing for
        workflow vulnerabilities is done.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/06-Testing_for_the_Circumvention_of_Work_Flows
      customFields: []
  category: Functionality/Business Logic
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: Insecure validation in file upload functionality
      vulnType: OWASP WSTG
      description: >-
        <p>Many applications allow users to upload data to their business
        processes. Although input validation for text-based input fields is
        widely understood, accepting files makes it more challenging to
        implement. Despite the fact that many websites use straightforward
        restrictions based on a list of permitted (or blocked) extensions, this
        is insufficient to stop attackers from loading safe file types with
        malicious content.</p>
      observation: >-
        <ul><li><p>Availability: Execute Unauthorized Code or Commands:
        Arbitrary code execution is possible if an uploaded file is interpreted
        and executed as code by the recipient. This is especially true for .asp
        and .php extensions uploaded to web servers because these file types are
        often treated as automatically executable, even when file system
        permissions do not specify execution. For example, in Unix environments,
        programs typically cannot run unless the execute bit is set, but PHP
        programs may be executed by the web server without directly invoking
        them on the operating system.</p></li></ul>
      remediation: >-
        <p>Control the types of files that are sent to the application properly.
        Examine the file type, paying attention to both the extension and the
        content.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files.html
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html
      customFields: []
  category: Functionality/Business Logic
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L'
  details:
    - locale: en
      title: Insecure deserialization
      vulnType: OWASP WSTG
      description: >-
        <p>It is often convenient to serialize objects for communication or to
        save them for later use. However, deserialized code or data can often be
        modified without using the provided access functions if they do not use
        cryptography to protect themselves. Also, any crypto would still be
        client-side security, which is a dangerous security
        assumption.</p><p>Untrusted data cannot be trusted to be well-formed.
        When developers don't put restrictions on ""gadget chains"", or series
        of instances and method invocations that can auto-execute during the
        deserialization process (i.e. before the object is returned to the
        caller), They can sometimes be exploited by attackers to perform
        unauthorized actions, such as generating a shell.</p><p>Serialization
        and deserialization refer to the process of taking the data related to
        the program's internal object, packaging it in a way that allows the
        data to be stored or transferred externally (""serialization""), and
        then extracting the serialized data to reconstruct the object. original
        (""deserialization"").</p>
      observation: >-
        <ul><li><p>Integrity: Unexpected State: Attackers can modify unexpected
        objects or data that was assumed to be safe from
        modification.</p></li><li><p>Availability: DoS: Resource Consumption
        (CPU): If a function is making an assumption on when to terminate, based
        on a sentry in a string, it could easily never
        terminate.</p></li><li><p>Other: Varies by Context: The consequences can
        vary widely, because it depends on which objects or methods are being
        de-serialized, and how they are used. Making an assumption that the code
        in the de-serialized object is valid is dangerous and can enable
        exploitation.</p></li></ul>
      remediation: >-
        <p>Possible mitigations for different phases of the application creation
        process are described below:</p><ul><li><p>Phases: Architecture and
        design; implementation. If available, use the programming language's
        signing/sealing features to ensure that the deserialized data has not
        been tainted. For example, a hash-based message authentication code
        (HMAC) could be used to ensure that data has not been
        modified.</p></li><li><p>Phase: Implementation. When deserializing data,
        it is recommended to populate a new object rather than just deserialize.
        The result is that the data goes through secure input validation and the
        functions are secure.</p></li><li><p>Phase: Implementation. Explicitly
        define a final() object to avoid deserialization.</p></li><li><p>Phases:
        Architecture and Design; Implementation. Make fields transient to
        protect them from deserialization. An attempt to serialize and then
        deserialize a class containing transient fields will result in NULLs
        where the transient data should be. This is a great way to prevent
        temporary, environment, or sensitive variables from being transferred
        and misused.</p></li><li><p>Phase: Implementation. Avoid having
        unnecessary types or gadgets available that can be exploited for
        malicious purposes. This limits the possibility of unwanted or
        unauthorized types and gadgets being exploited by the attacker. Add only
        acceptable classes to an allow list. Note: New gadgets are constantly
        being discovered, so this alone is not a sufficient
        mitigation.</p></li></ul>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/01-Test_Business_Logic_Data_Validation
        - >-
          https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html
        - 'https://cwe.mitre.org/data/definitions/502.html'
      customFields: []
  category: Functionality/Business Logic
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: Client-Side URL Redirect (Open Redirection)
      vulnType: OWASP WSTG
      description: >-
        <p>A vulnerability known as Open Redirect occurs when a program
        inadvertently incorporates user-controllable data into the destination
        of a redirection. Within the application, an attacker can create a URL
        that directs traffic to any external domain.</p>
      observation: >-
        <ul><li><p>Access Control: Gain Privileges or Assume Identity: The user
        may be redirected to an untrusted page that contains malware which may
        then compromise the user's machine. This will expose the user to
        extensive risk and the user's interaction with the web server may also
        be compromised if the malware conducts keylogging or other attacks that
        steal credentials, personally identifiable information (PII), or other
        important data.</p></li><li><p>Other: Other: The user may be subjected
        to phishing attacks by being redirected to an untrusted page. The
        phishing attack may point to an attacker controlled web page that
        appears to be a trusted web site. The phishers may then steal the user's
        credentials and then use these credentials to access the legitimate web
        site.</p></li></ul>
      remediation: >-
        <p>By disabling the redirection function or keeping a server-side list
        of all URLs that are allowed for redirection, applications should,
        whenever possible, avoid incorporating user-controllable data into
        redirection targets.</p>
      references:
        - 'https://cwe.mitre.org/data/definitions/601.html'
        - 'https://portswigger.net/kb/issues/00500100_open-redirection-reflected'
      customFields: []
  category: Web client side
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: HTML Content Injection
      vulnType: OWASP WSTG
      description: >-
        <p>HTML injections allow for the client-side injection of HTML code that
        the victim's browser will interpret when visiting a URL. It is possible
        to alter the DOM and, in some circumstances, to inject JavaScript code
        to assist in stealing data from the victim's browser.</p>
      observation: >-
        <ul><li><p>Availability: DoS: Resource Consumption (Memory): An attacker
        could provide unexpected values and cause a program crash or excessive
        consumption of resources, such as memory and
        CPU.</p></li><li><p>Confidentiality: Read Files or Directories: An
        attacker could read confidential data if they are able to control
        resource references.</p></li><li><p>Availability: Execute Unauthorized
        Code or Commands: An attacker could use malicious input to modify data
        or possibly alter control flow in unexpected ways, including arbitrary
        command execution.</p></li></ul>
      remediation: >-
        <p>This kind of attack can be stopped by properly sanitizing user input
        or correctly validating the contents that the server receives and
        sends.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/03-Testing_for_HTML_Injection
        - 'https://cwe.mitre.org/data/definitions/20.html'
      customFields: []
  category: Web client side
- cvssv3: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N'
  details:
    - locale: en
      title: CSS Content Injection
      vulnType: OWASP WSTG
      description: >-
        <p>Similar to how HTML or XSS injections work, CSS injections give
        hackers the ability to insert CSS code on the client side, which the
        victim's browser will then interpret when they visit a URL. It has been
        demonstrated that it is possible to exfiltrate data from the DOM using
        only CSS, despite the fact that CSS does not have the same potential as
        HTML or JavaScript and is only capable of exporting styles.</p>
      observation: >-
        <ul><li><p>Availability: DoS: Resource Consumption (Memory): An attacker
        could provide unexpected values and cause a program crash or excessive
        consumption of resources, such as memory and
        CPU.</p></li><li><p>Confidentiality: Read Files or Directories: An
        attacker could read confidential data if they are able to control
        resource references.</p></li><li><p>Availability: Execute Unauthorized
        Code or Commands: An attacker could use malicious input to modify data
        or possibly alter control flow in unexpected ways, including arbitrary
        command execution.</p></li></ul>
      remediation: >-
        <p>This kind of attack can be stopped by properly validating the
        contents that the server receives and sends, or correctly sanitizing the
        user input.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/05-Testing_for_CSS_Injection
        - >-
          https://research.securitum.com/css-data-exfiltration-in-firefox-via-single-injection-point/
        - 'https://cwe.mitre.org/data/definitions/20.html'
      customFields: []
  category: Web client side
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: DOM based Cross-Site Scripting (XSS)
      vulnType: OWASP WSTG
      description: >-
        <p>An XSS attack known as DOM-based XSS causes client-side code to run
        in a "unexpected" manner by altering the DOM "environment" that the
        victim's browser was designed to use by the original client-side script.
        As a result of malicious changes made to the DOM environment, the
        client-side code contained in the page executes differently even though
        the page itself (i.e., the HTTP response) remains the same.</p><p>Other
        XSS attacks (stored or reflected), in contrast, place the attack payload
        on the response page (due to a server-side failure).</p>
      observation: >-
        <ul><li><p>Confidentiality: Read Application Data: The most common
        attack performed with cross-site scripting involves the disclosure of
        information stored in user cookies. Typically, a malicious user will
        craft a client-side script, which -- when parsed by a web browser --
        performs some activity (such as sending all site cookies to a given
        E-mail address). This script will be loaded and run by each user
        visiting the web site. Since the site requesting to run the script has
        access to the cookies in question, the malicious script does
        also.</p></li><li><p>Availability: Execute Unauthorized Code or
        Commands: In some circumstances it may be possible to run arbitrary code
        on a victim's computer when cross-site scripting is combined with other
        flaws.</p></li><li><p>Access Control: Read Application Data: The
        consequence of an XSS attack is the same regardless of whether it is
        stored or reflected. The difference is in how the payload arrives at the
        server. XSS can cause a variety of problems for the end user that range
        in severity from an annoyance to complete account compromise. Some
        cross-site scripting vulnerabilities can be exploited to manipulate or
        steal cookies, create requests that can be mistaken for those of a valid
        user, compromise confidential information, or execute malicious code on
        the end user systems for a variety of nefarious purposes. Other damaging
        attacks include the disclosure of end user files, installation of Trojan
        horse programs, redirecting the user to some other page or site, running
        "Active X" controls (under Microsoft Internet Explorer) from sites that
        a user perceives as trustworthy, and modifying presentation of
        content.</p></li></ul>
      remediation: >-
        <p>There is no single action that can completely eliminate the threat of
        DOM-based attacks. Generally speaking, however, the most effective way
        to prevent DOM-based vulnerabilities is to prevent data from any
        untrusted source from dynamically altering the value that is passed to
        any receiver.</p><p>If the desired functionality of the application
        means that this behavior is unavoidable, then defenses must be
        implemented within client-side code. In many cases, relevant data can be
        validated against a whitelist, allowing only content that is known to be
        safe. In other cases, it will be necessary to sanitize or encrypt the
        data. This can be a complex task and, depending on the context in which
        the data is to be inserted, may involve a combination of JavaScript
        escaping, HTML encoding, and URL encoding, in the appropriate
        sequence.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting
        - 'https://cwe.mitre.org/data/definitions/79.html'
      customFields: []
  category: Web client side
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  details:
    - locale: en
      title: Cross-Origin Resource Sharing (CORS) missconfiguration
      vulnType: OWASP WSTG
      description: >-
        <p>CORS stands for Cross-Origin Resource Sharing. It is a feature
        offering the possibility for:- A web application to expose resources to
        all or restricted domain.- A web client to make AJAX request for
        resource on another domain than its source domain.An unrestrictive CORS
        policy can be abused in several ways that can risk the user’s
        confidentiality, availability and integrity information.</p>
      observation: >-
        <ul><li><p>Other: Varies by Context: An attacker can access any
        functionality that is inadvertently accessible to the
        source.</p></li></ul>
      remediation: >-
        <p>Only allow the trusted domains or subdomains that the application
        should trust in the Access-Control-Allow-Origin header.</p>
      references:
        - >-
          https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing
        - 'https://cwe.mitre.org/data/definitions/942.html'
        - 'https://developer.mozilla.org/es/docs/Web/HTTP/CORS'
        - >-
          https://stackoverflow.com/questions/1653308/access-control-allow-origin-multiple-origin-domains
      customFields: []
  category: Web client side
